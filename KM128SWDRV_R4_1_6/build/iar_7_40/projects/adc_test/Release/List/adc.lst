###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        14/Apr/2017  12:33:04
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\adc\adc.c
#    Command line =  
#        C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\adc\adc.c -D NDEBUG -lCN
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\adc_test\Release\List\
#        -o
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\adc_test\Release\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ --no_mem_idioms -e --fpu=None --dlib_config
#        D:\IAR7.4anzhuang\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\adc_test\..\..\..\..\src\common\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\adc_test\..\..\..\..\src\drivers\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\adc_test\..\..\..\..\src\freemaster\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\adc_test\..\..\..\..\src\projects\adc_test\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\adc_test\..\..\..\..\src\toolchain\iar\
#        -Ol --require_prototypes
#    List file    =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\adc_test\Release\List\adc.lst
#    Object file  =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\adc_test\Release\Obj\adc.o
#
###############################################################################

C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\adc\adc.c
      1          /******************************************************************************
      2           * (c) Copyright 2010-2015, Freescale Semiconductor Inc.
      3           * ALL RIGHTS RESERVED.
      4           ***************************************************************************//*!
      5           * @file      adc.c
      6           * @version   1.0.5.1
      7           * @date      Jun-16-2016
      8           * @brief     Analog-to-Digital Converter (ADC) driver source code.
      9           ******************************************************************************/
     10          #include "common.h"
     11          #include "adc.h"
     12          
     13          #if !defined(MCU_MKM34ZA5)
     14            #error "The adc.c module is specific to the MKMxxZxxACxx5 microcontrollers."
     15          #endif
     16          
     17          /******************************************************************************
     18           * data type definitions                                                      *
     19           ******************************************************************************/

   \                                 In section .bss, align 4
     20          static ADC_CALLBACK pCallbackADC;
   \                     pCallbackADC:
   \   00000000                      DS8 4
     21          
     22          /******************************************************************************
     23           * public function definitions                                                *
     24           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     25          void ADC_Init  (tADC adc, uint8 avg, tADC_CH CHA, tADC_CH CHB, tADC_CH CHC,
     26                          tADC_CH CHD, uint8 ip, ADC_CALLBACK pCallback)
     27          {
   \                     ADC_Init: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB570             PUSH     {R4-R6,LR}
   \   00000004   0x980C             LDR      R0,[SP, #+48]
   \   00000006   0x990D             LDR      R1,[SP, #+52]
   \   00000008   0x9A0E             LDR      R2,[SP, #+56]
   \   0000000A   0x9B0F             LDR      R3,[SP, #+60]
   \   0000000C   0x9C11             LDR      R4,[SP, #+68]
     28            if (pCallback) { pCallbackADC = pCallback; NVIC_SetIsr(INT_ADC,ip); }
   \   0000000E   0x0025             MOVS     R5,R4
   \   00000010   0x2D00             CMP      R5,#+0
   \   00000012   0xD016             BEQ      ??ADC_Init_0
   \   00000014   0x....             LDR      R5,??DataTable2
   \   00000016   0x602C             STR      R4,[R5, #+0]
   \   00000018   0x....             LDR      R4,??DataTable2_1  ;; 0xe000e280
   \   0000001A   0x6824             LDR      R4,[R4, #+0]
   \   0000001C   0x2580             MOVS     R5,#+128
   \   0000001E   0x026D             LSLS     R5,R5,#+9        ;; #+65536
   \   00000020   0x4325             ORRS     R5,R5,R4
   \   00000022   0x....             LDR      R4,??DataTable2_1  ;; 0xe000e280
   \   00000024   0x6025             STR      R5,[R4, #+0]
   \   00000026   0x....             LDR      R4,??DataTable3  ;; 0xe000e100
   \   00000028   0x6824             LDR      R4,[R4, #+0]
   \   0000002A   0x2580             MOVS     R5,#+128
   \   0000002C   0x026D             LSLS     R5,R5,#+9        ;; #+65536
   \   0000002E   0x4325             ORRS     R5,R5,R4
   \   00000030   0x....             LDR      R4,??DataTable3  ;; 0xe000e100
   \   00000032   0x6025             STR      R5,[R4, #+0]
   \   00000034   0x....             LDR      R4,??DataTable3_1  ;; 0xe000e410
   \   00000036   0x6824             LDR      R4,[R4, #+0]
   \   00000038   0x9D10             LDR      R5,[SP, #+64]
   \   0000003A   0x01AD             LSLS     R5,R5,#+6
   \   0000003C   0x4325             ORRS     R5,R5,R4
   \   0000003E   0x....             LDR      R4,??DataTable3_1  ;; 0xe000e410
   \   00000040   0x6025             STR      R5,[R4, #+0]
     29            ADC_CFG2 = adc.CFG2;
   \                     ??ADC_Init_0: (+1)
   \   00000042   0x9C05             LDR      R4,[SP, #+20]
   \   00000044   0x....             LDR      R5,??DataTable3_2  ;; 0x4002b014
   \   00000046   0x602C             STR      R4,[R5, #+0]
     30            ADC_CFG1 = adc.CFG1;
   \   00000048   0x9C04             LDR      R4,[SP, #+16]
   \   0000004A   0x....             LDR      R5,??DataTable3_3  ;; 0x4002b010
   \   0000004C   0x602C             STR      R4,[R5, #+0]
     31            ADC_CV1  = adc.CV1;
   \   0000004E   0x9C06             LDR      R4,[SP, #+24]
   \   00000050   0x....             LDR      R5,??DataTable3_4  ;; 0x4002b028
   \   00000052   0x602C             STR      R4,[R5, #+0]
     32            ADC_CV2  = adc.CV2;
   \   00000054   0x9C07             LDR      R4,[SP, #+28]
   \   00000056   0x....             LDR      R5,??DataTable3_5  ;; 0x4002b02c
   \   00000058   0x602C             STR      R4,[R5, #+0]
     33            ADC_SC2  = adc.SC2;
   \   0000005A   0x9C08             LDR      R4,[SP, #+32]
   \   0000005C   0x....             LDR      R5,??DataTable3_6  ;; 0x4002b030
   \   0000005E   0x602C             STR      R4,[R5, #+0]
   \   00000060   0x9C0B             LDR      R4,[SP, #+44]
     34            if (avg != HWAVG_OFF) { adc.SC3 |= (ADC_SC3_AVGE_MASK | ADC_SC3_AVGS(avg)); }
   \   00000062   0xB2E4             UXTB     R4,R4
   \   00000064   0x2CFF             CMP      R4,#+255
   \   00000066   0xD007             BEQ      ??ADC_Init_1
   \   00000068   0x9D09             LDR      R5,[SP, #+36]
   \   0000006A   0xB2E4             UXTB     R4,R4
   \   0000006C   0x07A4             LSLS     R4,R4,#+30       ;; ZeroExtS R4,R4,#+30,#+30
   \   0000006E   0x0FA4             LSRS     R4,R4,#+30
   \   00000070   0x2604             MOVS     R6,#+4
   \   00000072   0x4326             ORRS     R6,R6,R4
   \   00000074   0x432E             ORRS     R6,R6,R5
   \   00000076   0x9609             STR      R6,[SP, #+36]
     35            ADC_SC3  = adc.SC3;
   \                     ??ADC_Init_1: (+1)
   \   00000078   0x9C09             LDR      R4,[SP, #+36]
   \   0000007A   0x....             LDR      R5,??DataTable3_7  ;; 0x4002b034
   \   0000007C   0x602C             STR      R4,[R5, #+0]
     36            ADC_SC1B = CHB.SC1;
   \   0000007E   0x....             LDR      R4,??DataTable3_8  ;; 0x4002b004
   \   00000080   0x6021             STR      R1,[R4, #+0]
     37            ADC_SC1C = CHC.SC1;
   \   00000082   0x....             LDR      R1,??DataTable3_9  ;; 0x4002b008
   \   00000084   0x600A             STR      R2,[R1, #+0]
     38            ADC_SC1D = CHD.SC1;
   \   00000086   0x....             LDR      R1,??DataTable3_10  ;; 0x4002b00c
   \   00000088   0x600B             STR      R3,[R1, #+0]
     39            ADC_SC1A = CHA.SC1;
   \   0000008A   0x....             LDR      R1,??DataTable3_11  ;; 0x4002b000
   \   0000008C   0x6008             STR      R0,[R1, #+0]
     40          }
   \   0000008E   0x9803             LDR      R0,[SP, #+12]
   \   00000090   0xBC70             POP      {R4-R6}
   \   00000092   0xB005             ADD      SP,SP,#+20
   \   00000094   0x4700             BX       R0               ;; return
     41          
     42          #define TWO_POWER_N_SAMPLES  6  /* select carefully - COP Timer not updated   */

   \                                 In section .text, align 2, keep-with-next
     43          int ADC_ExecCalib (tADC adc, tADC_CALIB *pCALIB)
     44          {
   \                     ADC_ExecCalib: (+1)
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xB510             PUSH     {R4,LR}
   \   00000004   0xB088             SUB      SP,SP,#+32
     45            long tmp=0;
   \   00000006   0x2400             MOVS     R4,#+0
     46            unsigned long tmp32[7]={0,0,0,0,0,0,0};
   \   00000008   0x4668             MOV      R0,SP
   \   0000000A   0x211C             MOVS     R1,#+28
   \   0000000C   0x.... 0x....      BL       __aeabi_memclr4
     47            register uint16 i=0, numLoops = ((uint16)1<<TWO_POWER_N_SAMPLES);
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x2140             MOVS     R1,#+64
     48          
     49            ADC_CFG1 = adc.CFG1;
   \   00000014   0x9A0A             LDR      R2,[SP, #+40]
   \   00000016   0x....             LDR      R3,??DataTable3_3  ;; 0x4002b010
   \   00000018   0x601A             STR      R2,[R3, #+0]
     50            ADC_CFG2 = adc.CFG2;
   \   0000001A   0x9A0B             LDR      R2,[SP, #+44]
   \   0000001C   0x....             LDR      R3,??DataTable3_2  ;; 0x4002b014
   \   0000001E   0x601A             STR      R2,[R3, #+0]
     51            ADC_SC2  = (adc.SC2 & (~ADC_SC2_ADTRG_MASK));
   \   00000020   0x9A0E             LDR      R2,[SP, #+56]
   \   00000022   0x2340             MOVS     R3,#+64
   \   00000024   0x439A             BICS     R2,R2,R3
   \   00000026   0x....             LDR      R3,??DataTable3_6  ;; 0x4002b030
   \   00000028   0x601A             STR      R2,[R3, #+0]
   \   0000002A   0xE026             B        ??ADC_ExecCalib_0
     52          
     53            /* calibration loop                                                         */
     54            while ((i++) < numLoops)
     55            {
     56              /* The input channel, conversion mode continuous function, compare        */
     57              /* function, resolution mode, and differential/single-ended mode are all  */
     58              /* ignored during the calibration function.                               */
     59              ADC_SC1A = 0x1f;
     60              ADC_SC3  = (adc.SC3 & (~ADC_SC3_CAL_MASK) & (ADC_SC3_AVGE_MASK | ADC_SC3_AVGS(3)));
     61              ADC_SC3 |= ADC_SC3_CAL_MASK;
     62              while (!ADC_Ready (CHA));
     63              if (ADC_SC3 & ADC_SC3_CALF_MASK) { ADC_SC3 |= ADC_SC3_CALF_MASK; return 1; }
     64          
     65              tmp+= (short int)ADC_OFS;
   \                     ??ADC_ExecCalib_1: (+1)
   \   0000002C   0x....             LDR      R2,??DataTable3_12  ;; 0x4002b038
   \   0000002E   0x6812             LDR      R2,[R2, #+0]
   \   00000030   0xB212             SXTH     R2,R2
   \   00000032   0x18A4             ADDS     R4,R4,R2
     66          
     67              tmp32[0]+=(unsigned long)ADC_CLP0;
   \   00000034   0x9A00             LDR      R2,[SP, #+0]
   \   00000036   0x....             LDR      R3,??DataTable3_13  ;; 0x4002b05c
   \   00000038   0x681B             LDR      R3,[R3, #+0]
   \   0000003A   0x18D2             ADDS     R2,R2,R3
   \   0000003C   0x9200             STR      R2,[SP, #+0]
     68              tmp32[1]+=(unsigned long)ADC_CLP1;
   \   0000003E   0x9A01             LDR      R2,[SP, #+4]
   \   00000040   0x....             LDR      R3,??DataTable3_14  ;; 0x4002b058
   \   00000042   0x681B             LDR      R3,[R3, #+0]
   \   00000044   0x18D2             ADDS     R2,R2,R3
   \   00000046   0x9201             STR      R2,[SP, #+4]
     69              tmp32[2]+=(unsigned long)ADC_CLP2;
   \   00000048   0x9A02             LDR      R2,[SP, #+8]
   \   0000004A   0x....             LDR      R3,??DataTable3_15  ;; 0x4002b054
   \   0000004C   0x681B             LDR      R3,[R3, #+0]
   \   0000004E   0x18D2             ADDS     R2,R2,R3
   \   00000050   0x9202             STR      R2,[SP, #+8]
     70              tmp32[3]+=(unsigned long)ADC_CLP3;
   \   00000052   0x9A03             LDR      R2,[SP, #+12]
   \   00000054   0x....             LDR      R3,??DataTable3_16  ;; 0x4002b050
   \   00000056   0x681B             LDR      R3,[R3, #+0]
   \   00000058   0x18D2             ADDS     R2,R2,R3
   \   0000005A   0x9203             STR      R2,[SP, #+12]
     71              tmp32[4]+=(unsigned long)ADC_CLP4;
   \   0000005C   0x9A04             LDR      R2,[SP, #+16]
   \   0000005E   0x....             LDR      R3,??DataTable3_17  ;; 0x4002b04c
   \   00000060   0x681B             LDR      R3,[R3, #+0]
   \   00000062   0x18D2             ADDS     R2,R2,R3
   \   00000064   0x9204             STR      R2,[SP, #+16]
     72              tmp32[5]+=(unsigned long)ADC_CLPS;
   \   00000066   0x9A05             LDR      R2,[SP, #+20]
   \   00000068   0x....             LDR      R3,??DataTable3_18  ;; 0x4002b048
   \   0000006A   0x681B             LDR      R3,[R3, #+0]
   \   0000006C   0x18D2             ADDS     R2,R2,R3
   \   0000006E   0x9205             STR      R2,[SP, #+20]
     73              tmp32[6]+=(unsigned long)ADC_CLPD;
   \   00000070   0x9A06             LDR      R2,[SP, #+24]
   \   00000072   0x....             LDR      R3,??DataTable3_19  ;; 0x4002b044
   \   00000074   0x681B             LDR      R3,[R3, #+0]
   \   00000076   0x18D2             ADDS     R2,R2,R3
   \   00000078   0x9206             STR      R2,[SP, #+24]
   \                     ??ADC_ExecCalib_0: (+1)
   \   0000007A   0x0002             MOVS     R2,R0
   \   0000007C   0x0010             MOVS     R0,R2
   \   0000007E   0x1C40             ADDS     R0,R0,#+1
   \   00000080   0xB292             UXTH     R2,R2
   \   00000082   0xB289             UXTH     R1,R1
   \   00000084   0x428A             CMP      R2,R1
   \   00000086   0xD21E             BCS      ??ADC_ExecCalib_2
   \   00000088   0x221F             MOVS     R2,#+31
   \   0000008A   0x....             LDR      R3,??DataTable3_11  ;; 0x4002b000
   \   0000008C   0x601A             STR      R2,[R3, #+0]
   \   0000008E   0xAA0A             ADD      R2,SP,#+40
   \   00000090   0x7D12             LDRB     R2,[R2, #+20]
   \   00000092   0x0752             LSLS     R2,R2,#+29       ;; ZeroExtS R2,R2,#+29,#+29
   \   00000094   0x0F52             LSRS     R2,R2,#+29
   \   00000096   0x....             LDR      R3,??DataTable3_7  ;; 0x4002b034
   \   00000098   0x601A             STR      R2,[R3, #+0]
   \   0000009A   0x....             LDR      R2,??DataTable3_7  ;; 0x4002b034
   \   0000009C   0x6812             LDR      R2,[R2, #+0]
   \   0000009E   0x2380             MOVS     R3,#+128
   \   000000A0   0x4313             ORRS     R3,R3,R2
   \   000000A2   0x....             LDR      R2,??DataTable3_7  ;; 0x4002b034
   \   000000A4   0x6013             STR      R3,[R2, #+0]
   \                     ??ADC_ExecCalib_3: (+1)
   \   000000A6   0x....             LDR      R2,??DataTable3_11  ;; 0x4002b000
   \   000000A8   0x6812             LDR      R2,[R2, #+0]
   \   000000AA   0x0612             LSLS     R2,R2,#+24
   \   000000AC   0xD5FB             BPL      ??ADC_ExecCalib_3
   \   000000AE   0x....             LDR      R2,??DataTable3_7  ;; 0x4002b034
   \   000000B0   0x6812             LDR      R2,[R2, #+0]
   \   000000B2   0x0652             LSLS     R2,R2,#+25
   \   000000B4   0xD5BA             BPL      ??ADC_ExecCalib_1
   \   000000B6   0x....             LDR      R0,??DataTable3_7  ;; 0x4002b034
   \   000000B8   0x6800             LDR      R0,[R0, #+0]
   \   000000BA   0x2140             MOVS     R1,#+64
   \   000000BC   0x4301             ORRS     R1,R1,R0
   \   000000BE   0x....             LDR      R0,??DataTable3_7  ;; 0x4002b034
   \   000000C0   0x6001             STR      R1,[R0, #+0]
   \   000000C2   0x2001             MOVS     R0,#+1
   \   000000C4   0xE02C             B        ??ADC_ExecCalib_4
     74            }
   \                     ??ADC_ExecCalib_2: (+1)
   \   000000C6   0x9811             LDR      R0,[SP, #+68]
     75            pCALIB->OFS  = tmp >> TWO_POWER_N_SAMPLES;
   \   000000C8   0x0021             MOVS     R1,R4
   \   000000CA   0x1189             ASRS     R1,R1,#+6
   \   000000CC   0x6001             STR      R1,[R0, #+0]
     76          
     77            pCALIB->CLP[0] = tmp32[0] >> TWO_POWER_N_SAMPLES;
   \   000000CE   0x9900             LDR      R1,[SP, #+0]
   \   000000D0   0x0989             LSRS     R1,R1,#+6
   \   000000D2   0x6141             STR      R1,[R0, #+20]
     78            pCALIB->CLP[1] = tmp32[1] >> TWO_POWER_N_SAMPLES;
   \   000000D4   0x9901             LDR      R1,[SP, #+4]
   \   000000D6   0x0989             LSRS     R1,R1,#+6
   \   000000D8   0x6181             STR      R1,[R0, #+24]
     79            pCALIB->CLP[2] = tmp32[2] >> TWO_POWER_N_SAMPLES;
   \   000000DA   0x9902             LDR      R1,[SP, #+8]
   \   000000DC   0x0989             LSRS     R1,R1,#+6
   \   000000DE   0x61C1             STR      R1,[R0, #+28]
     80            pCALIB->CLP[3] = tmp32[3] >> TWO_POWER_N_SAMPLES;
   \   000000E0   0x9903             LDR      R1,[SP, #+12]
   \   000000E2   0x0989             LSRS     R1,R1,#+6
   \   000000E4   0x6201             STR      R1,[R0, #+32]
     81            pCALIB->CLP[4] = tmp32[4] >> TWO_POWER_N_SAMPLES;
   \   000000E6   0x9904             LDR      R1,[SP, #+16]
   \   000000E8   0x0989             LSRS     R1,R1,#+6
   \   000000EA   0x6241             STR      R1,[R0, #+36]
     82            pCALIB->CLPS   = tmp32[5] >> TWO_POWER_N_SAMPLES;
   \   000000EC   0x9905             LDR      R1,[SP, #+20]
   \   000000EE   0x0989             LSRS     R1,R1,#+6
   \   000000F0   0x6101             STR      R1,[R0, #+16]
     83            pCALIB->CLPD   = tmp32[6] >> TWO_POWER_N_SAMPLES;
   \   000000F2   0x9906             LDR      R1,[SP, #+24]
   \   000000F4   0x0989             LSRS     R1,R1,#+6
   \   000000F6   0x60C1             STR      R1,[R0, #+12]
     84          
     85            tmp = tmp32[0]+tmp32[1]+tmp32[2]+tmp32[3]+tmp32[4]+tmp32[5];
   \   000000F8   0x9900             LDR      R1,[SP, #+0]
   \   000000FA   0x9A01             LDR      R2,[SP, #+4]
   \   000000FC   0x1889             ADDS     R1,R1,R2
   \   000000FE   0x9A02             LDR      R2,[SP, #+8]
   \   00000100   0x1889             ADDS     R1,R1,R2
   \   00000102   0x9A03             LDR      R2,[SP, #+12]
   \   00000104   0x1889             ADDS     R1,R1,R2
   \   00000106   0x9A04             LDR      R2,[SP, #+16]
   \   00000108   0x1889             ADDS     R1,R1,R2
   \   0000010A   0x9A05             LDR      R2,[SP, #+20]
   \   0000010C   0x188C             ADDS     R4,R1,R2
     86            pCALIB->PG  = ((tmp>>(1+TWO_POWER_N_SAMPLES))|0x8000);
   \   0000010E   0x0021             MOVS     R1,R4
   \   00000110   0x11C9             ASRS     R1,R1,#+7
   \   00000112   0x2280             MOVS     R2,#+128
   \   00000114   0x0212             LSLS     R2,R2,#+8        ;; #+32768
   \   00000116   0x430A             ORRS     R2,R2,R1
   \   00000118   0x6042             STR      R2,[R0, #+4]
     87          
     88            ADC_SaveCalib (pCALIB);         /* update calibration registers             */
   \   0000011A   0x.... 0x....      BL       ADC_SaveCalib
     89          
     90            return 0;
   \   0000011E   0x2000             MOVS     R0,#+0
   \                     ??ADC_ExecCalib_4: (+1)
   \   00000120   0xB008             ADD      SP,SP,#+32
   \   00000122   0x9901             LDR      R1,[SP, #+4]
   \   00000124   0xBC10             POP      {R4}
   \   00000126   0xB005             ADD      SP,SP,#+20
   \   00000128   0x4708             BX       R1               ;; return
     91          }
     92          

   \                                 In section .text, align 2, keep-with-next
     93          void ADC_SaveCalib (tADC_CALIB *pCALIB)
     94          {
     95            ADC_CLP0 = pCALIB->CLP[0];
   \                     ADC_SaveCalib: (+1)
   \   00000000   0x6941             LDR      R1,[R0, #+20]
   \   00000002   0x....             LDR      R2,??DataTable3_13  ;; 0x4002b05c
   \   00000004   0x6011             STR      R1,[R2, #+0]
     96            ADC_CLP1 = pCALIB->CLP[1];
   \   00000006   0x6981             LDR      R1,[R0, #+24]
   \   00000008   0x....             LDR      R2,??DataTable3_14  ;; 0x4002b058
   \   0000000A   0x6011             STR      R1,[R2, #+0]
     97            ADC_CLP2 = pCALIB->CLP[2];
   \   0000000C   0x69C1             LDR      R1,[R0, #+28]
   \   0000000E   0x....             LDR      R2,??DataTable3_15  ;; 0x4002b054
   \   00000010   0x6011             STR      R1,[R2, #+0]
     98            ADC_CLP3 = pCALIB->CLP[3];
   \   00000012   0x6A01             LDR      R1,[R0, #+32]
   \   00000014   0x....             LDR      R2,??DataTable3_16  ;; 0x4002b050
   \   00000016   0x6011             STR      R1,[R2, #+0]
     99            ADC_CLP4 = pCALIB->CLP[4];
   \   00000018   0x6A41             LDR      R1,[R0, #+36]
   \   0000001A   0x....             LDR      R2,??DataTable3_17  ;; 0x4002b04c
   \   0000001C   0x6011             STR      R1,[R2, #+0]
    100            ADC_CLPS = pCALIB->CLPS;
   \   0000001E   0x6901             LDR      R1,[R0, #+16]
   \   00000020   0x....             LDR      R2,??DataTable3_18  ;; 0x4002b048
   \   00000022   0x6011             STR      R1,[R2, #+0]
    101            ADC_CLPD = pCALIB->CLPD;
   \   00000024   0x68C1             LDR      R1,[R0, #+12]
   \   00000026   0x....             LDR      R2,??DataTable3_19  ;; 0x4002b044
   \   00000028   0x6011             STR      R1,[R2, #+0]
    102            ADC_PG   = pCALIB->PG;
   \   0000002A   0x6841             LDR      R1,[R0, #+4]
   \   0000002C   0x....             LDR      R2,??DataTable3_20  ;; 0x4002b03c
   \   0000002E   0x6011             STR      R1,[R2, #+0]
    103            ADC_OFS  = pCALIB->OFS;
   \   00000030   0x6800             LDR      R0,[R0, #+0]
   \   00000032   0x....             LDR      R1,??DataTable3_12  ;; 0x4002b038
   \   00000034   0x6008             STR      R0,[R1, #+0]
    104          }
   \   00000036   0x4770             BX       LR               ;; return
    105          
    106          /******************************************************************************
    107           * interrupt function definitions                                             *
    108           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    109          weak void adc_isr (void)
    110          {
   \                     adc_isr: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    111            if ((ADC_SC1A & ADC_SC1_COCO_MASK) && (ADC_SC1A & ADC_SC1_AIEN_MASK))
   \   00000002   0x....             LDR      R0,??DataTable3_11  ;; 0x4002b000
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x0600             LSLS     R0,R0,#+24
   \   00000008   0xD50A             BPL      ??adc_isr_0
   \   0000000A   0x....             LDR      R0,??DataTable3_11  ;; 0x4002b000
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x0640             LSLS     R0,R0,#+25
   \   00000010   0xD506             BPL      ??adc_isr_0
    112            {
    113              pCallbackADC (CHA_CALLBACK, ADC_RA);
   \   00000012   0x....             LDR      R0,??DataTable3_21  ;; 0x4002b018
   \   00000014   0x6801             LDR      R1,[R0, #+0]
   \   00000016   0xB289             UXTH     R1,R1
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x....             LDR      R2,??DataTable3_22
   \   0000001C   0x6812             LDR      R2,[R2, #+0]
   \   0000001E   0x4790             BLX      R2
    114            }
    115            if ((ADC_SC1B & ADC_SC1_COCO_MASK) && (ADC_SC1B & ADC_SC1_AIEN_MASK))
   \                     ??adc_isr_0: (+1)
   \   00000020   0x....             LDR      R0,??DataTable3_8  ;; 0x4002b004
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0x0600             LSLS     R0,R0,#+24
   \   00000026   0xD50A             BPL      ??adc_isr_1
   \   00000028   0x....             LDR      R0,??DataTable3_8  ;; 0x4002b004
   \   0000002A   0x6800             LDR      R0,[R0, #+0]
   \   0000002C   0x0640             LSLS     R0,R0,#+25
   \   0000002E   0xD506             BPL      ??adc_isr_1
    116            {
    117              pCallbackADC (CHB_CALLBACK, ADC_RB);
   \   00000030   0x....             LDR      R0,??DataTable3_23  ;; 0x4002b01c
   \   00000032   0x6801             LDR      R1,[R0, #+0]
   \   00000034   0xB289             UXTH     R1,R1
   \   00000036   0x2002             MOVS     R0,#+2
   \   00000038   0x....             LDR      R2,??DataTable3_22
   \   0000003A   0x6812             LDR      R2,[R2, #+0]
   \   0000003C   0x4790             BLX      R2
    118            }
    119            if ((ADC_SC1C & ADC_SC1_COCO_MASK) && (ADC_SC1C & ADC_SC1_AIEN_MASK))
   \                     ??adc_isr_1: (+1)
   \   0000003E   0x....             LDR      R0,??DataTable3_9  ;; 0x4002b008
   \   00000040   0x6800             LDR      R0,[R0, #+0]
   \   00000042   0x0600             LSLS     R0,R0,#+24
   \   00000044   0xD50A             BPL      ??adc_isr_2
   \   00000046   0x....             LDR      R0,??DataTable3_9  ;; 0x4002b008
   \   00000048   0x6800             LDR      R0,[R0, #+0]
   \   0000004A   0x0640             LSLS     R0,R0,#+25
   \   0000004C   0xD506             BPL      ??adc_isr_2
    120            {
    121              pCallbackADC (CHC_CALLBACK, ADC_RC);
   \   0000004E   0x....             LDR      R0,??DataTable3_24  ;; 0x4002b020
   \   00000050   0x6801             LDR      R1,[R0, #+0]
   \   00000052   0xB289             UXTH     R1,R1
   \   00000054   0x2004             MOVS     R0,#+4
   \   00000056   0x....             LDR      R2,??DataTable3_22
   \   00000058   0x6812             LDR      R2,[R2, #+0]
   \   0000005A   0x4790             BLX      R2
    122            }
    123            if ((ADC_SC1D & ADC_SC1_COCO_MASK) && (ADC_SC1D & ADC_SC1_AIEN_MASK))
   \                     ??adc_isr_2: (+1)
   \   0000005C   0x....             LDR      R0,??DataTable3_10  ;; 0x4002b00c
   \   0000005E   0x6800             LDR      R0,[R0, #+0]
   \   00000060   0x0600             LSLS     R0,R0,#+24
   \   00000062   0xD50A             BPL      ??adc_isr_3
   \   00000064   0x....             LDR      R0,??DataTable3_10  ;; 0x4002b00c
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0x0640             LSLS     R0,R0,#+25
   \   0000006A   0xD506             BPL      ??adc_isr_3
    124            {
    125              pCallbackADC (CHD_CALLBACK, ADC_RD);
   \   0000006C   0x....             LDR      R0,??DataTable3_25  ;; 0x4002b024
   \   0000006E   0x6801             LDR      R1,[R0, #+0]
   \   00000070   0xB289             UXTH     R1,R1
   \   00000072   0x2008             MOVS     R0,#+8
   \   00000074   0x....             LDR      R2,??DataTable3_22
   \   00000076   0x6812             LDR      R2,[R2, #+0]
   \   00000078   0x4790             BLX      R2
    126            }
    127          }
   \                     ??adc_isr_3: (+1)
   \   0000007A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     pCallbackADC

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0xE000E280         DC32     0xe000e280

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0xE000E410         DC32     0xe000e410

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x4002B014         DC32     0x4002b014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x4002B010         DC32     0x4002b010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x4002B028         DC32     0x4002b028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x4002B02C         DC32     0x4002b02c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x4002B030         DC32     0x4002b030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x4002B034         DC32     0x4002b034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x4002B004         DC32     0x4002b004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \   00000000   0x4002B008         DC32     0x4002b008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \   00000000   0x4002B00C         DC32     0x4002b00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_11:
   \   00000000   0x4002B000         DC32     0x4002b000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_12:
   \   00000000   0x4002B038         DC32     0x4002b038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_13:
   \   00000000   0x4002B05C         DC32     0x4002b05c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_14:
   \   00000000   0x4002B058         DC32     0x4002b058

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_15:
   \   00000000   0x4002B054         DC32     0x4002b054

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_16:
   \   00000000   0x4002B050         DC32     0x4002b050

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_17:
   \   00000000   0x4002B04C         DC32     0x4002b04c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_18:
   \   00000000   0x4002B048         DC32     0x4002b048

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_19:
   \   00000000   0x4002B044         DC32     0x4002b044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_20:
   \   00000000   0x4002B03C         DC32     0x4002b03c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_21:
   \   00000000   0x4002B018         DC32     0x4002b018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_22:
   \   00000000   0x........         DC32     pCallbackADC

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_23:
   \   00000000   0x4002B01C         DC32     0x4002b01c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_24:
   \   00000000   0x4002B020         DC32     0x4002b020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_25:
   \   00000000   0x4002B024         DC32     0x4002b024

   \                                 In section .rodata, align 4
   \   00000000   0x00000000         DC32 0, 0, 0, 0, 0, 0, 0
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
    128          /******************************************************************************
    129           * End of module                                                              *
    130           ******************************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      56   ADC_ExecCalib
        56   -> ADC_SaveCalib
        56   -> __aeabi_memclr4
      32   ADC_Init
       0   ADC_SaveCalib
       8   adc_isr
         8   -- Indirect call


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_11
       4  ??DataTable3_12
       4  ??DataTable3_13
       4  ??DataTable3_14
       4  ??DataTable3_15
       4  ??DataTable3_16
       4  ??DataTable3_17
       4  ??DataTable3_18
       4  ??DataTable3_19
       4  ??DataTable3_2
       4  ??DataTable3_20
       4  ??DataTable3_21
       4  ??DataTable3_22
       4  ??DataTable3_23
       4  ??DataTable3_24
       4  ??DataTable3_25
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
      28  ?_0
     298  ADC_ExecCalib
     150  ADC_Init
      56  ADC_SaveCalib
     124  adc_isr
       4  pCallbackADC

 
   4 bytes in section .bss
  28 bytes in section .rodata
 740 bytes in section .text
 
 740 bytes of CODE  memory
  28 bytes of CONST memory
   4 bytes of DATA  memory

Errors: none
Warnings: none
