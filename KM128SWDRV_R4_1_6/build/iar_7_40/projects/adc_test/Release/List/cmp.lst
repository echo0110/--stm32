###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        16/Mar/2017  11:18:05
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\cmp\cmp.c
#    Command line =  
#        C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\cmp\cmp.c -D NDEBUG -lCN
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\adc_test\Release\List\
#        -o
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\adc_test\Release\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ --no_mem_idioms -e --fpu=None --dlib_config
#        D:\IAR7.4anzhuang\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\adc_test\..\..\..\..\src\common\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\adc_test\..\..\..\..\src\drivers\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\adc_test\..\..\..\..\src\freemaster\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\adc_test\..\..\..\..\src\projects\adc_test\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\adc_test\..\..\..\..\src\toolchain\iar\
#        -Ol --require_prototypes
#    List file    =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\adc_test\Release\List\cmp.lst
#    Object file  =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\adc_test\Release\Obj\cmp.o
#
###############################################################################

C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\cmp\cmp.c
      1          /******************************************************************************
      2           * (c) Copyright 2010-2013, Freescale Semiconductor Inc.
      3           * ALL RIGHTS RESERVED.
      4           ***************************************************************************//*!
      5           * @file      cmp.c
      6           * @version   1.0.4.0
      7           * @date      Feb-13-2013
      8           * @brief     Analog comparator (CMP) driver source code.
      9           ******************************************************************************/
     10          #include "common.h"
     11          #include "cmp.h"
     12          
     13          #if !defined(MCU_MKM34ZA5)
     14            #error "The cmp.c module is specific to the MKMxxZxxACxx5 microcontrollers."
     15          #endif
     16          
     17          /******************************************************************************
     18           * data type definitions                                                      *
     19           ******************************************************************************/

   \                                 In section .bss, align 4
     20          static CMP_CALLBACK pCallbackCMPx;
   \                     pCallbackCMPx:
   \   00000000                      DS8 4
     21          
     22          /******************************************************************************
     23           * public function definitions                                                *
     24           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     25          void CMP_InstallCallback (uint8 ip, CMP_CALLBACK pCallback)
     26          {
   \                     CMP_InstallCallback: (+1)
   \   00000000   0xB500             PUSH     {LR}
     27            if (pCallback) { pCallbackCMPx = pCallback; NVIC_SetIsr(INT_CMP0_CMP1,ip); }
   \   00000002   0x000A             MOVS     R2,R1
   \   00000004   0x2A00             CMP      R2,#+0
   \   00000006   0xD016             BEQ      ??CMP_InstallCallback_0
   \   00000008   0x....             LDR      R2,??DataTable3
   \   0000000A   0x6011             STR      R1,[R2, #+0]
   \   0000000C   0x....             LDR      R1,??DataTable3_1  ;; 0xe000e280
   \   0000000E   0x6809             LDR      R1,[R1, #+0]
   \   00000010   0x2280             MOVS     R2,#+128
   \   00000012   0x01D2             LSLS     R2,R2,#+7        ;; #+16384
   \   00000014   0x430A             ORRS     R2,R2,R1
   \   00000016   0x....             LDR      R1,??DataTable3_1  ;; 0xe000e280
   \   00000018   0x600A             STR      R2,[R1, #+0]
   \   0000001A   0x....             LDR      R1,??DataTable3_2  ;; 0xe000e100
   \   0000001C   0x6809             LDR      R1,[R1, #+0]
   \   0000001E   0x2280             MOVS     R2,#+128
   \   00000020   0x01D2             LSLS     R2,R2,#+7        ;; #+16384
   \   00000022   0x430A             ORRS     R2,R2,R1
   \   00000024   0x....             LDR      R1,??DataTable3_2  ;; 0xe000e100
   \   00000026   0x600A             STR      R2,[R1, #+0]
   \   00000028   0x....             LDR      R1,??DataTable3_3  ;; 0xe000e40c
   \   0000002A   0x6809             LDR      R1,[R1, #+0]
   \   0000002C   0xB2C0             UXTB     R0,R0
   \   0000002E   0x0580             LSLS     R0,R0,#+22
   \   00000030   0x4308             ORRS     R0,R0,R1
   \   00000032   0x....             LDR      R1,??DataTable3_3  ;; 0xe000e40c
   \   00000034   0x6008             STR      R0,[R1, #+0]
     28          }
   \                     ??CMP_InstallCallback_0: (+1)
   \   00000036   0xBD00             POP      {PC}             ;; return
     29          

   \                                 In section .text, align 2, keep-with-next
     30          void CMP0_Init (tCMP cmp, uint8 psel, uint8 msel)
     31          {
   \                     CMP0_Init: (+1)
   \   00000000   0xB403             PUSH     {R0,R1}
     32            CMP0_CR0   = cmp.CR0;
   \   00000002   0x4668             MOV      R0,SP
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x....             LDR      R1,??DataTable3_4  ;; 0x40072000
   \   00000008   0x7008             STRB     R0,[R1, #+0]
     33            CMP0_FPR   = cmp.FPR;
   \   0000000A   0x4668             MOV      R0,SP
   \   0000000C   0x7880             LDRB     R0,[R0, #+2]
   \   0000000E   0x....             LDR      R1,??DataTable3_5  ;; 0x40072002
   \   00000010   0x7008             STRB     R0,[R1, #+0]
     34            CMP0_SCR   = cmp.SCR;
   \   00000012   0x4668             MOV      R0,SP
   \   00000014   0x78C0             LDRB     R0,[R0, #+3]
   \   00000016   0x....             LDR      R1,??DataTable3_6  ;; 0x40072003
   \   00000018   0x7008             STRB     R0,[R1, #+0]
     35            CMP0_DACCR = cmp.DACCR;
   \   0000001A   0x4668             MOV      R0,SP
   \   0000001C   0x7900             LDRB     R0,[R0, #+4]
   \   0000001E   0x....             LDR      R1,??DataTable3_7  ;; 0x40072004
   \   00000020   0x7008             STRB     R0,[R1, #+0]
     36            CMP0_MUXCR = (uint8)((psel<<3)|msel);
   \   00000022   0x00D0             LSLS     R0,R2,#+3
   \   00000024   0x4303             ORRS     R3,R3,R0
   \   00000026   0x....             LDR      R0,??DataTable3_8  ;; 0x40072005
   \   00000028   0x7003             STRB     R3,[R0, #+0]
     37            CMP0_CR1   = cmp.CR1;
   \   0000002A   0x4668             MOV      R0,SP
   \   0000002C   0x7840             LDRB     R0,[R0, #+1]
   \   0000002E   0x....             LDR      R1,??DataTable3_9  ;; 0x40072001
   \   00000030   0x7008             STRB     R0,[R1, #+0]
     38          }
   \   00000032   0xB002             ADD      SP,SP,#+8
   \   00000034   0x4770             BX       LR               ;; return
     39          

   \                                 In section .text, align 2, keep-with-next
     40          void CMP1_Init (tCMP cmp, uint8 psel, uint8 msel)
     41          {
   \                     CMP1_Init: (+1)
   \   00000000   0xB403             PUSH     {R0,R1}
     42            CMP1_CR0   = cmp.CR0;
   \   00000002   0x4668             MOV      R0,SP
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x....             LDR      R1,??DataTable3_10  ;; 0x40072008
   \   00000008   0x7008             STRB     R0,[R1, #+0]
     43            CMP1_FPR   = cmp.FPR;
   \   0000000A   0x4668             MOV      R0,SP
   \   0000000C   0x7880             LDRB     R0,[R0, #+2]
   \   0000000E   0x....             LDR      R1,??DataTable3_11  ;; 0x4007200a
   \   00000010   0x7008             STRB     R0,[R1, #+0]
     44            CMP1_SCR   = cmp.SCR;
   \   00000012   0x4668             MOV      R0,SP
   \   00000014   0x78C0             LDRB     R0,[R0, #+3]
   \   00000016   0x....             LDR      R1,??DataTable3_12  ;; 0x4007200b
   \   00000018   0x7008             STRB     R0,[R1, #+0]
     45            CMP1_DACCR = cmp.DACCR;
   \   0000001A   0x4668             MOV      R0,SP
   \   0000001C   0x7900             LDRB     R0,[R0, #+4]
   \   0000001E   0x....             LDR      R1,??DataTable3_13  ;; 0x4007200c
   \   00000020   0x7008             STRB     R0,[R1, #+0]
     46            CMP1_MUXCR = (uint8)((psel<<3)|msel);
   \   00000022   0x00D0             LSLS     R0,R2,#+3
   \   00000024   0x4303             ORRS     R3,R3,R0
   \   00000026   0x....             LDR      R0,??DataTable3_14  ;; 0x4007200d
   \   00000028   0x7003             STRB     R3,[R0, #+0]
     47            CMP1_CR1   = cmp.CR1;
   \   0000002A   0x4668             MOV      R0,SP
   \   0000002C   0x7840             LDRB     R0,[R0, #+1]
   \   0000002E   0x....             LDR      R1,??DataTable3_15  ;; 0x40072009
   \   00000030   0x7008             STRB     R0,[R1, #+0]
     48          }
   \   00000032   0xB002             ADD      SP,SP,#+8
   \   00000034   0x4770             BX       LR               ;; return
     49          
     50          /******************************************************************************
     51           * interrupt function definitions                                             *
     52           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     53          weak void cmpx_isr (void)
     54          {
   \                     cmpx_isr: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     55            /* process CMP0 module callbacks                                            */
     56            if (SIM_SCGC4 & SIM_SCGC4_CMP0_MASK)
   \   00000002   0x....             LDR      R0,??DataTable3_16  ;; 0x4003f034
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x0340             LSLS     R0,R0,#+13
   \   00000008   0xD51F             BPL      ??cmpx_isr_0
     57            {
     58              /* negedge callback                                                       */
     59              if ((CMP0_SCR & CMP_SCR_IEF_MASK) && (CMP0_SCR & CMP_SCR_CFF_MASK))
   \   0000000A   0x....             LDR      R0,??DataTable3_6  ;; 0x40072003
   \   0000000C   0x7800             LDRB     R0,[R0, #+0]
   \   0000000E   0x0700             LSLS     R0,R0,#+28
   \   00000010   0xD50B             BPL      ??cmpx_isr_1
   \   00000012   0x....             LDR      R0,??DataTable3_6  ;; 0x40072003
   \   00000014   0x7800             LDRB     R0,[R0, #+0]
   \   00000016   0x0780             LSLS     R0,R0,#+30
   \   00000018   0xD507             BPL      ??cmpx_isr_1
     60              {
     61                ioclrb(CMP0_SCR,CMP_SCR_CFR_MASK);        /* clear CFF but not CFR flag */
   \   0000001A   0x20FB             MOVS     R0,#+251
   \   0000001C   0x....             LDR      R1,??DataTable3_17  ;; 0x44072003
   \   0000001E   0x7008             STRB     R0,[R1, #+0]
     62                pCallbackCMPx (CMP0_CALLBACK, CMP_NEGEDGE_CALLBACK);
   \   00000020   0x2101             MOVS     R1,#+1
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0x....             LDR      R2,??DataTable3
   \   00000026   0x6812             LDR      R2,[R2, #+0]
   \   00000028   0x4790             BLX      R2
     63              }
     64              /* process posedge callback                                               */
     65              if ((CMP0_SCR & CMP_SCR_IER_MASK) && (CMP0_SCR & CMP_SCR_CFR_MASK))
   \                     ??cmpx_isr_1: (+1)
   \   0000002A   0x....             LDR      R0,??DataTable3_6  ;; 0x40072003
   \   0000002C   0x7800             LDRB     R0,[R0, #+0]
   \   0000002E   0x06C0             LSLS     R0,R0,#+27
   \   00000030   0xD50B             BPL      ??cmpx_isr_0
   \   00000032   0x....             LDR      R0,??DataTable3_6  ;; 0x40072003
   \   00000034   0x7800             LDRB     R0,[R0, #+0]
   \   00000036   0x0740             LSLS     R0,R0,#+29
   \   00000038   0xD507             BPL      ??cmpx_isr_0
     66              {
     67                ioclrb(CMP0_SCR,CMP_SCR_CFF_MASK);        /* clear CFR but not CFF flag */
   \   0000003A   0x20FD             MOVS     R0,#+253
   \   0000003C   0x....             LDR      R1,??DataTable3_17  ;; 0x44072003
   \   0000003E   0x7008             STRB     R0,[R1, #+0]
     68                pCallbackCMPx (CMP0_CALLBACK, CMP_POSEDGE_CALLBACK);
   \   00000040   0x2102             MOVS     R1,#+2
   \   00000042   0x2001             MOVS     R0,#+1
   \   00000044   0x....             LDR      R2,??DataTable3
   \   00000046   0x6812             LDR      R2,[R2, #+0]
   \   00000048   0x4790             BLX      R2
     69              }
     70            }
     71          
     72            /* process CMP1 module callbacks                                            */
     73            if (SIM_SCGC4 & SIM_SCGC4_CMP1_MASK)
   \                     ??cmpx_isr_0: (+1)
   \   0000004A   0x....             LDR      R0,??DataTable3_16  ;; 0x4003f034
   \   0000004C   0x6800             LDR      R0,[R0, #+0]
   \   0000004E   0x0300             LSLS     R0,R0,#+12
   \   00000050   0xD51F             BPL      ??cmpx_isr_2
     74            {
     75              /* negedge callback                                                       */
     76              if ((CMP1_SCR & CMP_SCR_IEF_MASK) && (CMP1_SCR & CMP_SCR_CFF_MASK))
   \   00000052   0x....             LDR      R0,??DataTable3_12  ;; 0x4007200b
   \   00000054   0x7800             LDRB     R0,[R0, #+0]
   \   00000056   0x0700             LSLS     R0,R0,#+28
   \   00000058   0xD50B             BPL      ??cmpx_isr_3
   \   0000005A   0x....             LDR      R0,??DataTable3_12  ;; 0x4007200b
   \   0000005C   0x7800             LDRB     R0,[R0, #+0]
   \   0000005E   0x0780             LSLS     R0,R0,#+30
   \   00000060   0xD507             BPL      ??cmpx_isr_3
     77              {
     78                ioclrb(CMP1_SCR,CMP_SCR_CFR_MASK);        /* clear CFF but not CFR flag */
   \   00000062   0x20FB             MOVS     R0,#+251
   \   00000064   0x....             LDR      R1,??DataTable3_18  ;; 0x4407200b
   \   00000066   0x7008             STRB     R0,[R1, #+0]
     79                pCallbackCMPx (CMP1_CALLBACK, CMP_NEGEDGE_CALLBACK);
   \   00000068   0x2101             MOVS     R1,#+1
   \   0000006A   0x2002             MOVS     R0,#+2
   \   0000006C   0x....             LDR      R2,??DataTable3
   \   0000006E   0x6812             LDR      R2,[R2, #+0]
   \   00000070   0x4790             BLX      R2
     80              }
     81              /* posedge callback                                                       */
     82              if ((CMP1_SCR & CMP_SCR_IER_MASK) && (CMP1_SCR & CMP_SCR_CFR_MASK))
   \                     ??cmpx_isr_3: (+1)
   \   00000072   0x....             LDR      R0,??DataTable3_12  ;; 0x4007200b
   \   00000074   0x7800             LDRB     R0,[R0, #+0]
   \   00000076   0x06C0             LSLS     R0,R0,#+27
   \   00000078   0xD50B             BPL      ??cmpx_isr_2
   \   0000007A   0x....             LDR      R0,??DataTable3_12  ;; 0x4007200b
   \   0000007C   0x7800             LDRB     R0,[R0, #+0]
   \   0000007E   0x0740             LSLS     R0,R0,#+29
   \   00000080   0xD507             BPL      ??cmpx_isr_2
     83              {
     84                ioclrb(CMP1_SCR,CMP_SCR_CFF_MASK);        /* clear CFR but not CFF flag */
   \   00000082   0x20FD             MOVS     R0,#+253
   \   00000084   0x....             LDR      R1,??DataTable3_18  ;; 0x4407200b
   \   00000086   0x7008             STRB     R0,[R1, #+0]
     85                pCallbackCMPx (CMP1_CALLBACK, CMP_POSEDGE_CALLBACK);
   \   00000088   0x2102             MOVS     R1,#+2
   \   0000008A   0x2002             MOVS     R0,#+2
   \   0000008C   0x....             LDR      R2,??DataTable3
   \   0000008E   0x6812             LDR      R2,[R2, #+0]
   \   00000090   0x4790             BLX      R2
     86              }
     87            }
     88          
     89          }
   \                     ??cmpx_isr_2: (+1)
   \   00000092   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     pCallbackCMPx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0xE000E280         DC32     0xe000e280

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0xE000E40C         DC32     0xe000e40c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x40072000         DC32     0x40072000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x40072002         DC32     0x40072002

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x40072003         DC32     0x40072003

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x40072004         DC32     0x40072004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x40072005         DC32     0x40072005

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \   00000000   0x40072001         DC32     0x40072001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \   00000000   0x40072008         DC32     0x40072008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_11:
   \   00000000   0x4007200A         DC32     0x4007200a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_12:
   \   00000000   0x4007200B         DC32     0x4007200b

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_13:
   \   00000000   0x4007200C         DC32     0x4007200c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_14:
   \   00000000   0x4007200D         DC32     0x4007200d

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_15:
   \   00000000   0x40072009         DC32     0x40072009

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_16:
   \   00000000   0x4003F034         DC32     0x4003f034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_17:
   \   00000000   0x44072003         DC32     0x44072003

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_18:
   \   00000000   0x4407200B         DC32     0x4407200b
     90          /******************************************************************************
     91           * End of module                                                              *
     92           ******************************************************************************/
     93          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   CMP0_Init
       8   CMP1_Init
       4   CMP_InstallCallback
       8   cmpx_isr
         8   -- Indirect call


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_11
       4  ??DataTable3_12
       4  ??DataTable3_13
       4  ??DataTable3_14
       4  ??DataTable3_15
       4  ??DataTable3_16
       4  ??DataTable3_17
       4  ??DataTable3_18
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
      54  CMP0_Init
      54  CMP1_Init
      56  CMP_InstallCallback
     148  cmpx_isr
       4  pCallbackCMPx

 
   4 bytes in section .bss
 388 bytes in section .text
 
 388 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none
