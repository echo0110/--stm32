###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        16/Mar/2017  11:18:06
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\ftfa\ftfa.c
#    Command line =  
#        C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\ftfa\ftfa.c -D NDEBUG -lCN
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\adc_test\Release\List\
#        -o
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\adc_test\Release\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ --no_mem_idioms -e --fpu=None --dlib_config
#        D:\IAR7.4anzhuang\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\adc_test\..\..\..\..\src\common\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\adc_test\..\..\..\..\src\drivers\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\adc_test\..\..\..\..\src\freemaster\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\adc_test\..\..\..\..\src\projects\adc_test\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\adc_test\..\..\..\..\src\toolchain\iar\
#        -Ol --require_prototypes
#    List file    =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\adc_test\Release\List\ftfa.lst
#    Object file  =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\adc_test\Release\Obj\ftfa.o
#
###############################################################################

C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\ftfa\ftfa.c
      1          /******************************************************************************
      2           * (c) Copyright 2010-2015, Freescale Semiconductor Inc.
      3           * ALL RIGHTS RESERVED.
      4           ***************************************************************************//*!
      5           * @file      ftfa.c
      6           * @version   1.0.5.0
      7           * @date      August-18-2015
      8           * @brief     Flash Memory Module (FTFA) driver source code.
      9           ******************************************************************************/
     10          #include "common.h"
     11          #include "ftfa.h"
     12          
     13          /******************************************************************************
     14           * static function prototypes                                                 *
     15           ******************************************************************************/
     16          #if defined (__ICCARM__)
     17            static __ramfunc void _FTFA_ExecCmd (void);
     18          #elif defined(__GNUC__) || defined(__CC_ARM)
     19            static void _FTFA_ExecCmd (void) __attribute__((long_call, section(".fast")));
     20          #endif
     21          
     22          /******************************************************************************
     23           * static function definitions                                                *
     24           ******************************************************************************/
     25          #if defined (__ICCARM__)

   \                                 In section .textrw, align 4, keep-with-next
     26            static __ramfunc void _FTFA_ExecCmd (void)
     27          #elif defined(__GNUC__) || defined(__CC_ARM)
     28            static void _FTFA_ExecCmd (void)
     29          #endif
     30          {
   \                     _FTFA_ExecCmd: (+1)
   \   00000000   0xB500             PUSH     {LR}
     31            FTFA_FSTAT = FTFA_FSTAT_CCIF_MASK;
   \   00000002   0x2080             MOVS     R0,#+128
   \   00000004   0x4903             LDR      R1,??_FTFA_ExecCmd_0  ;; 0x40020000
   \   00000006   0x7008             STRB     R0,[R1, #+0]
     32            while (!(FTFA_FSTAT & FTFA_FSTAT_CCIF_MASK));
   \                     ??_FTFA_ExecCmd_1: (+1)
   \   00000008   0x4802             LDR      R0,??_FTFA_ExecCmd_0  ;; 0x40020000
   \   0000000A   0x7800             LDRB     R0,[R0, #+0]
   \   0000000C   0x0600             LSLS     R0,R0,#+24
   \   0000000E   0xD5FB             BPL      ??_FTFA_ExecCmd_1
     33          }
   \   00000010   0xBD00             POP      {PC}             ;; return
   \   00000012   0xBF00             Nop      
   \                     ??_FTFA_ExecCmd_0:
   \   00000014   0x40020000         DC32     0x40020000
     34          
     35          /******************************************************************************
     36           * public function definitions                                                *
     37           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     38          int _FTFA_WriteArray (const void *pDst, void *pSrc, int size)
     39          {
   \                     _FTFA_WriteArray: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0017             MOVS     R7,R2
     40            register int n = 0;
   \   00000004   0x2400             MOVS     R4,#+0
     41            register uint32 *pUlongDst = (uint32*)pDst;
   \   00000006   0x0006             MOVS     R6,R0
     42            register uint32 *pUlongSrc = (uint32*)pSrc;
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0xE008             B        ??_FTFA_WriteArray_0
     43          
     44            while ((size-n) > 0) { n+=_FTFA_WriteW32 (pUlongDst++, *(pUlongSrc++)); }
   \                     ??_FTFA_WriteArray_1: (+1)
   \   0000000C   0x0028             MOVS     R0,R5
   \   0000000E   0x0005             MOVS     R5,R0
   \   00000010   0x1D2D             ADDS     R5,R5,#+4
   \   00000012   0x6801             LDR      R1,[R0, #+0]
   \   00000014   0x0030             MOVS     R0,R6
   \   00000016   0x.... 0x....      BL       _FTFA_WriteW32
   \   0000001A   0x1D36             ADDS     R6,R6,#+4
   \   0000001C   0x1824             ADDS     R4,R4,R0
   \                     ??_FTFA_WriteArray_0: (+1)
   \   0000001E   0x1B38             SUBS     R0,R7,R4
   \   00000020   0x2801             CMP      R0,#+1
   \   00000022   0xDAF3             BGE      ??_FTFA_WriteArray_1
     45          
     46            return n;
   \   00000024   0x0020             MOVS     R0,R4
   \   00000026   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
     47          }
     48          

   \                                 In section .text, align 2, keep-with-next
     49          int _FTFA_ReadArray (void *pSrc, void *pDst, int size)
     50          {
   \                     _FTFA_ReadArray: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0003             MOVS     R3,R0
   \   00000004   0x0010             MOVS     R0,R2
     51            register uint8 *src = (uint8*)pSrc;
     52            register uint8 *dst = (uint8*)pDst;
     53            register int n = size;
   \   00000006   0x0002             MOVS     R2,R0
   \   00000008   0xE003             B        ??_FTFA_ReadArray_0
     54          
     55            while (n--) { *dst++ = *src++; }
   \                     ??_FTFA_ReadArray_1: (+1)
   \   0000000A   0x781C             LDRB     R4,[R3, #+0]
   \   0000000C   0x700C             STRB     R4,[R1, #+0]
   \   0000000E   0x1C5B             ADDS     R3,R3,#+1
   \   00000010   0x1C49             ADDS     R1,R1,#+1
   \                     ??_FTFA_ReadArray_0: (+1)
   \   00000012   0x0014             MOVS     R4,R2
   \   00000014   0x1E62             SUBS     R2,R4,#+1
   \   00000016   0x2C00             CMP      R4,#+0
   \   00000018   0xD1F7             BNE      ??_FTFA_ReadArray_1
     56          
     57            return size;
   \   0000001A   0xBD10             POP      {R4,PC}          ;; return
     58          }
     59          

   \                                 In section .text, align 2, keep-with-next
     60          int _FTFA_WriteW32 (const uint32 *pDst, uint32 val)
     61          {
   \                     _FTFA_WriteW32: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     62            if (FTFA_FSTAT &
     63               (FTFA_FSTAT_FPVIOL_MASK|FTFA_FSTAT_ACCERR_MASK|FTFA_FSTAT_RDCOLERR_MASK))
   \   00000002   0x....             LDR      R2,??DataTable2  ;; 0x40020000
   \   00000004   0x7812             LDRB     R2,[R2, #+0]
   \   00000006   0x2370             MOVS     R3,#+112
   \   00000008   0x421A             TST      R2,R3
   \   0000000A   0xD002             BEQ      ??_FTFA_WriteW32_0
     64            {
     65              FTFA_FSTAT = FTFA_FSTAT_FPVIOL_MASK|FTFA_FSTAT_ACCERR_MASK|FTFA_FSTAT_RDCOLERR_MASK;
   \   0000000C   0x2270             MOVS     R2,#+112
   \   0000000E   0x....             LDR      R3,??DataTable2  ;; 0x40020000
   \   00000010   0x701A             STRB     R2,[R3, #+0]
     66            }
     67            FTFA_FCCOB0 = 0x06;
   \                     ??_FTFA_WriteW32_0: (+1)
   \   00000012   0x2206             MOVS     R2,#+6
   \   00000014   0x....             LDR      R3,??DataTable2_1  ;; 0x40020007
   \   00000016   0x701A             STRB     R2,[R3, #+0]
     68            FTFA_FCCOB1 = (uint8)((uint32)pDst>> 16);
   \   00000018   0x0002             MOVS     R2,R0
   \   0000001A   0x0C12             LSRS     R2,R2,#+16
   \   0000001C   0x....             LDR      R3,??DataTable2_2  ;; 0x40020006
   \   0000001E   0x701A             STRB     R2,[R3, #+0]
     69            FTFA_FCCOB2 = (uint8)((uint32)pDst>>  8);
   \   00000020   0x0002             MOVS     R2,R0
   \   00000022   0x0A12             LSRS     R2,R2,#+8
   \   00000024   0x....             LDR      R3,??DataTable2_3  ;; 0x40020005
   \   00000026   0x701A             STRB     R2,[R3, #+0]
     70            FTFA_FCCOB3 = (uint8)((uint32)pDst>>  0);
   \   00000028   0x....             LDR      R2,??DataTable2_4  ;; 0x40020004
   \   0000002A   0x7010             STRB     R0,[R2, #+0]
     71            FTFA_FCCOB4 = (uint8)(val >> 24);
   \   0000002C   0x0008             MOVS     R0,R1
   \   0000002E   0x0E00             LSRS     R0,R0,#+24
   \   00000030   0x....             LDR      R2,??DataTable2_5  ;; 0x4002000b
   \   00000032   0x7010             STRB     R0,[R2, #+0]
     72            FTFA_FCCOB5 = (uint8)(val >> 16);
   \   00000034   0x0008             MOVS     R0,R1
   \   00000036   0x0C00             LSRS     R0,R0,#+16
   \   00000038   0x....             LDR      R2,??DataTable2_6  ;; 0x4002000a
   \   0000003A   0x7010             STRB     R0,[R2, #+0]
     73            FTFA_FCCOB6 = (uint8)(val >>  8);
   \   0000003C   0x0008             MOVS     R0,R1
   \   0000003E   0x0A00             LSRS     R0,R0,#+8
   \   00000040   0x....             LDR      R2,??DataTable2_7  ;; 0x40020009
   \   00000042   0x7010             STRB     R0,[R2, #+0]
     74            FTFA_FCCOB7 = (uint8)(val >>  0);
   \   00000044   0x....             LDR      R0,??DataTable2_8  ;; 0x40020008
   \   00000046   0x7001             STRB     R1,[R0, #+0]
     75            _FTFA_ExecCmd ();
   \   00000048   0x.... 0x....      BL       _FTFA_ExecCmd
     76          
     77            return sizeof(uint32);
   \   0000004C   0x2004             MOVS     R0,#+4
   \   0000004E   0xBD02             POP      {R1,PC}          ;; return
     78          }
     79          

   \                                 In section .text, align 2, keep-with-next
     80          void _FTFA_EraseSector (const void *pDst)
     81          {
   \                     _FTFA_EraseSector: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     82            if (FTFA_FSTAT &
     83               (FTFA_FSTAT_FPVIOL_MASK|FTFA_FSTAT_ACCERR_MASK|FTFA_FSTAT_RDCOLERR_MASK))
   \   00000002   0x....             LDR      R1,??DataTable2  ;; 0x40020000
   \   00000004   0x7809             LDRB     R1,[R1, #+0]
   \   00000006   0x2270             MOVS     R2,#+112
   \   00000008   0x4211             TST      R1,R2
   \   0000000A   0xD002             BEQ      ??_FTFA_EraseSector_0
     84            {
     85              FTFA_FSTAT = FTFA_FSTAT_FPVIOL_MASK|FTFA_FSTAT_ACCERR_MASK|FTFA_FSTAT_RDCOLERR_MASK;
   \   0000000C   0x2170             MOVS     R1,#+112
   \   0000000E   0x....             LDR      R2,??DataTable2  ;; 0x40020000
   \   00000010   0x7011             STRB     R1,[R2, #+0]
     86            }
     87            FTFA_FCCOB0 = 0x09;
   \                     ??_FTFA_EraseSector_0: (+1)
   \   00000012   0x2109             MOVS     R1,#+9
   \   00000014   0x....             LDR      R2,??DataTable2_1  ;; 0x40020007
   \   00000016   0x7011             STRB     R1,[R2, #+0]
     88            FTFA_FCCOB1 = (uint8)((uint32)pDst>> 16);
   \   00000018   0x0001             MOVS     R1,R0
   \   0000001A   0x0C09             LSRS     R1,R1,#+16
   \   0000001C   0x....             LDR      R2,??DataTable2_2  ;; 0x40020006
   \   0000001E   0x7011             STRB     R1,[R2, #+0]
     89            FTFA_FCCOB2 = (uint8)((uint32)pDst>>  8);
   \   00000020   0x0001             MOVS     R1,R0
   \   00000022   0x0A09             LSRS     R1,R1,#+8
   \   00000024   0x....             LDR      R2,??DataTable2_3  ;; 0x40020005
   \   00000026   0x7011             STRB     R1,[R2, #+0]
     90            FTFA_FCCOB3 = (uint8)((uint32)pDst>>  0);
   \   00000028   0x....             LDR      R1,??DataTable2_4  ;; 0x40020004
   \   0000002A   0x7008             STRB     R0,[R1, #+0]
     91            _FTFA_ExecCmd ();
   \   0000002C   0x.... 0x....      BL       _FTFA_ExecCmd
     92          }
   \   00000030   0xBD01             POP      {R0,PC}          ;; return
     93          

   \                                 In section .text, align 2, keep-with-next
     94          uint32 _FTFA_ReadIFR (uint8 addr)
     95          {
   \                     _FTFA_ReadIFR: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     96            if (FTFA_FSTAT &
     97               (FTFA_FSTAT_FPVIOL_MASK|FTFA_FSTAT_ACCERR_MASK|FTFA_FSTAT_RDCOLERR_MASK))
   \   00000002   0x....             LDR      R1,??DataTable2  ;; 0x40020000
   \   00000004   0x7809             LDRB     R1,[R1, #+0]
   \   00000006   0x2270             MOVS     R2,#+112
   \   00000008   0x4211             TST      R1,R2
   \   0000000A   0xD002             BEQ      ??_FTFA_ReadIFR_0
     98            {
     99              FTFA_FSTAT = FTFA_FSTAT_FPVIOL_MASK|FTFA_FSTAT_ACCERR_MASK|FTFA_FSTAT_RDCOLERR_MASK;
   \   0000000C   0x2170             MOVS     R1,#+112
   \   0000000E   0x....             LDR      R2,??DataTable2  ;; 0x40020000
   \   00000010   0x7011             STRB     R1,[R2, #+0]
    100            }
    101            FTFA_FCCOB0 = 0x03;
   \                     ??_FTFA_ReadIFR_0: (+1)
   \   00000012   0x2103             MOVS     R1,#+3
   \   00000014   0x....             LDR      R2,??DataTable2_1  ;; 0x40020007
   \   00000016   0x7011             STRB     R1,[R2, #+0]
    102            FTFA_FCCOB1 = 0x00;
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0x....             LDR      R2,??DataTable2_2  ;; 0x40020006
   \   0000001C   0x7011             STRB     R1,[R2, #+0]
    103            FTFA_FCCOB2 = 0x00;
   \   0000001E   0x2100             MOVS     R1,#+0
   \   00000020   0x....             LDR      R2,??DataTable2_3  ;; 0x40020005
   \   00000022   0x7011             STRB     R1,[R2, #+0]
    104            FTFA_FCCOB3 = (addr&(~0x03)); /* force longword alignment of the address    */
   \   00000024   0x21FC             MOVS     R1,#+252
   \   00000026   0x4001             ANDS     R1,R1,R0
   \   00000028   0x....             LDR      R0,??DataTable2_4  ;; 0x40020004
   \   0000002A   0x7001             STRB     R1,[R0, #+0]
    105            FTFA_FCCOB8 = 0x00;
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x....             LDR      R1,??DataTable2_9  ;; 0x4002000f
   \   00000030   0x7008             STRB     R0,[R1, #+0]
    106            _FTFA_ExecCmd ();
   \   00000032   0x.... 0x....      BL       _FTFA_ExecCmd
    107          
    108            return *((uint32*)&FTFA_FCCOB7);
   \   00000036   0x....             LDR      R0,??DataTable2_8  ;; 0x40020008
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0xBD02             POP      {R1,PC}          ;; return
    109          }
    110          
    111          /******************************************************************************
    112           * interrupt function definitions                                             *
    113           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    114          weak void ftfa_isr (void) { for (;;) {} }
   \                     ftfa_isr: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \                     ??ftfa_isr_0: (+1)
   \   00000002   0xE7FE             B        ??ftfa_isr_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x40020007         DC32     0x40020007

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x40020006         DC32     0x40020006

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x40020005         DC32     0x40020005

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x40020004         DC32     0x40020004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x4002000B         DC32     0x4002000b

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0x4002000A         DC32     0x4002000a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   0x40020009         DC32     0x40020009

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   0x40020008         DC32     0x40020008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \   00000000   0x4002000F         DC32     0x4002000f
    115          /******************************************************************************
    116           * End of module                                                              *
    117           ******************************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   _FTFA_EraseSector
         8   -> _FTFA_ExecCmd
       4   _FTFA_ExecCmd
       8   _FTFA_ReadArray
       8   _FTFA_ReadIFR
         8   -> _FTFA_ExecCmd
      24   _FTFA_WriteArray
        24   -> _FTFA_WriteW32
       8   _FTFA_WriteW32
         8   -> _FTFA_ExecCmd
       4   ftfa_isr


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
      50  _FTFA_EraseSector
      24  _FTFA_ExecCmd
      28  _FTFA_ReadArray
      60  _FTFA_ReadIFR
      40  _FTFA_WriteArray
      80  _FTFA_WriteW32
       4  ftfa_isr

 
 302 bytes in section .text
  24 bytes in section .textrw
 
 326 bytes of CODE memory

Errors: none
Warnings: none
