###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        16/Mar/2017  11:18:07
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\irtc\irtc.c
#    Command line =  
#        C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\irtc\irtc.c -D NDEBUG -lCN
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\adc_test\Release\List\
#        -o
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\adc_test\Release\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ --no_mem_idioms -e --fpu=None --dlib_config
#        D:\IAR7.4anzhuang\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\adc_test\..\..\..\..\src\common\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\adc_test\..\..\..\..\src\drivers\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\adc_test\..\..\..\..\src\freemaster\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\adc_test\..\..\..\..\src\projects\adc_test\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\adc_test\..\..\..\..\src\toolchain\iar\
#        -Ol --require_prototypes
#    List file    =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\adc_test\Release\List\irtc.lst
#    Object file  =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\adc_test\Release\Obj\irtc.o
#
###############################################################################

C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\irtc\irtc.c
      1          /******************************************************************************
      2           * (c) Copyright 2010-2014, Freescale Semiconductor Inc.
      3           * ALL RIGHTS RESERVED.
      4           ***************************************************************************//*!
      5           * @file      irtc.c
      6           * @version   1.0.7.0
      7           * @date      Apr-20-2014
      8           * @brief     IRTC Real Time Clock (IRTC) driver source code.
      9           ******************************************************************************/
     10          #include "common.h"
     11          #include "irtc.h"
     12          
     13          #if !defined(MCU_MKM34ZA5)
     14            #error "The irtc.c module is specific to the MKMxxZxxACxx5 microcontrollers."
     15          #endif
     16          
     17          /******************************************************************************
     18           * data type definitions                                                      *
     19           ******************************************************************************/
     20          #if defined(__ICCARM__)

   \                                 In section .bss, at 0x40051000
     21            volatile uint8_t IRTC_Ram[32] @0x40051000u;
   \                     IRTC_Ram:
   \   00000000                      DS8 32
     22          #elif defined(__GNUC__)
     23            volatile uint8_t IRTC_Ram[32] __attribute__((section(".RtcRamSection")));
     24          #elif defined(__CC_ARM)
     25            volatile uint8_t IRTC_Ram[32] __attribute__((section(".RtcRamSection"),used,zero_init));
     26          #endif
     27          

   \                                 In section .bss, align 4
     28          static IRTC_CALLBACK pCallbackIRTC;
   \                     pCallbackIRTC:
   \   00000000                      DS8 4
     29          
     30          /******************************************************************************
     31           * public function definitions                                                *
     32           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     33          void IRTC_InstallCallback (uint8 ip, IRTC_CALLBACK pCallback)
     34          {
   \                     IRTC_InstallCallback: (+1)
   \   00000000   0xB500             PUSH     {LR}
     35            if (pCallback) { pCallbackIRTC = pCallback; NVIC_SetIsr(INT_RTC,ip); }
   \   00000002   0x000A             MOVS     R2,R1
   \   00000004   0x2A00             CMP      R2,#+0
   \   00000006   0xD016             BEQ      ??IRTC_InstallCallback_0
   \   00000008   0x....             LDR      R2,??DataTable0
   \   0000000A   0x6011             STR      R1,[R2, #+0]
   \   0000000C   0x....             LDR      R1,??DataTable0_1  ;; 0xe000e280
   \   0000000E   0x6809             LDR      R1,[R1, #+0]
   \   00000010   0x2280             MOVS     R2,#+128
   \   00000012   0x0492             LSLS     R2,R2,#+18       ;; #+33554432
   \   00000014   0x430A             ORRS     R2,R2,R1
   \   00000016   0x....             LDR      R1,??DataTable0_1  ;; 0xe000e280
   \   00000018   0x600A             STR      R2,[R1, #+0]
   \   0000001A   0x....             LDR      R1,??DataTable0_2  ;; 0xe000e100
   \   0000001C   0x6809             LDR      R1,[R1, #+0]
   \   0000001E   0x2280             MOVS     R2,#+128
   \   00000020   0x0492             LSLS     R2,R2,#+18       ;; #+33554432
   \   00000022   0x430A             ORRS     R2,R2,R1
   \   00000024   0x....             LDR      R1,??DataTable0_2  ;; 0xe000e100
   \   00000026   0x600A             STR      R2,[R1, #+0]
   \   00000028   0x....             LDR      R1,??DataTable1  ;; 0xe000e418
   \   0000002A   0x6809             LDR      R1,[R1, #+0]
   \   0000002C   0xB2C0             UXTB     R0,R0
   \   0000002E   0x0380             LSLS     R0,R0,#+14
   \   00000030   0x4308             ORRS     R0,R0,R1
   \   00000032   0x....             LDR      R1,??DataTable1  ;; 0xe000e418
   \   00000034   0x6008             STR      R0,[R1, #+0]
     36          }
   \                     ??IRTC_InstallCallback_0: (+1)
   \   00000036   0xBD00             POP      {PC}             ;; return
     37          

   \                                 In section .text, align 2, keep-with-next
     38          void IRTC_Init (tIRTC irtc, tTAMPER t0, tTAMPER t1, tTAMPER t2, uint32 mask)
     39          {
   \                     IRTC_Init: (+1)
   \   00000000   0xB50F             PUSH     {R0-R3,LR}
   \   00000002   0xE002             B        ??IRTC_Init_0
     40            register uint16 tmp;
     41          
     42            IRTC_LockUnlock();
   \                     ??IRTC_Init_1: (+1)
   \   00000004   0x2080             MOVS     R0,#+128
   \   00000006   0x....             LDR      R1,??DataTable1_1  ;; 0x40050012
   \   00000008   0x7008             STRB     R0,[R1, #+0]
   \                     ??IRTC_Init_0: (+1)
   \   0000000A   0x....             LDR      R0,??DataTable1_1  ;; 0x40050012
   \   0000000C   0x8800             LDRH     R0,[R0, #+0]
   \   0000000E   0x0780             LSLS     R0,R0,#+30
   \   00000010   0xD5F8             BPL      ??IRTC_Init_1
   \                     ??IRTC_Init_2: (+1)
   \   00000012   0x....             LDR      R0,??DataTable1_1  ;; 0x40050012
   \   00000014   0x8800             LDRH     R0,[R0, #+0]
   \   00000016   0x0780             LSLS     R0,R0,#+30
   \   00000018   0xD50C             BPL      ??IRTC_Init_3
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x....             LDR      R1,??DataTable1_1  ;; 0x40050012
   \   0000001E   0x7008             STRB     R0,[R1, #+0]
   \   00000020   0x2040             MOVS     R0,#+64
   \   00000022   0x....             LDR      R1,??DataTable1_1  ;; 0x40050012
   \   00000024   0x7008             STRB     R0,[R1, #+0]
   \   00000026   0x20C0             MOVS     R0,#+192
   \   00000028   0x....             LDR      R1,??DataTable1_1  ;; 0x40050012
   \   0000002A   0x7008             STRB     R0,[R1, #+0]
   \   0000002C   0x2080             MOVS     R0,#+128
   \   0000002E   0x....             LDR      R1,??DataTable1_1  ;; 0x40050012
   \   00000030   0x7008             STRB     R0,[R1, #+0]
   \   00000032   0xE7EE             B        ??IRTC_Init_2
     43          
     44            /* setting common registers                                                 */
     45            /* disable and don't support at all TAMPER3 (battery removal) interrupt     */
     46            RTC_TAMPER_SCR    &=~0x0008;
   \                     ??IRTC_Init_3: (+1)
   \   00000034   0x....             LDR      R0,??DataTable1_2  ;; 0x40050032
   \   00000036   0x8800             LDRH     R0,[R0, #+0]
   \   00000038   0x....             LDR      R1,??DataTable1_3  ;; 0xfff7
   \   0000003A   0x4001             ANDS     R1,R1,R0
   \   0000003C   0x....             LDR      R0,??DataTable1_2  ;; 0x40050032
   \   0000003E   0x8001             STRH     R1,[R0, #+0]
     47            RTC_TAMPER_SCR    |= 0x0f08;    /* clear all tamper pin flags               */
   \   00000040   0x....             LDR      R0,??DataTable1_2  ;; 0x40050032
   \   00000042   0x8800             LDRH     R0,[R0, #+0]
   \   00000044   0x....             LDR      R1,??DataTable1_4  ;; 0xf08
   \   00000046   0x4301             ORRS     R1,R1,R0
   \   00000048   0x....             LDR      R0,??DataTable1_2  ;; 0x40050032
   \   0000004A   0x8001             STRH     R1,[R0, #+0]
     48            RTC_ISR            = 0xffff;    /* clear all IRTC module interrupt flags    */
   \   0000004C   0x....             LDR      R0,??DataTable1_5  ;; 0xffff
   \   0000004E   0x....             LDR      R1,??DataTable1_6  ;; 0x40050014
   \   00000050   0x8008             STRH     R0,[R1, #+0]
     49            IRTC_DisableIsr(IRTC_ALL_MASK); /* disable all supported interrupts         */
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0x2100             MOVS     R1,#+0
   \   00000056   0x0002             MOVS     R2,R0
   \   00000058   0x2001             MOVS     R0,#+1
   \   0000005A   0x4310             ORRS     R0,R0,R2
   \   0000005C   0x0002             MOVS     R2,R0
   \   0000005E   0x2002             MOVS     R0,#+2
   \   00000060   0x4310             ORRS     R0,R0,R2
   \   00000062   0x0002             MOVS     R2,R0
   \   00000064   0x2004             MOVS     R0,#+4
   \   00000066   0x4310             ORRS     R0,R0,R2
   \   00000068   0x000A             MOVS     R2,R1
   \   0000006A   0x2101             MOVS     R1,#+1
   \   0000006C   0x4311             ORRS     R1,R1,R2
   \   0000006E   0x000A             MOVS     R2,R1
   \   00000070   0x2104             MOVS     R1,#+4
   \   00000072   0x4311             ORRS     R1,R1,R2
   \   00000074   0x000A             MOVS     R2,R1
   \   00000076   0x2108             MOVS     R1,#+8
   \   00000078   0x4311             ORRS     R1,R1,R2
   \   0000007A   0x000A             MOVS     R2,R1
   \   0000007C   0x2110             MOVS     R1,#+16
   \   0000007E   0x4311             ORRS     R1,R1,R2
   \   00000080   0x000A             MOVS     R2,R1
   \   00000082   0x2120             MOVS     R1,#+32
   \   00000084   0x4311             ORRS     R1,R1,R2
   \   00000086   0x000A             MOVS     R2,R1
   \   00000088   0x2140             MOVS     R1,#+64
   \   0000008A   0x4311             ORRS     R1,R1,R2
   \   0000008C   0x000A             MOVS     R2,R1
   \   0000008E   0x2180             MOVS     R1,#+128
   \   00000090   0x4311             ORRS     R1,R1,R2
   \   00000092   0x000A             MOVS     R2,R1
   \   00000094   0x2180             MOVS     R1,#+128
   \   00000096   0x0049             LSLS     R1,R1,#+1        ;; #+256
   \   00000098   0x4311             ORRS     R1,R1,R2
   \   0000009A   0x000A             MOVS     R2,R1
   \   0000009C   0x2180             MOVS     R1,#+128
   \   0000009E   0x0089             LSLS     R1,R1,#+2        ;; #+512
   \   000000A0   0x4311             ORRS     R1,R1,R2
   \   000000A2   0x000A             MOVS     R2,R1
   \   000000A4   0x2180             MOVS     R1,#+128
   \   000000A6   0x00C9             LSLS     R1,R1,#+3        ;; #+1024
   \   000000A8   0x4311             ORRS     R1,R1,R2
   \   000000AA   0x000A             MOVS     R2,R1
   \   000000AC   0x2180             MOVS     R1,#+128
   \   000000AE   0x0109             LSLS     R1,R1,#+4        ;; #+2048
   \   000000B0   0x4311             ORRS     R1,R1,R2
   \   000000B2   0x000A             MOVS     R2,R1
   \   000000B4   0x2180             MOVS     R1,#+128
   \   000000B6   0x0149             LSLS     R1,R1,#+5        ;; #+4096
   \   000000B8   0x4311             ORRS     R1,R1,R2
   \   000000BA   0x000A             MOVS     R2,R1
   \   000000BC   0x2180             MOVS     R1,#+128
   \   000000BE   0x0189             LSLS     R1,R1,#+6        ;; #+8192
   \   000000C0   0x4311             ORRS     R1,R1,R2
   \   000000C2   0x000A             MOVS     R2,R1
   \   000000C4   0x2180             MOVS     R1,#+128
   \   000000C6   0x01C9             LSLS     R1,R1,#+7        ;; #+16384
   \   000000C8   0x4311             ORRS     R1,R1,R2
   \   000000CA   0x000A             MOVS     R2,R1
   \   000000CC   0x2180             MOVS     R1,#+128
   \   000000CE   0x0209             LSLS     R1,R1,#+8        ;; #+32768
   \   000000D0   0x4311             ORRS     R1,R1,R2
   \   000000D2   0xE002             B        ??IRTC_Init_4
   \                     ??IRTC_Init_5: (+1)
   \   000000D4   0x2280             MOVS     R2,#+128
   \   000000D6   0x....             LDR      R3,??DataTable1_1  ;; 0x40050012
   \   000000D8   0x701A             STRB     R2,[R3, #+0]
   \                     ??IRTC_Init_4: (+1)
   \   000000DA   0x....             LDR      R2,??DataTable1_1  ;; 0x40050012
   \   000000DC   0x8812             LDRH     R2,[R2, #+0]
   \   000000DE   0x0792             LSLS     R2,R2,#+30
   \   000000E0   0xD5F8             BPL      ??IRTC_Init_5
   \                     ??IRTC_Init_6: (+1)
   \   000000E2   0x....             LDR      R2,??DataTable1_1  ;; 0x40050012
   \   000000E4   0x8812             LDRH     R2,[R2, #+0]
   \   000000E6   0x0792             LSLS     R2,R2,#+30
   \   000000E8   0xD50C             BPL      ??IRTC_Init_7
   \   000000EA   0x2200             MOVS     R2,#+0
   \   000000EC   0x....             LDR      R3,??DataTable1_1  ;; 0x40050012
   \   000000EE   0x701A             STRB     R2,[R3, #+0]
   \   000000F0   0x2240             MOVS     R2,#+64
   \   000000F2   0x....             LDR      R3,??DataTable1_1  ;; 0x40050012
   \   000000F4   0x701A             STRB     R2,[R3, #+0]
   \   000000F6   0x22C0             MOVS     R2,#+192
   \   000000F8   0x....             LDR      R3,??DataTable1_1  ;; 0x40050012
   \   000000FA   0x701A             STRB     R2,[R3, #+0]
   \   000000FC   0x2280             MOVS     R2,#+128
   \   000000FE   0x....             LDR      R3,??DataTable1_1  ;; 0x40050012
   \   00000100   0x701A             STRB     R2,[R3, #+0]
   \   00000102   0xE7EE             B        ??IRTC_Init_6
   \                     ??IRTC_Init_7: (+1)
   \   00000104   0xB280             UXTH     R0,R0
   \   00000106   0x43C2             MVNS     R2,R0
   \   00000108   0x....             LDR      R0,??DataTable1_7  ;; 0x44050032
   \   0000010A   0x8002             STRH     R2,[R0, #+0]
   \   0000010C   0xB289             UXTH     R1,R1
   \   0000010E   0x43C8             MVNS     R0,R1
   \   00000110   0x....             LDR      R1,??DataTable1_8  ;; 0x44050016
   \   00000112   0x8008             STRH     R0,[R1, #+0]
     50            IRTC_EnableIsr (mask);          /* enable only selected interrupts          */
   \   00000114   0x2200             MOVS     R2,#+0
   \   00000116   0x2000             MOVS     R0,#+0
   \   00000118   0x9906             LDR      R1,[SP, #+24]
   \   0000011A   0x07CB             LSLS     R3,R1,#+31
   \   0000011C   0xD502             BPL      ??IRTC_Init_8
   \   0000011E   0x0013             MOVS     R3,R2
   \   00000120   0x2201             MOVS     R2,#+1
   \   00000122   0x431A             ORRS     R2,R2,R3
   \                     ??IRTC_Init_8: (+1)
   \   00000124   0x078B             LSLS     R3,R1,#+30
   \   00000126   0xD502             BPL      ??IRTC_Init_9
   \   00000128   0x0013             MOVS     R3,R2
   \   0000012A   0x2202             MOVS     R2,#+2
   \   0000012C   0x431A             ORRS     R2,R2,R3
   \                     ??IRTC_Init_9: (+1)
   \   0000012E   0x074B             LSLS     R3,R1,#+29
   \   00000130   0xD502             BPL      ??IRTC_Init_10
   \   00000132   0x0013             MOVS     R3,R2
   \   00000134   0x2204             MOVS     R2,#+4
   \   00000136   0x431A             ORRS     R2,R2,R3
   \                     ??IRTC_Init_10: (+1)
   \   00000138   0x074B             LSLS     R3,R1,#+29       ;; ZeroExtS R3,R1,#+29,#+29
   \   0000013A   0x0F5B             LSRS     R3,R3,#+29
   \   0000013C   0x2B00             CMP      R3,#+0
   \   0000013E   0xD002             BEQ      ??IRTC_Init_11
   \   00000140   0x0003             MOVS     R3,R0
   \   00000142   0x2001             MOVS     R0,#+1
   \   00000144   0x4318             ORRS     R0,R0,R3
   \                     ??IRTC_Init_11: (+1)
   \   00000146   0x06CB             LSLS     R3,R1,#+27
   \   00000148   0xD502             BPL      ??IRTC_Init_12
   \   0000014A   0x0003             MOVS     R3,R0
   \   0000014C   0x2004             MOVS     R0,#+4
   \   0000014E   0x4318             ORRS     R0,R0,R3
   \                     ??IRTC_Init_12: (+1)
   \   00000150   0x068B             LSLS     R3,R1,#+26
   \   00000152   0xD502             BPL      ??IRTC_Init_13
   \   00000154   0x0003             MOVS     R3,R0
   \   00000156   0x2008             MOVS     R0,#+8
   \   00000158   0x4318             ORRS     R0,R0,R3
   \                     ??IRTC_Init_13: (+1)
   \   0000015A   0x064B             LSLS     R3,R1,#+25
   \   0000015C   0xD502             BPL      ??IRTC_Init_14
   \   0000015E   0x0003             MOVS     R3,R0
   \   00000160   0x2010             MOVS     R0,#+16
   \   00000162   0x4318             ORRS     R0,R0,R3
   \                     ??IRTC_Init_14: (+1)
   \   00000164   0x060B             LSLS     R3,R1,#+24
   \   00000166   0xD502             BPL      ??IRTC_Init_15
   \   00000168   0x0003             MOVS     R3,R0
   \   0000016A   0x2020             MOVS     R0,#+32
   \   0000016C   0x4318             ORRS     R0,R0,R3
   \                     ??IRTC_Init_15: (+1)
   \   0000016E   0x05CB             LSLS     R3,R1,#+23
   \   00000170   0xD502             BPL      ??IRTC_Init_16
   \   00000172   0x0003             MOVS     R3,R0
   \   00000174   0x2040             MOVS     R0,#+64
   \   00000176   0x4318             ORRS     R0,R0,R3
   \                     ??IRTC_Init_16: (+1)
   \   00000178   0x058B             LSLS     R3,R1,#+22
   \   0000017A   0xD502             BPL      ??IRTC_Init_17
   \   0000017C   0x0003             MOVS     R3,R0
   \   0000017E   0x2080             MOVS     R0,#+128
   \   00000180   0x4318             ORRS     R0,R0,R3
   \                     ??IRTC_Init_17: (+1)
   \   00000182   0x054B             LSLS     R3,R1,#+21
   \   00000184   0xD503             BPL      ??IRTC_Init_18
   \   00000186   0x0003             MOVS     R3,R0
   \   00000188   0x2080             MOVS     R0,#+128
   \   0000018A   0x0040             LSLS     R0,R0,#+1        ;; #+256
   \   0000018C   0x4318             ORRS     R0,R0,R3
   \                     ??IRTC_Init_18: (+1)
   \   0000018E   0x050B             LSLS     R3,R1,#+20
   \   00000190   0xD503             BPL      ??IRTC_Init_19
   \   00000192   0x0003             MOVS     R3,R0
   \   00000194   0x2080             MOVS     R0,#+128
   \   00000196   0x0080             LSLS     R0,R0,#+2        ;; #+512
   \   00000198   0x4318             ORRS     R0,R0,R3
   \                     ??IRTC_Init_19: (+1)
   \   0000019A   0x04CB             LSLS     R3,R1,#+19
   \   0000019C   0xD503             BPL      ??IRTC_Init_20
   \   0000019E   0x0003             MOVS     R3,R0
   \   000001A0   0x2080             MOVS     R0,#+128
   \   000001A2   0x00C0             LSLS     R0,R0,#+3        ;; #+1024
   \   000001A4   0x4318             ORRS     R0,R0,R3
   \                     ??IRTC_Init_20: (+1)
   \   000001A6   0x048B             LSLS     R3,R1,#+18
   \   000001A8   0xD503             BPL      ??IRTC_Init_21
   \   000001AA   0x0003             MOVS     R3,R0
   \   000001AC   0x2080             MOVS     R0,#+128
   \   000001AE   0x0100             LSLS     R0,R0,#+4        ;; #+2048
   \   000001B0   0x4318             ORRS     R0,R0,R3
   \                     ??IRTC_Init_21: (+1)
   \   000001B2   0x044B             LSLS     R3,R1,#+17
   \   000001B4   0xD503             BPL      ??IRTC_Init_22
   \   000001B6   0x0003             MOVS     R3,R0
   \   000001B8   0x2080             MOVS     R0,#+128
   \   000001BA   0x0140             LSLS     R0,R0,#+5        ;; #+4096
   \   000001BC   0x4318             ORRS     R0,R0,R3
   \                     ??IRTC_Init_22: (+1)
   \   000001BE   0x040B             LSLS     R3,R1,#+16
   \   000001C0   0xD503             BPL      ??IRTC_Init_23
   \   000001C2   0x0003             MOVS     R3,R0
   \   000001C4   0x2080             MOVS     R0,#+128
   \   000001C6   0x0180             LSLS     R0,R0,#+6        ;; #+8192
   \   000001C8   0x4318             ORRS     R0,R0,R3
   \                     ??IRTC_Init_23: (+1)
   \   000001CA   0x03CB             LSLS     R3,R1,#+15
   \   000001CC   0xD503             BPL      ??IRTC_Init_24
   \   000001CE   0x0003             MOVS     R3,R0
   \   000001D0   0x2080             MOVS     R0,#+128
   \   000001D2   0x01C0             LSLS     R0,R0,#+7        ;; #+16384
   \   000001D4   0x4318             ORRS     R0,R0,R3
   \                     ??IRTC_Init_24: (+1)
   \   000001D6   0x0389             LSLS     R1,R1,#+14
   \   000001D8   0xD507             BPL      ??IRTC_Init_25
   \   000001DA   0x0001             MOVS     R1,R0
   \   000001DC   0x2080             MOVS     R0,#+128
   \   000001DE   0x0200             LSLS     R0,R0,#+8        ;; #+32768
   \   000001E0   0x4308             ORRS     R0,R0,R1
   \   000001E2   0xE002             B        ??IRTC_Init_25
   \                     ??IRTC_Init_26: (+1)
   \   000001E4   0x2180             MOVS     R1,#+128
   \   000001E6   0x....             LDR      R3,??DataTable1_1  ;; 0x40050012
   \   000001E8   0x7019             STRB     R1,[R3, #+0]
   \                     ??IRTC_Init_25: (+1)
   \   000001EA   0x....             LDR      R1,??DataTable1_1  ;; 0x40050012
   \   000001EC   0x8809             LDRH     R1,[R1, #+0]
   \   000001EE   0x0789             LSLS     R1,R1,#+30
   \   000001F0   0xD5F8             BPL      ??IRTC_Init_26
   \                     ??IRTC_Init_27: (+1)
   \   000001F2   0x....             LDR      R1,??DataTable1_1  ;; 0x40050012
   \   000001F4   0x8809             LDRH     R1,[R1, #+0]
   \   000001F6   0x0789             LSLS     R1,R1,#+30
   \   000001F8   0xD50C             BPL      ??IRTC_Init_28
   \   000001FA   0x2100             MOVS     R1,#+0
   \   000001FC   0x....             LDR      R3,??DataTable1_1  ;; 0x40050012
   \   000001FE   0x7019             STRB     R1,[R3, #+0]
   \   00000200   0x2140             MOVS     R1,#+64
   \   00000202   0x....             LDR      R3,??DataTable1_1  ;; 0x40050012
   \   00000204   0x7019             STRB     R1,[R3, #+0]
   \   00000206   0x21C0             MOVS     R1,#+192
   \   00000208   0x....             LDR      R3,??DataTable1_1  ;; 0x40050012
   \   0000020A   0x7019             STRB     R1,[R3, #+0]
   \   0000020C   0x2180             MOVS     R1,#+128
   \   0000020E   0x....             LDR      R3,??DataTable1_1  ;; 0x40050012
   \   00000210   0x7019             STRB     R1,[R3, #+0]
   \   00000212   0xE7EE             B        ??IRTC_Init_27
   \                     ??IRTC_Init_28: (+1)
   \   00000214   0x....             LDR      R1,??DataTable1_9  ;; 0x48050032
   \   00000216   0x800A             STRH     R2,[R1, #+0]
   \   00000218   0x....             LDR      R1,??DataTable1_10  ;; 0x48050016
   \   0000021A   0x8008             STRH     R0,[R1, #+0]
     51            RTC_CTRL           =  irtc.CTRL;
   \   0000021C   0x4668             MOV      R0,SP
   \   0000021E   0x8800             LDRH     R0,[R0, #+0]
   \   00000220   0x....             LDR      R1,??DataTable1_11  ;; 0x40050010
   \   00000222   0x8008             STRH     R0,[R1, #+0]
     52            RTC_COMPEN         =  irtc.COMPEN;
   \   00000224   0x4668             MOV      R0,SP
   \   00000226   0x8840             LDRH     R0,[R0, #+2]
   \   00000228   0x....             LDR      R1,??DataTable1_12  ;; 0x40050028
   \   0000022A   0x8008             STRH     R0,[R1, #+0]
     53            RTC_TAMPER_QSCR    =  irtc.QSCR;
   \   0000022C   0x4668             MOV      R0,SP
   \   0000022E   0x8880             LDRH     R0,[R0, #+4]
   \   00000230   0x....             LDR      R1,??DataTable1_13  ;; 0x4005002e
   \   00000232   0x8008             STRH     R0,[R1, #+0]
     54          
     55            /* tamper 0 pin setting - used as the tamper pin                            */
     56            RTC_CTRL2 &= ~RTC_CTRL2_WAKEUP_MODE_MASK;
   \   00000234   0x....             LDR      R0,??DataTable1_14  ;; 0x40050042
   \   00000236   0x8800             LDRH     R0,[R0, #+0]
   \   00000238   0x....             LDR      R1,??DataTable1_15  ;; 0xff7f
   \   0000023A   0x4001             ANDS     R1,R1,R0
   \   0000023C   0x....             LDR      R0,??DataTable1_14  ;; 0x40050042
   \   0000023E   0x8001             STRH     R1,[R0, #+0]
     57            tmp  = RTC_TAMPER_DIRECTION_A_P_TAMP(TAMPER0_PIN)|
     58                   RTC_TAMPER_DIRECTION_I_O_TAMP(TAMPER0_PIN);
   \   00000240   0x20FF             MOVS     R0,#+255
   \   00000242   0x1C80             ADDS     R0,R0,#+2        ;; #+257
     59            RTC_TAMPER_DIRECTION  = (t0.DIRECTION & tmp);
   \   00000244   0x4669             MOV      R1,SP
   \   00000246   0x8909             LDRH     R1,[R1, #+8]
   \   00000248   0x4008             ANDS     R0,R0,R1
   \   0000024A   0x....             LDR      R1,??DataTable1_16  ;; 0x4005002c
   \   0000024C   0x8008             STRH     R0,[R1, #+0]
     60            tmp  = RTC_FILTER01_CFG_POL0_MASK|RTC_FILTER01_CFG_CLK_SEL0_MASK|
     61                   RTC_FILTER01_CFG_FIL_DUR0_MASK;
   \   0000024E   0x20FF             MOVS     R0,#+255
   \   00000250   0x0200             LSLS     R0,R0,#+8        ;; #+65280
     62            RTC_FILTER01_CFG   = ((uint16)(t0.FILTER_CFG<<8) & tmp);
   \   00000252   0xA902             ADD      R1,SP,#+8
   \   00000254   0x8849             LDRH     R1,[R1, #+2]
   \   00000256   0x0209             LSLS     R1,R1,#+8
   \   00000258   0x4008             ANDS     R0,R0,R1
   \   0000025A   0x....             LDR      R1,??DataTable1_17  ;; 0x40050034
   \   0000025C   0x8008             STRH     R0,[R1, #+0]
     63          
     64            /* tamper 1 pin setting                                                     */
     65            tmp  = RTC_TAMPER_DIRECTION_A_P_TAMP(TAMPER1_PIN)|
     66                   RTC_TAMPER_DIRECTION_I_O_TAMP(TAMPER1_PIN);
   \   0000025E   0x....             LDR      R0,??DataTable1_18  ;; 0x202
     67            RTC_TAMPER_DIRECTION |= (t1.DIRECTION & tmp);
   \   00000260   0x....             LDR      R1,??DataTable1_16  ;; 0x4005002c
   \   00000262   0x8809             LDRH     R1,[R1, #+0]
   \   00000264   0x466A             MOV      R2,SP
   \   00000266   0x8992             LDRH     R2,[R2, #+12]
   \   00000268   0x4010             ANDS     R0,R0,R2
   \   0000026A   0x4308             ORRS     R0,R0,R1
   \   0000026C   0x....             LDR      R1,??DataTable1_16  ;; 0x4005002c
   \   0000026E   0x8008             STRH     R0,[R1, #+0]
     68            tmp  = RTC_FILTER01_CFG_POL1_MASK|RTC_FILTER01_CFG_CLK_SEL1_MASK|
     69                   RTC_FILTER01_CFG_FIL_DUR1_MASK;
   \   00000270   0x20FF             MOVS     R0,#+255
     70            RTC_FILTER01_CFG  |= (t1.FILTER_CFG & tmp);
   \   00000272   0x....             LDR      R1,??DataTable1_17  ;; 0x40050034
   \   00000274   0x8809             LDRH     R1,[R1, #+0]
   \   00000276   0xAA03             ADD      R2,SP,#+12
   \   00000278   0x8852             LDRH     R2,[R2, #+2]
   \   0000027A   0x4010             ANDS     R0,R0,R2
   \   0000027C   0x4308             ORRS     R0,R0,R1
   \   0000027E   0x....             LDR      R1,??DataTable1_17  ;; 0x40050034
   \   00000280   0x8008             STRH     R0,[R1, #+0]
     71          
     72            /* tamper 2 pin setting                                                     */
     73            tmp  = RTC_TAMPER_DIRECTION_A_P_TAMP(TAMPER2_PIN)|
     74                   RTC_TAMPER_DIRECTION_I_O_TAMP(TAMPER2_PIN);
   \   00000282   0x....             LDR      R0,??DataTable1_19  ;; 0x404
     75            RTC_TAMPER_DIRECTION |= (t2.DIRECTION & tmp);
   \   00000284   0x....             LDR      R1,??DataTable1_16  ;; 0x4005002c
   \   00000286   0x8809             LDRH     R1,[R1, #+0]
   \   00000288   0x466A             MOV      R2,SP
   \   0000028A   0x8A92             LDRH     R2,[R2, #+20]
   \   0000028C   0x4010             ANDS     R0,R0,R2
   \   0000028E   0x4308             ORRS     R0,R0,R1
   \   00000290   0x....             LDR      R1,??DataTable1_16  ;; 0x4005002c
   \   00000292   0x8008             STRH     R0,[R1, #+0]
     76            tmp  = RTC_FILTER2_CFG_POL2_MASK|RTC_FILTER2_CFG_CLK_SEL2_MASK|
     77                   RTC_FILTER2_CFG_FIL_DUR2_MASK;
   \   00000294   0x20FF             MOVS     R0,#+255
   \   00000296   0x0200             LSLS     R0,R0,#+8        ;; #+65280
     78            RTC_FILTER2_CFG    = ((uint16)(t2.FILTER_CFG<<8) & tmp);
   \   00000298   0xA905             ADD      R1,SP,#+20
   \   0000029A   0x8849             LDRH     R1,[R1, #+2]
   \   0000029C   0x0209             LSLS     R1,R1,#+8
   \   0000029E   0x4008             ANDS     R0,R0,R1
   \   000002A0   0x....             LDR      R1,??DataTable1_20  ;; 0x40050036
   \   000002A2   0x8008             STRH     R0,[R1, #+0]
     79          
     80            /* enable tamper filter processing                                          */
     81            RTC_CTRL2 |= RTC_CTRL2_TAMP_CFG_OVER_MASK;
   \   000002A4   0x....             LDR      R0,??DataTable1_14  ;; 0x40050042
   \   000002A6   0x8800             LDRH     R0,[R0, #+0]
   \   000002A8   0x2101             MOVS     R1,#+1
   \   000002AA   0x4301             ORRS     R1,R1,R0
   \   000002AC   0x....             LDR      R0,??DataTable1_14  ;; 0x40050042
   \   000002AE   0x8001             STRH     R1,[R0, #+0]
     82          }
   \   000002B0   0xBD0F             POP      {R0-R3,PC}       ;; return
     83          

   \                                 In section .text, align 2, keep-with-next
     84          void IRTC_WkupInit (tIRTC irtc, tTAMPER t1, tTAMPER t2, uint32 mask)
     85          {
   \                     IRTC_WkupInit: (+1)
   \   00000000   0xB50F             PUSH     {R0-R3,LR}
   \   00000002   0xE002             B        ??IRTC_WkupInit_0
     86            register uint16 tmp;
     87          
     88            IRTC_LockUnlock();
   \                     ??IRTC_WkupInit_1: (+1)
   \   00000004   0x2080             MOVS     R0,#+128
   \   00000006   0x....             LDR      R1,??DataTable2  ;; 0x40050012
   \   00000008   0x7008             STRB     R0,[R1, #+0]
   \                     ??IRTC_WkupInit_0: (+1)
   \   0000000A   0x....             LDR      R0,??DataTable2  ;; 0x40050012
   \   0000000C   0x8800             LDRH     R0,[R0, #+0]
   \   0000000E   0x0780             LSLS     R0,R0,#+30
   \   00000010   0xD5F8             BPL      ??IRTC_WkupInit_1
   \                     ??IRTC_WkupInit_2: (+1)
   \   00000012   0x....             LDR      R0,??DataTable2  ;; 0x40050012
   \   00000014   0x8800             LDRH     R0,[R0, #+0]
   \   00000016   0x0780             LSLS     R0,R0,#+30
   \   00000018   0xD50C             BPL      ??IRTC_WkupInit_3
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x....             LDR      R1,??DataTable2  ;; 0x40050012
   \   0000001E   0x7008             STRB     R0,[R1, #+0]
   \   00000020   0x2040             MOVS     R0,#+64
   \   00000022   0x....             LDR      R1,??DataTable2  ;; 0x40050012
   \   00000024   0x7008             STRB     R0,[R1, #+0]
   \   00000026   0x20C0             MOVS     R0,#+192
   \   00000028   0x....             LDR      R1,??DataTable2  ;; 0x40050012
   \   0000002A   0x7008             STRB     R0,[R1, #+0]
   \   0000002C   0x2080             MOVS     R0,#+128
   \   0000002E   0x....             LDR      R1,??DataTable2  ;; 0x40050012
   \   00000030   0x7008             STRB     R0,[R1, #+0]
   \   00000032   0xE7EE             B        ??IRTC_WkupInit_2
     89          
     90            /* setting common registers                                                 */
     91            /* disable and don't support at all TAMPER3 (battery removal) interrupt     */
     92            RTC_TAMPER_SCR    &=~0x0008;
   \                     ??IRTC_WkupInit_3: (+1)
   \   00000034   0x....             LDR      R0,??DataTable2_1  ;; 0x40050032
   \   00000036   0x8800             LDRH     R0,[R0, #+0]
   \   00000038   0x....             LDR      R1,??DataTable2_2  ;; 0xfff7
   \   0000003A   0x4001             ANDS     R1,R1,R0
   \   0000003C   0x....             LDR      R0,??DataTable2_1  ;; 0x40050032
   \   0000003E   0x8001             STRH     R1,[R0, #+0]
     93            RTC_TAMPER_SCR    |= 0x0f08;    /* clear all tamper pin flags               */
   \   00000040   0x....             LDR      R0,??DataTable2_1  ;; 0x40050032
   \   00000042   0x8800             LDRH     R0,[R0, #+0]
   \   00000044   0x....             LDR      R1,??DataTable2_3  ;; 0xf08
   \   00000046   0x4301             ORRS     R1,R1,R0
   \   00000048   0x....             LDR      R0,??DataTable2_1  ;; 0x40050032
   \   0000004A   0x8001             STRH     R1,[R0, #+0]
     94            RTC_ISR            = 0xffff;    /* clear all IRTC module interrupt flags    */
   \   0000004C   0x....             LDR      R0,??DataTable2_4  ;; 0xffff
   \   0000004E   0x....             LDR      R1,??DataTable2_5  ;; 0x40050014
   \   00000050   0x8008             STRH     R0,[R1, #+0]
     95            IRTC_DisableIsr(IRTC_ALL_MASK); /* disable all supported interrupts         */
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0x2100             MOVS     R1,#+0
   \   00000056   0x0002             MOVS     R2,R0
   \   00000058   0x2001             MOVS     R0,#+1
   \   0000005A   0x4310             ORRS     R0,R0,R2
   \   0000005C   0x0002             MOVS     R2,R0
   \   0000005E   0x2002             MOVS     R0,#+2
   \   00000060   0x4310             ORRS     R0,R0,R2
   \   00000062   0x0002             MOVS     R2,R0
   \   00000064   0x2004             MOVS     R0,#+4
   \   00000066   0x4310             ORRS     R0,R0,R2
   \   00000068   0x000A             MOVS     R2,R1
   \   0000006A   0x2101             MOVS     R1,#+1
   \   0000006C   0x4311             ORRS     R1,R1,R2
   \   0000006E   0x000A             MOVS     R2,R1
   \   00000070   0x2104             MOVS     R1,#+4
   \   00000072   0x4311             ORRS     R1,R1,R2
   \   00000074   0x000A             MOVS     R2,R1
   \   00000076   0x2108             MOVS     R1,#+8
   \   00000078   0x4311             ORRS     R1,R1,R2
   \   0000007A   0x000A             MOVS     R2,R1
   \   0000007C   0x2110             MOVS     R1,#+16
   \   0000007E   0x4311             ORRS     R1,R1,R2
   \   00000080   0x000A             MOVS     R2,R1
   \   00000082   0x2120             MOVS     R1,#+32
   \   00000084   0x4311             ORRS     R1,R1,R2
   \   00000086   0x000A             MOVS     R2,R1
   \   00000088   0x2140             MOVS     R1,#+64
   \   0000008A   0x4311             ORRS     R1,R1,R2
   \   0000008C   0x000A             MOVS     R2,R1
   \   0000008E   0x2180             MOVS     R1,#+128
   \   00000090   0x4311             ORRS     R1,R1,R2
   \   00000092   0x000A             MOVS     R2,R1
   \   00000094   0x2180             MOVS     R1,#+128
   \   00000096   0x0049             LSLS     R1,R1,#+1        ;; #+256
   \   00000098   0x4311             ORRS     R1,R1,R2
   \   0000009A   0x000A             MOVS     R2,R1
   \   0000009C   0x2180             MOVS     R1,#+128
   \   0000009E   0x0089             LSLS     R1,R1,#+2        ;; #+512
   \   000000A0   0x4311             ORRS     R1,R1,R2
   \   000000A2   0x000A             MOVS     R2,R1
   \   000000A4   0x2180             MOVS     R1,#+128
   \   000000A6   0x00C9             LSLS     R1,R1,#+3        ;; #+1024
   \   000000A8   0x4311             ORRS     R1,R1,R2
   \   000000AA   0x000A             MOVS     R2,R1
   \   000000AC   0x2180             MOVS     R1,#+128
   \   000000AE   0x0109             LSLS     R1,R1,#+4        ;; #+2048
   \   000000B0   0x4311             ORRS     R1,R1,R2
   \   000000B2   0x000A             MOVS     R2,R1
   \   000000B4   0x2180             MOVS     R1,#+128
   \   000000B6   0x0149             LSLS     R1,R1,#+5        ;; #+4096
   \   000000B8   0x4311             ORRS     R1,R1,R2
   \   000000BA   0x000A             MOVS     R2,R1
   \   000000BC   0x2180             MOVS     R1,#+128
   \   000000BE   0x0189             LSLS     R1,R1,#+6        ;; #+8192
   \   000000C0   0x4311             ORRS     R1,R1,R2
   \   000000C2   0x000A             MOVS     R2,R1
   \   000000C4   0x2180             MOVS     R1,#+128
   \   000000C6   0x01C9             LSLS     R1,R1,#+7        ;; #+16384
   \   000000C8   0x4311             ORRS     R1,R1,R2
   \   000000CA   0x000A             MOVS     R2,R1
   \   000000CC   0x2180             MOVS     R1,#+128
   \   000000CE   0x0209             LSLS     R1,R1,#+8        ;; #+32768
   \   000000D0   0x4311             ORRS     R1,R1,R2
   \   000000D2   0xE002             B        ??IRTC_WkupInit_4
   \                     ??IRTC_WkupInit_5: (+1)
   \   000000D4   0x2280             MOVS     R2,#+128
   \   000000D6   0x....             LDR      R3,??DataTable2  ;; 0x40050012
   \   000000D8   0x701A             STRB     R2,[R3, #+0]
   \                     ??IRTC_WkupInit_4: (+1)
   \   000000DA   0x....             LDR      R2,??DataTable2  ;; 0x40050012
   \   000000DC   0x8812             LDRH     R2,[R2, #+0]
   \   000000DE   0x0792             LSLS     R2,R2,#+30
   \   000000E0   0xD5F8             BPL      ??IRTC_WkupInit_5
   \                     ??IRTC_WkupInit_6: (+1)
   \   000000E2   0x....             LDR      R2,??DataTable2  ;; 0x40050012
   \   000000E4   0x8812             LDRH     R2,[R2, #+0]
   \   000000E6   0x0792             LSLS     R2,R2,#+30
   \   000000E8   0xD50C             BPL      ??IRTC_WkupInit_7
   \   000000EA   0x2200             MOVS     R2,#+0
   \   000000EC   0x....             LDR      R3,??DataTable2  ;; 0x40050012
   \   000000EE   0x701A             STRB     R2,[R3, #+0]
   \   000000F0   0x2240             MOVS     R2,#+64
   \   000000F2   0x....             LDR      R3,??DataTable2  ;; 0x40050012
   \   000000F4   0x701A             STRB     R2,[R3, #+0]
   \   000000F6   0x22C0             MOVS     R2,#+192
   \   000000F8   0x....             LDR      R3,??DataTable2  ;; 0x40050012
   \   000000FA   0x701A             STRB     R2,[R3, #+0]
   \   000000FC   0x2280             MOVS     R2,#+128
   \   000000FE   0x....             LDR      R3,??DataTable2  ;; 0x40050012
   \   00000100   0x701A             STRB     R2,[R3, #+0]
   \   00000102   0xE7EE             B        ??IRTC_WkupInit_6
   \                     ??IRTC_WkupInit_7: (+1)
   \   00000104   0xB280             UXTH     R0,R0
   \   00000106   0x43C2             MVNS     R2,R0
   \   00000108   0x....             LDR      R0,??DataTable3  ;; 0x44050032
   \   0000010A   0x8002             STRH     R2,[R0, #+0]
   \   0000010C   0xB289             UXTH     R1,R1
   \   0000010E   0x43C8             MVNS     R0,R1
   \   00000110   0x....             LDR      R1,??DataTable3_1  ;; 0x44050016
   \   00000112   0x8008             STRH     R0,[R1, #+0]
     96            IRTC_EnableIsr (mask);          /* enable only selected interrupts          */
   \   00000114   0x2200             MOVS     R2,#+0
   \   00000116   0x2000             MOVS     R0,#+0
   \   00000118   0x9905             LDR      R1,[SP, #+20]
   \   0000011A   0x07CB             LSLS     R3,R1,#+31
   \   0000011C   0xD502             BPL      ??IRTC_WkupInit_8
   \   0000011E   0x0013             MOVS     R3,R2
   \   00000120   0x2201             MOVS     R2,#+1
   \   00000122   0x431A             ORRS     R2,R2,R3
   \                     ??IRTC_WkupInit_8: (+1)
   \   00000124   0x078B             LSLS     R3,R1,#+30
   \   00000126   0xD502             BPL      ??IRTC_WkupInit_9
   \   00000128   0x0013             MOVS     R3,R2
   \   0000012A   0x2202             MOVS     R2,#+2
   \   0000012C   0x431A             ORRS     R2,R2,R3
   \                     ??IRTC_WkupInit_9: (+1)
   \   0000012E   0x074B             LSLS     R3,R1,#+29
   \   00000130   0xD502             BPL      ??IRTC_WkupInit_10
   \   00000132   0x0013             MOVS     R3,R2
   \   00000134   0x2204             MOVS     R2,#+4
   \   00000136   0x431A             ORRS     R2,R2,R3
   \                     ??IRTC_WkupInit_10: (+1)
   \   00000138   0x074B             LSLS     R3,R1,#+29       ;; ZeroExtS R3,R1,#+29,#+29
   \   0000013A   0x0F5B             LSRS     R3,R3,#+29
   \   0000013C   0x2B00             CMP      R3,#+0
   \   0000013E   0xD002             BEQ      ??IRTC_WkupInit_11
   \   00000140   0x0003             MOVS     R3,R0
   \   00000142   0x2001             MOVS     R0,#+1
   \   00000144   0x4318             ORRS     R0,R0,R3
   \                     ??IRTC_WkupInit_11: (+1)
   \   00000146   0x06CB             LSLS     R3,R1,#+27
   \   00000148   0xD502             BPL      ??IRTC_WkupInit_12
   \   0000014A   0x0003             MOVS     R3,R0
   \   0000014C   0x2004             MOVS     R0,#+4
   \   0000014E   0x4318             ORRS     R0,R0,R3
   \                     ??IRTC_WkupInit_12: (+1)
   \   00000150   0x068B             LSLS     R3,R1,#+26
   \   00000152   0xD502             BPL      ??IRTC_WkupInit_13
   \   00000154   0x0003             MOVS     R3,R0
   \   00000156   0x2008             MOVS     R0,#+8
   \   00000158   0x4318             ORRS     R0,R0,R3
   \                     ??IRTC_WkupInit_13: (+1)
   \   0000015A   0x064B             LSLS     R3,R1,#+25
   \   0000015C   0xD502             BPL      ??IRTC_WkupInit_14
   \   0000015E   0x0003             MOVS     R3,R0
   \   00000160   0x2010             MOVS     R0,#+16
   \   00000162   0x4318             ORRS     R0,R0,R3
   \                     ??IRTC_WkupInit_14: (+1)
   \   00000164   0x060B             LSLS     R3,R1,#+24
   \   00000166   0xD502             BPL      ??IRTC_WkupInit_15
   \   00000168   0x0003             MOVS     R3,R0
   \   0000016A   0x2020             MOVS     R0,#+32
   \   0000016C   0x4318             ORRS     R0,R0,R3
   \                     ??IRTC_WkupInit_15: (+1)
   \   0000016E   0x05CB             LSLS     R3,R1,#+23
   \   00000170   0xD502             BPL      ??IRTC_WkupInit_16
   \   00000172   0x0003             MOVS     R3,R0
   \   00000174   0x2040             MOVS     R0,#+64
   \   00000176   0x4318             ORRS     R0,R0,R3
   \                     ??IRTC_WkupInit_16: (+1)
   \   00000178   0x058B             LSLS     R3,R1,#+22
   \   0000017A   0xD502             BPL      ??IRTC_WkupInit_17
   \   0000017C   0x0003             MOVS     R3,R0
   \   0000017E   0x2080             MOVS     R0,#+128
   \   00000180   0x4318             ORRS     R0,R0,R3
   \                     ??IRTC_WkupInit_17: (+1)
   \   00000182   0x054B             LSLS     R3,R1,#+21
   \   00000184   0xD503             BPL      ??IRTC_WkupInit_18
   \   00000186   0x0003             MOVS     R3,R0
   \   00000188   0x2080             MOVS     R0,#+128
   \   0000018A   0x0040             LSLS     R0,R0,#+1        ;; #+256
   \   0000018C   0x4318             ORRS     R0,R0,R3
   \                     ??IRTC_WkupInit_18: (+1)
   \   0000018E   0x050B             LSLS     R3,R1,#+20
   \   00000190   0xD503             BPL      ??IRTC_WkupInit_19
   \   00000192   0x0003             MOVS     R3,R0
   \   00000194   0x2080             MOVS     R0,#+128
   \   00000196   0x0080             LSLS     R0,R0,#+2        ;; #+512
   \   00000198   0x4318             ORRS     R0,R0,R3
   \                     ??IRTC_WkupInit_19: (+1)
   \   0000019A   0x04CB             LSLS     R3,R1,#+19
   \   0000019C   0xD503             BPL      ??IRTC_WkupInit_20
   \   0000019E   0x0003             MOVS     R3,R0
   \   000001A0   0x2080             MOVS     R0,#+128
   \   000001A2   0x00C0             LSLS     R0,R0,#+3        ;; #+1024
   \   000001A4   0x4318             ORRS     R0,R0,R3
   \                     ??IRTC_WkupInit_20: (+1)
   \   000001A6   0x048B             LSLS     R3,R1,#+18
   \   000001A8   0xD503             BPL      ??IRTC_WkupInit_21
   \   000001AA   0x0003             MOVS     R3,R0
   \   000001AC   0x2080             MOVS     R0,#+128
   \   000001AE   0x0100             LSLS     R0,R0,#+4        ;; #+2048
   \   000001B0   0x4318             ORRS     R0,R0,R3
   \                     ??IRTC_WkupInit_21: (+1)
   \   000001B2   0x044B             LSLS     R3,R1,#+17
   \   000001B4   0xD503             BPL      ??IRTC_WkupInit_22
   \   000001B6   0x0003             MOVS     R3,R0
   \   000001B8   0x2080             MOVS     R0,#+128
   \   000001BA   0x0140             LSLS     R0,R0,#+5        ;; #+4096
   \   000001BC   0x4318             ORRS     R0,R0,R3
   \                     ??IRTC_WkupInit_22: (+1)
   \   000001BE   0x040B             LSLS     R3,R1,#+16
   \   000001C0   0xD503             BPL      ??IRTC_WkupInit_23
   \   000001C2   0x0003             MOVS     R3,R0
   \   000001C4   0x2080             MOVS     R0,#+128
   \   000001C6   0x0180             LSLS     R0,R0,#+6        ;; #+8192
   \   000001C8   0x4318             ORRS     R0,R0,R3
   \                     ??IRTC_WkupInit_23: (+1)
   \   000001CA   0x03CB             LSLS     R3,R1,#+15
   \   000001CC   0xD503             BPL      ??IRTC_WkupInit_24
   \   000001CE   0x0003             MOVS     R3,R0
   \   000001D0   0x2080             MOVS     R0,#+128
   \   000001D2   0x01C0             LSLS     R0,R0,#+7        ;; #+16384
   \   000001D4   0x4318             ORRS     R0,R0,R3
   \                     ??IRTC_WkupInit_24: (+1)
   \   000001D6   0x0389             LSLS     R1,R1,#+14
   \   000001D8   0xD507             BPL      ??IRTC_WkupInit_25
   \   000001DA   0x0001             MOVS     R1,R0
   \   000001DC   0x2080             MOVS     R0,#+128
   \   000001DE   0x0200             LSLS     R0,R0,#+8        ;; #+32768
   \   000001E0   0x4308             ORRS     R0,R0,R1
   \   000001E2   0xE002             B        ??IRTC_WkupInit_25
   \                     ??IRTC_WkupInit_26: (+1)
   \   000001E4   0x2180             MOVS     R1,#+128
   \   000001E6   0x....             LDR      R3,??DataTable2  ;; 0x40050012
   \   000001E8   0x7019             STRB     R1,[R3, #+0]
   \                     ??IRTC_WkupInit_25: (+1)
   \   000001EA   0x....             LDR      R1,??DataTable2  ;; 0x40050012
   \   000001EC   0x8809             LDRH     R1,[R1, #+0]
   \   000001EE   0x0789             LSLS     R1,R1,#+30
   \   000001F0   0xD5F8             BPL      ??IRTC_WkupInit_26
   \                     ??IRTC_WkupInit_27: (+1)
   \   000001F2   0x....             LDR      R1,??DataTable2  ;; 0x40050012
   \   000001F4   0x8809             LDRH     R1,[R1, #+0]
   \   000001F6   0x0789             LSLS     R1,R1,#+30
   \   000001F8   0xD50C             BPL      ??IRTC_WkupInit_28
   \   000001FA   0x2100             MOVS     R1,#+0
   \   000001FC   0x....             LDR      R3,??DataTable2  ;; 0x40050012
   \   000001FE   0x7019             STRB     R1,[R3, #+0]
   \   00000200   0x2140             MOVS     R1,#+64
   \   00000202   0x....             LDR      R3,??DataTable2  ;; 0x40050012
   \   00000204   0x7019             STRB     R1,[R3, #+0]
   \   00000206   0x21C0             MOVS     R1,#+192
   \   00000208   0x....             LDR      R3,??DataTable2  ;; 0x40050012
   \   0000020A   0x7019             STRB     R1,[R3, #+0]
   \   0000020C   0x2180             MOVS     R1,#+128
   \   0000020E   0x....             LDR      R3,??DataTable2  ;; 0x40050012
   \   00000210   0x7019             STRB     R1,[R3, #+0]
   \   00000212   0xE7EE             B        ??IRTC_WkupInit_27
   \                     ??IRTC_WkupInit_28: (+1)
   \   00000214   0x....             LDR      R1,??DataTable6  ;; 0x48050032
   \   00000216   0x800A             STRH     R2,[R1, #+0]
   \   00000218   0x....             LDR      R1,??DataTable6_1  ;; 0x48050016
   \   0000021A   0x8008             STRH     R0,[R1, #+0]
     97            RTC_CTRL           =  irtc.CTRL;
   \   0000021C   0x4668             MOV      R0,SP
   \   0000021E   0x8800             LDRH     R0,[R0, #+0]
   \   00000220   0x....             LDR      R1,??DataTable6_2  ;; 0x40050010
   \   00000222   0x8008             STRH     R0,[R1, #+0]
     98            RTC_COMPEN         =  irtc.COMPEN;
   \   00000224   0x4668             MOV      R0,SP
   \   00000226   0x8840             LDRH     R0,[R0, #+2]
   \   00000228   0x....             LDR      R1,??DataTable6_3  ;; 0x40050028
   \   0000022A   0x8008             STRH     R0,[R1, #+0]
     99            RTC_TAMPER_QSCR    =  irtc.QSCR;
   \   0000022C   0x4668             MOV      R0,SP
   \   0000022E   0x8880             LDRH     R0,[R0, #+4]
   \   00000230   0x....             LDR      R1,??DataTable6_4  ;; 0x4005002e
   \   00000232   0x8008             STRH     R0,[R1, #+0]
    100          
    101            /* tamper 0 pin setting - used as the wakeup/hibernate pin                  */
    102            RTC_CTRL2 |= RTC_CTRL2_WAKEUP_MODE_MASK;
   \   00000234   0x....             LDR      R0,??DataTable6_5  ;; 0x40050042
   \   00000236   0x8800             LDRH     R0,[R0, #+0]
   \   00000238   0x2180             MOVS     R1,#+128
   \   0000023A   0x4301             ORRS     R1,R1,R0
   \   0000023C   0x....             LDR      R0,??DataTable6_5  ;; 0x40050042
   \   0000023E   0x8001             STRH     R1,[R0, #+0]
    103          
    104            /* tamper 1 pin setting                                                     */
    105            tmp  = RTC_TAMPER_DIRECTION_A_P_TAMP(TAMPER1_PIN)|
    106                   RTC_TAMPER_DIRECTION_I_O_TAMP(TAMPER1_PIN);
   \   00000240   0x....             LDR      R0,??DataTable6_6  ;; 0x202
    107            RTC_TAMPER_DIRECTION |= (t1.DIRECTION & tmp);
   \   00000242   0x....             LDR      R1,??DataTable6_7  ;; 0x4005002c
   \   00000244   0x8809             LDRH     R1,[R1, #+0]
   \   00000246   0x466A             MOV      R2,SP
   \   00000248   0x8912             LDRH     R2,[R2, #+8]
   \   0000024A   0x4010             ANDS     R0,R0,R2
   \   0000024C   0x4308             ORRS     R0,R0,R1
   \   0000024E   0x....             LDR      R1,??DataTable6_7  ;; 0x4005002c
   \   00000250   0x8008             STRH     R0,[R1, #+0]
    108            tmp  = RTC_FILTER01_CFG_POL1_MASK|RTC_FILTER01_CFG_CLK_SEL1_MASK|
    109                   RTC_FILTER01_CFG_FIL_DUR1_MASK;
   \   00000252   0x20FF             MOVS     R0,#+255
    110            RTC_FILTER01_CFG  |= (t1.FILTER_CFG & tmp);
   \   00000254   0x....             LDR      R1,??DataTable6_8  ;; 0x40050034
   \   00000256   0x8809             LDRH     R1,[R1, #+0]
   \   00000258   0xAA02             ADD      R2,SP,#+8
   \   0000025A   0x8852             LDRH     R2,[R2, #+2]
   \   0000025C   0x4010             ANDS     R0,R0,R2
   \   0000025E   0x4308             ORRS     R0,R0,R1
   \   00000260   0x....             LDR      R1,??DataTable6_8  ;; 0x40050034
   \   00000262   0x8008             STRH     R0,[R1, #+0]
    111          
    112            /* tamper 2 pin setting                                                     */
    113            tmp  = RTC_TAMPER_DIRECTION_A_P_TAMP(TAMPER2_PIN)|
    114                   RTC_TAMPER_DIRECTION_I_O_TAMP(TAMPER2_PIN);
   \   00000264   0x....             LDR      R0,??DataTable6_9  ;; 0x404
    115            RTC_TAMPER_DIRECTION |= (t2.DIRECTION & tmp);
   \   00000266   0x....             LDR      R1,??DataTable6_7  ;; 0x4005002c
   \   00000268   0x8809             LDRH     R1,[R1, #+0]
   \   0000026A   0x466A             MOV      R2,SP
   \   0000026C   0x8992             LDRH     R2,[R2, #+12]
   \   0000026E   0x4010             ANDS     R0,R0,R2
   \   00000270   0x4308             ORRS     R0,R0,R1
   \   00000272   0x....             LDR      R1,??DataTable6_7  ;; 0x4005002c
   \   00000274   0x8008             STRH     R0,[R1, #+0]
    116            tmp  = RTC_FILTER2_CFG_POL2_MASK|RTC_FILTER2_CFG_CLK_SEL2_MASK|
    117                   RTC_FILTER2_CFG_FIL_DUR2_MASK;
   \   00000276   0x20FF             MOVS     R0,#+255
   \   00000278   0x0200             LSLS     R0,R0,#+8        ;; #+65280
    118            RTC_FILTER2_CFG    = ((uint16)(t2.FILTER_CFG<<8) & tmp);
   \   0000027A   0xA903             ADD      R1,SP,#+12
   \   0000027C   0x8849             LDRH     R1,[R1, #+2]
   \   0000027E   0x0209             LSLS     R1,R1,#+8
   \   00000280   0x4008             ANDS     R0,R0,R1
   \   00000282   0x....             LDR      R1,??DataTable6_10  ;; 0x40050036
   \   00000284   0x8008             STRH     R0,[R1, #+0]
    119          
    120            /* enable tamper filter processing                                          */
    121            RTC_CTRL2 |= RTC_CTRL2_TAMP_CFG_OVER_MASK;
   \   00000286   0x....             LDR      R0,??DataTable6_5  ;; 0x40050042
   \   00000288   0x8800             LDRH     R0,[R0, #+0]
   \   0000028A   0x2101             MOVS     R1,#+1
   \   0000028C   0x4301             ORRS     R1,R1,R0
   \   0000028E   0x....             LDR      R0,??DataTable6_5  ;; 0x40050042
   \   00000290   0x8001             STRH     R1,[R0, #+0]
    122          }
   \   00000292   0xBD0F             POP      {R0-R3,PC}       ;; return
    123          

   \                                 In section .text, align 2, keep-with-next
    124          void IRTC_GetClock (tTIME *ptr)
    125          {
   \                     IRTC_GetClock: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xE7FF             B        ??IRTC_GetClock_0
    126            register uint16 reg_yearmon, reg_days, reg_hourmin, reg_seconds;
    127          
    128            /* read RTC registers and store their values in variables - we're loading   */
    129            /* variables by content of registers to minimize number of read operations  */
    130            while (1)
    131            {
    132              if (RTC_STATUS & RTC_STATUS_INVAL_BIT_MASK) { continue; }
   \                     ??IRTC_GetClock_1: (+1)
   \                     ??IRTC_GetClock_0: (+1)
   \   00000004   0x....             LDR      R1,??DataTable6_11  ;; 0x40050012
   \   00000006   0x8809             LDRH     R1,[R1, #+0]
   \   00000008   0x07C9             LSLS     R1,R1,#+31
   \   0000000A   0xD4FB             BMI      ??IRTC_GetClock_1
    133              reg_yearmon = RTC_YEARMON;
   \   0000000C   0x....             LDR      R1,??DataTable6_12  ;; 0x40050000
   \   0000000E   0x8809             LDRH     R1,[R1, #+0]
    134              if (RTC_STATUS & RTC_STATUS_INVAL_BIT_MASK) { continue; }
   \   00000010   0x....             LDR      R2,??DataTable6_11  ;; 0x40050012
   \   00000012   0x8812             LDRH     R2,[R2, #+0]
   \   00000014   0x07D2             LSLS     R2,R2,#+31
   \   00000016   0xD4F5             BMI      ??IRTC_GetClock_0
    135              reg_days    = RTC_DAYS;
   \                     ??IRTC_GetClock_2: (+1)
   \   00000018   0x....             LDR      R2,??DataTable6_13  ;; 0x40050002
   \   0000001A   0x8812             LDRH     R2,[R2, #+0]
    136              if (RTC_STATUS & RTC_STATUS_INVAL_BIT_MASK) { continue; }
   \   0000001C   0x....             LDR      R3,??DataTable6_11  ;; 0x40050012
   \   0000001E   0x881B             LDRH     R3,[R3, #+0]
   \   00000020   0x07DB             LSLS     R3,R3,#+31
   \   00000022   0xD4EF             BMI      ??IRTC_GetClock_0
    137              reg_hourmin = RTC_HOURMIN;
   \                     ??IRTC_GetClock_3: (+1)
   \   00000024   0x....             LDR      R3,??DataTable6_14  ;; 0x40050004
   \   00000026   0x881B             LDRH     R3,[R3, #+0]
    138              if (RTC_STATUS & RTC_STATUS_INVAL_BIT_MASK) { continue; }
   \   00000028   0x....             LDR      R4,??DataTable6_11  ;; 0x40050012
   \   0000002A   0x8824             LDRH     R4,[R4, #+0]
   \   0000002C   0x07E4             LSLS     R4,R4,#+31
   \   0000002E   0xD4E9             BMI      ??IRTC_GetClock_0
    139              reg_seconds = RTC_SECONDS;
   \                     ??IRTC_GetClock_4: (+1)
   \   00000030   0x....             LDR      R4,??DataTable6_15  ;; 0x40050006
   \   00000032   0x8824             LDRH     R4,[R4, #+0]
    140              if (RTC_STATUS & RTC_STATUS_INVAL_BIT_MASK) { continue; }
   \   00000034   0x....             LDR      R5,??DataTable6_11  ;; 0x40050012
   \   00000036   0x882D             LDRH     R5,[R5, #+0]
   \   00000038   0x07ED             LSLS     R5,R5,#+31
   \   0000003A   0xD4E3             BMI      ??IRTC_GetClock_0
    141              break;
    142            }
    143            /* clock formating                                                          */
    144            ptr->year = (((int16)reg_yearmon>>RTC_YEARMON_YROFST_SHIFT) + BASE_YEAR);
   \                     ??IRTC_GetClock_5: (+1)
   \   0000003C   0x000D             MOVS     R5,R1
   \   0000003E   0xB22D             SXTH     R5,R5
   \   00000040   0x122D             ASRS     R5,R5,#+8
   \   00000042   0x2684             MOVS     R6,#+132
   \   00000044   0x0136             LSLS     R6,R6,#+4        ;; #+2112
   \   00000046   0x19AD             ADDS     R5,R5,R6
   \   00000048   0x80C5             STRH     R5,[R0, #+6]
    145            ptr->mon  = ((uint16)reg_yearmon>>RTC_YEARMON_MON_CNT_SHIFT)  & 0x0f;
   \   0000004A   0x0709             LSLS     R1,R1,#+28       ;; ZeroExtS R1,R1,#+28,#+28
   \   0000004C   0x0F09             LSRS     R1,R1,#+28
   \   0000004E   0x7141             STRB     R1,[R0, #+5]
    146            ptr->day  = ((uint16)reg_days   >>RTC_DAYS_DAY_CNT_SHIFT)     & 0x1f;
   \   00000050   0x0011             MOVS     R1,R2
   \   00000052   0x06C9             LSLS     R1,R1,#+27       ;; ZeroExtS R1,R1,#+27,#+27
   \   00000054   0x0EC9             LSRS     R1,R1,#+27
   \   00000056   0x70C1             STRB     R1,[R0, #+3]
    147            ptr->wday = ((uint16)reg_days   >>RTC_DAYS_DOW_SHIFT)         & 0x07;
   \   00000058   0xB292             UXTH     R2,R2
   \   0000005A   0x0011             MOVS     R1,R2
   \   0000005C   0x1209             ASRS     R1,R1,#+8
   \   0000005E   0x0749             LSLS     R1,R1,#+29       ;; ZeroExtS R1,R1,#+29,#+29
   \   00000060   0x0F49             LSRS     R1,R1,#+29
   \   00000062   0x7101             STRB     R1,[R0, #+4]
    148            ptr->hour = ((uint16)reg_hourmin>>RTC_HOURMIN_HOUR_CNT_SHIFT) & 0x1f;
   \   00000064   0xB29B             UXTH     R3,R3
   \   00000066   0x0019             MOVS     R1,R3
   \   00000068   0x1209             ASRS     R1,R1,#+8
   \   0000006A   0x06C9             LSLS     R1,R1,#+27       ;; ZeroExtS R1,R1,#+27,#+27
   \   0000006C   0x0EC9             LSRS     R1,R1,#+27
   \   0000006E   0x7081             STRB     R1,[R0, #+2]
    149            ptr->min  = ((uint16)reg_hourmin>>RTC_HOURMIN_MIN_CNT_SHIFT)  & 0x3f;
   \   00000070   0x0699             LSLS     R1,R3,#+26       ;; ZeroExtS R1,R3,#+26,#+26
   \   00000072   0x0E89             LSRS     R1,R1,#+26
   \   00000074   0x7041             STRB     R1,[R0, #+1]
    150            ptr->sec  = ((uint16)reg_seconds>>RTC_SECONDS_SEC_CNT_SHIFT)  & 0x3f;
   \   00000076   0x06A1             LSLS     R1,R4,#+26       ;; ZeroExtS R1,R4,#+26,#+26
   \   00000078   0x0E89             LSRS     R1,R1,#+26
   \   0000007A   0x7001             STRB     R1,[R0, #+0]
    151          }
   \   0000007C   0xBD70             POP      {R4-R6,PC}       ;; return
    152          

   \                                 In section .text, align 2, keep-with-next
    153          void IRTC_SetClock (tTIME *ptr)
    154          {
   \                     IRTC_SetClock: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    155            register int16 tmp = ptr->year - BASE_YEAR;
   \   00000002   0x88C1             LDRH     R1,[R0, #+6]
   \   00000004   0x2284             MOVS     R2,#+132
   \   00000006   0x0112             LSLS     R2,R2,#+4        ;; #+2112
   \   00000008   0x1A89             SUBS     R1,R1,R2
   \   0000000A   0xE002             B        ??IRTC_SetClock_0
    156          
    157            IRTC_LockUnlock();
   \                     ??IRTC_SetClock_1: (+1)
   \   0000000C   0x2280             MOVS     R2,#+128
   \   0000000E   0x....             LDR      R3,??DataTable6_11  ;; 0x40050012
   \   00000010   0x701A             STRB     R2,[R3, #+0]
   \                     ??IRTC_SetClock_0: (+1)
   \   00000012   0x....             LDR      R2,??DataTable6_11  ;; 0x40050012
   \   00000014   0x8812             LDRH     R2,[R2, #+0]
   \   00000016   0x0792             LSLS     R2,R2,#+30
   \   00000018   0xD5F8             BPL      ??IRTC_SetClock_1
   \                     ??IRTC_SetClock_2: (+1)
   \   0000001A   0x....             LDR      R2,??DataTable6_11  ;; 0x40050012
   \   0000001C   0x8812             LDRH     R2,[R2, #+0]
   \   0000001E   0x0792             LSLS     R2,R2,#+30
   \   00000020   0xD50C             BPL      ??IRTC_SetClock_3
   \   00000022   0x2200             MOVS     R2,#+0
   \   00000024   0x....             LDR      R3,??DataTable6_11  ;; 0x40050012
   \   00000026   0x701A             STRB     R2,[R3, #+0]
   \   00000028   0x2240             MOVS     R2,#+64
   \   0000002A   0x....             LDR      R3,??DataTable6_11  ;; 0x40050012
   \   0000002C   0x701A             STRB     R2,[R3, #+0]
   \   0000002E   0x22C0             MOVS     R2,#+192
   \   00000030   0x....             LDR      R3,??DataTable6_11  ;; 0x40050012
   \   00000032   0x701A             STRB     R2,[R3, #+0]
   \   00000034   0x2280             MOVS     R2,#+128
   \   00000036   0x....             LDR      R3,??DataTable6_11  ;; 0x40050012
   \   00000038   0x701A             STRB     R2,[R3, #+0]
   \   0000003A   0xE7EE             B        ??IRTC_SetClock_2
    158            while (1)
    159            {
    160              if (RTC_STATUS & RTC_STATUS_INVAL_BIT_MASK) { continue; }
   \                     ??IRTC_SetClock_4: (+1)
   \                     ??IRTC_SetClock_3: (+1)
   \   0000003C   0x....             LDR      R2,??DataTable6_11  ;; 0x40050012
   \   0000003E   0x8812             LDRH     R2,[R2, #+0]
   \   00000040   0x07D2             LSLS     R2,R2,#+31
   \   00000042   0xD4FB             BMI      ??IRTC_SetClock_4
    161              RTC_YEARMON = RTC_YEARMON_YROFST(tmp)|RTC_YEARMON_MON_CNT(ptr->mon);
   \   00000044   0x020A             LSLS     R2,R1,#+8
   \   00000046   0x7943             LDRB     R3,[R0, #+5]
   \   00000048   0x071B             LSLS     R3,R3,#+28       ;; ZeroExtS R3,R3,#+28,#+28
   \   0000004A   0x0F1B             LSRS     R3,R3,#+28
   \   0000004C   0x4313             ORRS     R3,R3,R2
   \   0000004E   0x....             LDR      R2,??DataTable6_12  ;; 0x40050000
   \   00000050   0x8013             STRH     R3,[R2, #+0]
    162              if (RTC_STATUS & RTC_STATUS_INVAL_BIT_MASK) { continue; }
   \   00000052   0x....             LDR      R2,??DataTable6_11  ;; 0x40050012
   \   00000054   0x8812             LDRH     R2,[R2, #+0]
   \   00000056   0x07D2             LSLS     R2,R2,#+31
   \   00000058   0xD4F0             BMI      ??IRTC_SetClock_3
    163              RTC_DAYS    = RTC_DAYS_DAY_CNT(ptr->day)|RTC_DAYS_DOW(ptr->wday);
   \                     ??IRTC_SetClock_5: (+1)
   \   0000005A   0x78C2             LDRB     R2,[R0, #+3]
   \   0000005C   0x06D2             LSLS     R2,R2,#+27       ;; ZeroExtS R2,R2,#+27,#+27
   \   0000005E   0x0ED2             LSRS     R2,R2,#+27
   \   00000060   0x7903             LDRB     R3,[R0, #+4]
   \   00000062   0x021B             LSLS     R3,R3,#+8
   \   00000064   0x24E0             MOVS     R4,#+224
   \   00000066   0x00E4             LSLS     R4,R4,#+3        ;; #+1792
   \   00000068   0x401C             ANDS     R4,R4,R3
   \   0000006A   0x4314             ORRS     R4,R4,R2
   \   0000006C   0x....             LDR      R2,??DataTable6_13  ;; 0x40050002
   \   0000006E   0x8014             STRH     R4,[R2, #+0]
    164              if (RTC_STATUS & RTC_STATUS_INVAL_BIT_MASK) { continue; }
   \   00000070   0x....             LDR      R2,??DataTable6_11  ;; 0x40050012
   \   00000072   0x8812             LDRH     R2,[R2, #+0]
   \   00000074   0x07D2             LSLS     R2,R2,#+31
   \   00000076   0xD4E1             BMI      ??IRTC_SetClock_3
    165              RTC_HOURMIN = RTC_HOURMIN_HOUR_CNT(ptr->hour)|RTC_HOURMIN_MIN_CNT(ptr->min);
   \                     ??IRTC_SetClock_6: (+1)
   \   00000078   0x7882             LDRB     R2,[R0, #+2]
   \   0000007A   0x0212             LSLS     R2,R2,#+8
   \   0000007C   0x23F8             MOVS     R3,#+248
   \   0000007E   0x015B             LSLS     R3,R3,#+5        ;; #+7936
   \   00000080   0x4013             ANDS     R3,R3,R2
   \   00000082   0x7842             LDRB     R2,[R0, #+1]
   \   00000084   0x0692             LSLS     R2,R2,#+26       ;; ZeroExtS R2,R2,#+26,#+26
   \   00000086   0x0E92             LSRS     R2,R2,#+26
   \   00000088   0x431A             ORRS     R2,R2,R3
   \   0000008A   0x....             LDR      R3,??DataTable6_14  ;; 0x40050004
   \   0000008C   0x801A             STRH     R2,[R3, #+0]
    166              if (RTC_STATUS & RTC_STATUS_INVAL_BIT_MASK) { continue; }
   \   0000008E   0x....             LDR      R2,??DataTable6_11  ;; 0x40050012
   \   00000090   0x8812             LDRH     R2,[R2, #+0]
   \   00000092   0x07D2             LSLS     R2,R2,#+31
   \   00000094   0xD4D2             BMI      ??IRTC_SetClock_3
    167              RTC_SECONDS = RTC_SECONDS_SEC_CNT(ptr->sec);
   \                     ??IRTC_SetClock_7: (+1)
   \   00000096   0x7802             LDRB     R2,[R0, #+0]
   \   00000098   0x0692             LSLS     R2,R2,#+26       ;; ZeroExtS R2,R2,#+26,#+26
   \   0000009A   0x0E92             LSRS     R2,R2,#+26
   \   0000009C   0x....             LDR      R3,??DataTable6_15  ;; 0x40050006
   \   0000009E   0x801A             STRH     R2,[R3, #+0]
    168              if (RTC_STATUS & RTC_STATUS_INVAL_BIT_MASK) { continue; }
   \   000000A0   0x....             LDR      R2,??DataTable6_11  ;; 0x40050012
   \   000000A2   0x8812             LDRH     R2,[R2, #+0]
   \   000000A4   0x07D2             LSLS     R2,R2,#+31
   \   000000A6   0xD4C9             BMI      ??IRTC_SetClock_3
    169              break;
    170            }
    171          }
   \                     ??IRTC_SetClock_8: (+1)
   \   000000A8   0xBD10             POP      {R4,PC}          ;; return
    172          

   \                                 In section .text, align 2, keep-with-next
    173          void IRTC_WrRam (void *src, uint8 size)
    174          {
   \                     IRTC_WrRam: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    175            register uint8 *ps = src, *pd=(uint8*)IRTC_Ram;
   \   00000002   0x....             LDR      R2,??DataTable6_16  ;; 0x40051000
    176            if (size > sizeof(IRTC_Ram)) size = sizeof(IRTC_Ram);
   \   00000004   0xB2C9             UXTB     R1,R1
   \   00000006   0x2921             CMP      R1,#+33
   \   00000008   0xD304             BCC      ??IRTC_WrRam_0
   \   0000000A   0x2120             MOVS     R1,#+32
   \   0000000C   0xE002             B        ??IRTC_WrRam_0
    177            IRTC_LockUnlock();
   \                     ??IRTC_WrRam_1: (+1)
   \   0000000E   0x2380             MOVS     R3,#+128
   \   00000010   0x....             LDR      R4,??DataTable7  ;; 0x40050012
   \   00000012   0x7023             STRB     R3,[R4, #+0]
   \                     ??IRTC_WrRam_0: (+1)
   \   00000014   0x....             LDR      R3,??DataTable7  ;; 0x40050012
   \   00000016   0x881B             LDRH     R3,[R3, #+0]
   \   00000018   0x079B             LSLS     R3,R3,#+30
   \   0000001A   0xD5F8             BPL      ??IRTC_WrRam_1
   \                     ??IRTC_WrRam_2: (+1)
   \   0000001C   0x....             LDR      R3,??DataTable7  ;; 0x40050012
   \   0000001E   0x881B             LDRH     R3,[R3, #+0]
   \   00000020   0x079B             LSLS     R3,R3,#+30
   \   00000022   0xD510             BPL      ??IRTC_WrRam_3
   \   00000024   0x2300             MOVS     R3,#+0
   \   00000026   0x....             LDR      R4,??DataTable7  ;; 0x40050012
   \   00000028   0x7023             STRB     R3,[R4, #+0]
   \   0000002A   0x2340             MOVS     R3,#+64
   \   0000002C   0x....             LDR      R4,??DataTable7  ;; 0x40050012
   \   0000002E   0x7023             STRB     R3,[R4, #+0]
   \   00000030   0x23C0             MOVS     R3,#+192
   \   00000032   0x....             LDR      R4,??DataTable7  ;; 0x40050012
   \   00000034   0x7023             STRB     R3,[R4, #+0]
   \   00000036   0x2380             MOVS     R3,#+128
   \   00000038   0x....             LDR      R4,??DataTable7  ;; 0x40050012
   \   0000003A   0x7023             STRB     R3,[R4, #+0]
   \   0000003C   0xE7EE             B        ??IRTC_WrRam_2
    178            while (size--) *pd++ = *ps++;
   \                     ??IRTC_WrRam_4: (+1)
   \   0000003E   0x7803             LDRB     R3,[R0, #+0]
   \   00000040   0x7013             STRB     R3,[R2, #+0]
   \   00000042   0x1C40             ADDS     R0,R0,#+1
   \   00000044   0x1C52             ADDS     R2,R2,#+1
   \                     ??IRTC_WrRam_3: (+1)
   \   00000046   0x000B             MOVS     R3,R1
   \   00000048   0x1E59             SUBS     R1,R3,#+1
   \   0000004A   0xB2DB             UXTB     R3,R3
   \   0000004C   0x2B00             CMP      R3,#+0
   \   0000004E   0xD1F6             BNE      ??IRTC_WrRam_4
    179          }
   \   00000050   0xBD10             POP      {R4,PC}          ;; return
   \   00000052                      REQUIRE IRTC_Ram
    180          

   \                                 In section .text, align 2, keep-with-next
    181          void IRTC_RdRam (void *dst, uint8 size)
    182          {
   \                     IRTC_RdRam: (+1)
   \   00000000   0xB500             PUSH     {LR}
    183            register uint8 *pd = dst, *ps=(uint8*)IRTC_Ram;
   \   00000002   0x....             LDR      R2,??DataTable6_16  ;; 0x40051000
    184            if (size > sizeof(IRTC_Ram)) size = sizeof(IRTC_Ram);
   \   00000004   0xB2C9             UXTB     R1,R1
   \   00000006   0x2921             CMP      R1,#+33
   \   00000008   0xD305             BCC      ??IRTC_RdRam_0
   \   0000000A   0x2120             MOVS     R1,#+32
   \   0000000C   0xE003             B        ??IRTC_RdRam_0
    185            while (size--) *pd++ = *ps++;
   \                     ??IRTC_RdRam_1: (+1)
   \   0000000E   0x7813             LDRB     R3,[R2, #+0]
   \   00000010   0x7003             STRB     R3,[R0, #+0]
   \   00000012   0x1C52             ADDS     R2,R2,#+1
   \   00000014   0x1C40             ADDS     R0,R0,#+1
   \                     ??IRTC_RdRam_0: (+1)
   \   00000016   0x000B             MOVS     R3,R1
   \   00000018   0x1E59             SUBS     R1,R3,#+1
   \   0000001A   0xB2DB             UXTB     R3,R3
   \   0000001C   0x2B00             CMP      R3,#+0
   \   0000001E   0xD1F6             BNE      ??IRTC_RdRam_1
    186          }
   \   00000020   0xBD00             POP      {PC}             ;; return
   \   00000022                      REQUIRE IRTC_Ram
    187          
    188          /******************************************************************************
    189           * interrupt function definitions                                             *
    190           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    191          weak void irtc_isr (void)
    192          {
   \                     irtc_isr: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    193            static tTAMPER_LOG tmp;
    194            register uint16    reg_ier, reg_tamper_scr, reg_isr;
    195          
    196            /* read RTC registers and store their values in variables - we're loading   */
    197            /* variables by content of registers to minimize number of read operations  */
    198            reg_ier = RTC_IER; reg_tamper_scr = RTC_TAMPER_SCR; reg_isr = RTC_ISR;
   \   00000002   0x....             LDR      R0,??DataTable7_1  ;; 0x40050016
   \   00000004   0x8804             LDRH     R4,[R0, #+0]
   \   00000006   0x....             LDR      R0,??DataTable7_2  ;; 0x40050032
   \   00000008   0x8806             LDRH     R6,[R0, #+0]
   \   0000000A   0x....             LDR      R0,??DataTable7_3  ;; 0x40050014
   \   0000000C   0x8805             LDRH     R5,[R0, #+0]
   \   0000000E   0xE002             B        ??irtc_isr_0
    199          
    200            IRTC_LockUnlock();
   \                     ??irtc_isr_1: (+1)
   \   00000010   0x2080             MOVS     R0,#+128
   \   00000012   0x....             LDR      R1,??DataTable7  ;; 0x40050012
   \   00000014   0x7008             STRB     R0,[R1, #+0]
   \                     ??irtc_isr_0: (+1)
   \   00000016   0x....             LDR      R0,??DataTable7  ;; 0x40050012
   \   00000018   0x8800             LDRH     R0,[R0, #+0]
   \   0000001A   0x0780             LSLS     R0,R0,#+30
   \   0000001C   0xD5F8             BPL      ??irtc_isr_1
   \                     ??irtc_isr_2: (+1)
   \   0000001E   0x....             LDR      R0,??DataTable7  ;; 0x40050012
   \   00000020   0x8800             LDRH     R0,[R0, #+0]
   \   00000022   0x0780             LSLS     R0,R0,#+30
   \   00000024   0xD50C             BPL      ??irtc_isr_3
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x....             LDR      R1,??DataTable7  ;; 0x40050012
   \   0000002A   0x7008             STRB     R0,[R1, #+0]
   \   0000002C   0x2040             MOVS     R0,#+64
   \   0000002E   0x....             LDR      R1,??DataTable7  ;; 0x40050012
   \   00000030   0x7008             STRB     R0,[R1, #+0]
   \   00000032   0x20C0             MOVS     R0,#+192
   \   00000034   0x....             LDR      R1,??DataTable7  ;; 0x40050012
   \   00000036   0x7008             STRB     R0,[R1, #+0]
   \   00000038   0x2080             MOVS     R0,#+128
   \   0000003A   0x....             LDR      R1,??DataTable7  ;; 0x40050012
   \   0000003C   0x7008             STRB     R0,[R1, #+0]
   \   0000003E   0xE7EE             B        ??irtc_isr_2
    201            IRTC_GetClock  ((tTIME*)&tmp.time);
   \                     ??irtc_isr_3: (+1)
   \   00000040   0x....             LDR      R0,??DataTable7_4
   \   00000042   0x.... 0x....      BL       IRTC_GetClock
    202            /* TAMPER pin callback processing                                           */
    203            if(reg_ier & RTC_IER_TAMPER_IE_MASK)
   \   00000046   0x07E0             LSLS     R0,R4,#+31
   \   00000048   0xD540             BPL      ??irtc_isr_4
    204            {
    205              /* TAMPER0 pin                                                            */
    206              if((reg_tamper_scr & RTC_TAMPER_SCR_TMPR_EN (TAMPER0_PIN)) &&
    207                 (reg_tamper_scr & RTC_TAMPER_SCR_TMPR_STS(TAMPER0_PIN)))
   \   0000004A   0x20FF             MOVS     R0,#+255
   \   0000004C   0x1C80             ADDS     R0,R0,#+2        ;; #+257
   \   0000004E   0x4030             ANDS     R0,R0,R6
   \   00000050   0x21FF             MOVS     R1,#+255
   \   00000052   0x1C89             ADDS     R1,R1,#+2        ;; #+257
   \   00000054   0x4288             CMP      R0,R1
   \   00000056   0xD10F             BNE      ??irtc_isr_5
    208              {
    209                tmp.source = TAMPER0_PIN;
   \   00000058   0x2001             MOVS     R0,#+1
   \   0000005A   0x....             LDR      R1,??DataTable7_4
   \   0000005C   0x7208             STRB     R0,[R1, #+8]
    210                RTC_TAMPER_SCR = RTC_TAMPER_SCR_TMPR_STS(TAMPER0_PIN)|(reg_tamper_scr&0xf);
   \   0000005E   0xB2B6             UXTH     R6,R6
   \   00000060   0x0730             LSLS     R0,R6,#+28       ;; ZeroExtS R0,R6,#+28,#+28
   \   00000062   0x0F00             LSRS     R0,R0,#+28
   \   00000064   0x2180             MOVS     R1,#+128
   \   00000066   0x0049             LSLS     R1,R1,#+1        ;; #+256
   \   00000068   0x4301             ORRS     R1,R1,R0
   \   0000006A   0x....             LDR      R0,??DataTable7_2  ;; 0x40050032
   \   0000006C   0x8001             STRH     R1,[R0, #+0]
    211                pCallbackIRTC(IRTC_TAMPER0_CALLBACK, (tTAMPER_LOG*)&tmp);
   \   0000006E   0x....             LDR      R1,??DataTable7_4
   \   00000070   0x2001             MOVS     R0,#+1
   \   00000072   0x....             LDR      R2,??DataTable7_5
   \   00000074   0x6812             LDR      R2,[R2, #+0]
   \   00000076   0x4790             BLX      R2
    212              }
    213              /* TAMPER1 pin                                                            */
    214              if((reg_tamper_scr & RTC_TAMPER_SCR_TMPR_EN (TAMPER1_PIN)) &&
    215                 (reg_tamper_scr & RTC_TAMPER_SCR_TMPR_STS(TAMPER1_PIN)))
   \                     ??irtc_isr_5: (+1)
   \   00000078   0x....             LDR      R0,??DataTable7_6  ;; 0x202
   \   0000007A   0x4030             ANDS     R0,R0,R6
   \   0000007C   0x....             LDR      R1,??DataTable7_6  ;; 0x202
   \   0000007E   0x4288             CMP      R0,R1
   \   00000080   0xD10F             BNE      ??irtc_isr_6
    216              {
    217                tmp.source = TAMPER1_PIN;
   \   00000082   0x2002             MOVS     R0,#+2
   \   00000084   0x....             LDR      R1,??DataTable7_4
   \   00000086   0x7208             STRB     R0,[R1, #+8]
    218                RTC_TAMPER_SCR = RTC_TAMPER_SCR_TMPR_STS(TAMPER1_PIN)|(reg_tamper_scr&0xf);
   \   00000088   0xB2B6             UXTH     R6,R6
   \   0000008A   0x0730             LSLS     R0,R6,#+28       ;; ZeroExtS R0,R6,#+28,#+28
   \   0000008C   0x0F00             LSRS     R0,R0,#+28
   \   0000008E   0x2180             MOVS     R1,#+128
   \   00000090   0x0089             LSLS     R1,R1,#+2        ;; #+512
   \   00000092   0x4301             ORRS     R1,R1,R0
   \   00000094   0x....             LDR      R0,??DataTable7_2  ;; 0x40050032
   \   00000096   0x8001             STRH     R1,[R0, #+0]
    219                pCallbackIRTC(IRTC_TAMPER1_CALLBACK, (tTAMPER_LOG*)&tmp);
   \   00000098   0x....             LDR      R1,??DataTable7_4
   \   0000009A   0x2002             MOVS     R0,#+2
   \   0000009C   0x....             LDR      R2,??DataTable7_5
   \   0000009E   0x6812             LDR      R2,[R2, #+0]
   \   000000A0   0x4790             BLX      R2
    220              }
    221              /* TAMPER2 pin                                                            */
    222              if((reg_tamper_scr & RTC_TAMPER_SCR_TMPR_EN (TAMPER2_PIN)) &&
    223                 (reg_tamper_scr & RTC_TAMPER_SCR_TMPR_STS(TAMPER2_PIN)))
   \                     ??irtc_isr_6: (+1)
   \   000000A2   0x....             LDR      R0,??DataTable7_7  ;; 0x404
   \   000000A4   0x4030             ANDS     R0,R0,R6
   \   000000A6   0x....             LDR      R1,??DataTable7_7  ;; 0x404
   \   000000A8   0x4288             CMP      R0,R1
   \   000000AA   0xD10F             BNE      ??irtc_isr_4
    224              {
    225                tmp.source = TAMPER2_PIN;
   \   000000AC   0x2004             MOVS     R0,#+4
   \   000000AE   0x....             LDR      R1,??DataTable7_4
   \   000000B0   0x7208             STRB     R0,[R1, #+8]
    226                RTC_TAMPER_SCR = RTC_TAMPER_SCR_TMPR_STS(TAMPER2_PIN)|(reg_tamper_scr&0xf);
   \   000000B2   0xB2B6             UXTH     R6,R6
   \   000000B4   0x0730             LSLS     R0,R6,#+28       ;; ZeroExtS R0,R6,#+28,#+28
   \   000000B6   0x0F00             LSRS     R0,R0,#+28
   \   000000B8   0x2180             MOVS     R1,#+128
   \   000000BA   0x00C9             LSLS     R1,R1,#+3        ;; #+1024
   \   000000BC   0x4301             ORRS     R1,R1,R0
   \   000000BE   0x....             LDR      R0,??DataTable7_2  ;; 0x40050032
   \   000000C0   0x8001             STRH     R1,[R0, #+0]
    227                pCallbackIRTC(IRTC_TAMPER2_CALLBACK, (tTAMPER_LOG*)&tmp);
   \   000000C2   0x....             LDR      R1,??DataTable7_4
   \   000000C4   0x2004             MOVS     R0,#+4
   \   000000C6   0x....             LDR      R2,??DataTable7_5
   \   000000C8   0x6812             LDR      R2,[R2, #+0]
   \   000000CA   0x4790             BLX      R2
    228              }
    229            }
    230            /* ALARM callback processing                                                */
    231            if((reg_ier & RTC_IER_ALM_IE_MASK) && (reg_isr & RTC_ISR_ALM_IS_MASK))
   \                     ??irtc_isr_4: (+1)
   \   000000CC   0x0760             LSLS     R0,R4,#+29
   \   000000CE   0xD509             BPL      ??irtc_isr_7
   \   000000D0   0x0768             LSLS     R0,R5,#+29
   \   000000D2   0xD507             BPL      ??irtc_isr_7
    232            {
    233              RTC_ISR = RTC_ISR_ALM_IS_MASK;
   \   000000D4   0x2004             MOVS     R0,#+4
   \   000000D6   0x....             LDR      R1,??DataTable7_3  ;; 0x40050014
   \   000000D8   0x8008             STRH     R0,[R1, #+0]
    234              pCallbackIRTC(IRTC_ALM_CALLBACK, (tTIME*)&tmp.time);
   \   000000DA   0x....             LDR      R1,??DataTable7_4
   \   000000DC   0x2010             MOVS     R0,#+16
   \   000000DE   0x....             LDR      R2,??DataTable7_5
   \   000000E0   0x6812             LDR      R2,[R2, #+0]
   \   000000E2   0x4790             BLX      R2
    235            }
    236            /* DAY callback processing                                                  */
    237            if((reg_ier & RTC_IER_DAY_IE_MASK) && (reg_isr & RTC_ISR_DAY_IS_MASK))
   \                     ??irtc_isr_7: (+1)
   \   000000E4   0x0720             LSLS     R0,R4,#+28
   \   000000E6   0xD509             BPL      ??irtc_isr_8
   \   000000E8   0x0728             LSLS     R0,R5,#+28
   \   000000EA   0xD507             BPL      ??irtc_isr_8
    238            {
    239              RTC_ISR = RTC_ISR_DAY_IS_MASK;
   \   000000EC   0x2008             MOVS     R0,#+8
   \   000000EE   0x....             LDR      R1,??DataTable7_3  ;; 0x40050014
   \   000000F0   0x8008             STRH     R0,[R1, #+0]
    240              pCallbackIRTC(IRTC_DAY_CALLBACK, (tTIME*)&tmp.time);
   \   000000F2   0x....             LDR      R1,??DataTable7_4
   \   000000F4   0x2020             MOVS     R0,#+32
   \   000000F6   0x....             LDR      R2,??DataTable7_5
   \   000000F8   0x6812             LDR      R2,[R2, #+0]
   \   000000FA   0x4790             BLX      R2
    241            }
    242            /* HOUR callback processing                                                 */
    243            if((reg_ier & RTC_IER_HOUR_IE_MASK) && (reg_isr & RTC_ISR_HOUR_IS_MASK))
   \                     ??irtc_isr_8: (+1)
   \   000000FC   0x06E0             LSLS     R0,R4,#+27
   \   000000FE   0xD509             BPL      ??irtc_isr_9
   \   00000100   0x06E8             LSLS     R0,R5,#+27
   \   00000102   0xD507             BPL      ??irtc_isr_9
    244            {
    245              RTC_ISR = RTC_ISR_HOUR_IS_MASK;
   \   00000104   0x2010             MOVS     R0,#+16
   \   00000106   0x....             LDR      R1,??DataTable7_3  ;; 0x40050014
   \   00000108   0x8008             STRH     R0,[R1, #+0]
    246              pCallbackIRTC(IRTC_HOUR_CALLBACK, (tTIME*)&tmp.time);
   \   0000010A   0x....             LDR      R1,??DataTable7_4
   \   0000010C   0x2040             MOVS     R0,#+64
   \   0000010E   0x....             LDR      R2,??DataTable7_5
   \   00000110   0x6812             LDR      R2,[R2, #+0]
   \   00000112   0x4790             BLX      R2
    247            }
    248            /* MIN callback processing                                                  */
    249            if((reg_ier & RTC_IER_MIN_IE_MASK) && (reg_isr & RTC_ISR_MIN_IS_MASK))
   \                     ??irtc_isr_9: (+1)
   \   00000114   0x06A0             LSLS     R0,R4,#+26
   \   00000116   0xD509             BPL      ??irtc_isr_10
   \   00000118   0x06A8             LSLS     R0,R5,#+26
   \   0000011A   0xD507             BPL      ??irtc_isr_10
    250            {
    251              RTC_ISR = RTC_ISR_MIN_IS_MASK;
   \   0000011C   0x2020             MOVS     R0,#+32
   \   0000011E   0x....             LDR      R1,??DataTable7_3  ;; 0x40050014
   \   00000120   0x8008             STRH     R0,[R1, #+0]
    252              pCallbackIRTC(IRTC_MIN_CALLBACK, (tTIME*)&tmp.time);
   \   00000122   0x....             LDR      R1,??DataTable7_4
   \   00000124   0x2080             MOVS     R0,#+128
   \   00000126   0x....             LDR      R2,??DataTable7_5
   \   00000128   0x6812             LDR      R2,[R2, #+0]
   \   0000012A   0x4790             BLX      R2
    253            }
    254            /* 1HZ callback processing                                                  */
    255            if((reg_ier & RTC_IER_IE_1HZ_MASK) && (reg_isr & RTC_ISR_IS_1HZ_MASK))
   \                     ??irtc_isr_10: (+1)
   \   0000012C   0x0660             LSLS     R0,R4,#+25
   \   0000012E   0xD50A             BPL      ??irtc_isr_11
   \   00000130   0x0668             LSLS     R0,R5,#+25
   \   00000132   0xD508             BPL      ??irtc_isr_11
    256            {
    257              RTC_ISR = RTC_ISR_IS_1HZ_MASK;
   \   00000134   0x2040             MOVS     R0,#+64
   \   00000136   0x....             LDR      R1,??DataTable7_3  ;; 0x40050014
   \   00000138   0x8008             STRH     R0,[R1, #+0]
    258              pCallbackIRTC(IRTC_1HZ_CALLBACK, (tTIME*)&tmp.time);
   \   0000013A   0x....             LDR      R1,??DataTable7_4
   \   0000013C   0x2080             MOVS     R0,#+128
   \   0000013E   0x0040             LSLS     R0,R0,#+1        ;; #+256
   \   00000140   0x....             LDR      R2,??DataTable7_5
   \   00000142   0x6812             LDR      R2,[R2, #+0]
   \   00000144   0x4790             BLX      R2
    259            }
    260            /* 2HZ callback processing                                                  */
    261            if((reg_ier & RTC_IER_IE_2HZ_MASK) && (reg_isr & RTC_ISR_IS_2HZ_MASK))
   \                     ??irtc_isr_11: (+1)
   \   00000146   0x0620             LSLS     R0,R4,#+24
   \   00000148   0xD50A             BPL      ??irtc_isr_12
   \   0000014A   0x0628             LSLS     R0,R5,#+24
   \   0000014C   0xD508             BPL      ??irtc_isr_12
    262            {
    263              RTC_ISR = RTC_ISR_IS_2HZ_MASK;
   \   0000014E   0x2080             MOVS     R0,#+128
   \   00000150   0x....             LDR      R1,??DataTable7_3  ;; 0x40050014
   \   00000152   0x8008             STRH     R0,[R1, #+0]
    264              pCallbackIRTC(IRTC_2HZ_CALLBACK, (tTIME*)&tmp.time);
   \   00000154   0x....             LDR      R1,??DataTable7_4
   \   00000156   0x2080             MOVS     R0,#+128
   \   00000158   0x0080             LSLS     R0,R0,#+2        ;; #+512
   \   0000015A   0x....             LDR      R2,??DataTable7_5
   \   0000015C   0x6812             LDR      R2,[R2, #+0]
   \   0000015E   0x4790             BLX      R2
    265            }
    266            /* 4HZ callback processing                                                  */
    267            if((reg_ier & RTC_IER_IE_4HZ_MASK) && (reg_isr & RTC_ISR_IS_4HZ_MASK))
   \                     ??irtc_isr_12: (+1)
   \   00000160   0x05E0             LSLS     R0,R4,#+23
   \   00000162   0xD50B             BPL      ??irtc_isr_13
   \   00000164   0x05E8             LSLS     R0,R5,#+23
   \   00000166   0xD509             BPL      ??irtc_isr_13
    268            {
    269              RTC_ISR = RTC_ISR_IS_4HZ_MASK;
   \   00000168   0x2080             MOVS     R0,#+128
   \   0000016A   0x0040             LSLS     R0,R0,#+1        ;; #+256
   \   0000016C   0x....             LDR      R1,??DataTable7_3  ;; 0x40050014
   \   0000016E   0x8008             STRH     R0,[R1, #+0]
    270              pCallbackIRTC(IRTC_4HZ_CALLBACK, (tTIME*)&tmp.time);
   \   00000170   0x....             LDR      R1,??DataTable7_4
   \   00000172   0x2080             MOVS     R0,#+128
   \   00000174   0x00C0             LSLS     R0,R0,#+3        ;; #+1024
   \   00000176   0x....             LDR      R2,??DataTable7_5
   \   00000178   0x6812             LDR      R2,[R2, #+0]
   \   0000017A   0x4790             BLX      R2
    271            }
    272            /* 8HZ callback processing                                                  */
    273            if((reg_ier & RTC_IER_IE_8HZ_MASK) && (reg_isr & RTC_ISR_IS_8HZ_MASK))
   \                     ??irtc_isr_13: (+1)
   \   0000017C   0x05A0             LSLS     R0,R4,#+22
   \   0000017E   0xD50B             BPL      ??irtc_isr_14
   \   00000180   0x05A8             LSLS     R0,R5,#+22
   \   00000182   0xD509             BPL      ??irtc_isr_14
    274            {
    275              RTC_ISR = RTC_ISR_IS_8HZ_MASK;
   \   00000184   0x2080             MOVS     R0,#+128
   \   00000186   0x0080             LSLS     R0,R0,#+2        ;; #+512
   \   00000188   0x....             LDR      R1,??DataTable7_3  ;; 0x40050014
   \   0000018A   0x8008             STRH     R0,[R1, #+0]
    276              pCallbackIRTC(IRTC_8HZ_CALLBACK, (tTIME*)&tmp.time);
   \   0000018C   0x....             LDR      R1,??DataTable7_4
   \   0000018E   0x2080             MOVS     R0,#+128
   \   00000190   0x0100             LSLS     R0,R0,#+4        ;; #+2048
   \   00000192   0x....             LDR      R2,??DataTable7_5
   \   00000194   0x6812             LDR      R2,[R2, #+0]
   \   00000196   0x4790             BLX      R2
    277            }
    278            /* 16HZ callback processing                                                 */
    279            if((reg_ier & RTC_IER_IE_16HZ_MASK) && (reg_isr & RTC_ISR_IS_16HZ_MASK))
   \                     ??irtc_isr_14: (+1)
   \   00000198   0x0560             LSLS     R0,R4,#+21
   \   0000019A   0xD50B             BPL      ??irtc_isr_15
   \   0000019C   0x0568             LSLS     R0,R5,#+21
   \   0000019E   0xD509             BPL      ??irtc_isr_15
    280            {
    281              RTC_ISR = RTC_ISR_IS_16HZ_MASK;
   \   000001A0   0x2080             MOVS     R0,#+128
   \   000001A2   0x00C0             LSLS     R0,R0,#+3        ;; #+1024
   \   000001A4   0x....             LDR      R1,??DataTable7_3  ;; 0x40050014
   \   000001A6   0x8008             STRH     R0,[R1, #+0]
    282              pCallbackIRTC(IRTC_16HZ_CALLBACK, (tTIME*)&tmp.time);
   \   000001A8   0x....             LDR      R1,??DataTable7_4
   \   000001AA   0x2080             MOVS     R0,#+128
   \   000001AC   0x0140             LSLS     R0,R0,#+5        ;; #+4096
   \   000001AE   0x....             LDR      R2,??DataTable7_5
   \   000001B0   0x6812             LDR      R2,[R2, #+0]
   \   000001B2   0x4790             BLX      R2
    283            }
    284            /* 32HZ callback processing                                                 */
    285            if((reg_ier & RTC_IER_IE_32HZ_MASK) && (reg_isr & RTC_ISR_IS_32HZ_MASK))
   \                     ??irtc_isr_15: (+1)
   \   000001B4   0x0520             LSLS     R0,R4,#+20
   \   000001B6   0xD50B             BPL      ??irtc_isr_16
   \   000001B8   0x0528             LSLS     R0,R5,#+20
   \   000001BA   0xD509             BPL      ??irtc_isr_16
    286            {
    287              RTC_ISR = RTC_ISR_IS_32HZ_MASK;
   \   000001BC   0x2080             MOVS     R0,#+128
   \   000001BE   0x0100             LSLS     R0,R0,#+4        ;; #+2048
   \   000001C0   0x....             LDR      R1,??DataTable7_3  ;; 0x40050014
   \   000001C2   0x8008             STRH     R0,[R1, #+0]
    288              pCallbackIRTC(IRTC_32HZ_CALLBACK, (tTIME*)&tmp.time);
   \   000001C4   0x....             LDR      R1,??DataTable7_4
   \   000001C6   0x2080             MOVS     R0,#+128
   \   000001C8   0x0180             LSLS     R0,R0,#+6        ;; #+8192
   \   000001CA   0x....             LDR      R2,??DataTable7_5
   \   000001CC   0x6812             LDR      R2,[R2, #+0]
   \   000001CE   0x4790             BLX      R2
    289            }
    290            /* 64HZ callback processing                                                 */
    291            if((reg_ier & RTC_IER_IE_64HZ_MASK) && (reg_isr & RTC_ISR_IS_64HZ_MASK))
   \                     ??irtc_isr_16: (+1)
   \   000001D0   0x04E0             LSLS     R0,R4,#+19
   \   000001D2   0xD50B             BPL      ??irtc_isr_17
   \   000001D4   0x04E8             LSLS     R0,R5,#+19
   \   000001D6   0xD509             BPL      ??irtc_isr_17
    292            {
    293              RTC_ISR = RTC_ISR_IS_64HZ_MASK;
   \   000001D8   0x2080             MOVS     R0,#+128
   \   000001DA   0x0140             LSLS     R0,R0,#+5        ;; #+4096
   \   000001DC   0x....             LDR      R1,??DataTable7_3  ;; 0x40050014
   \   000001DE   0x8008             STRH     R0,[R1, #+0]
    294              pCallbackIRTC(IRTC_64HZ_CALLBACK, (tTIME*)&tmp.time);
   \   000001E0   0x....             LDR      R1,??DataTable7_4
   \   000001E2   0x2080             MOVS     R0,#+128
   \   000001E4   0x01C0             LSLS     R0,R0,#+7        ;; #+16384
   \   000001E6   0x....             LDR      R2,??DataTable7_5
   \   000001E8   0x6812             LDR      R2,[R2, #+0]
   \   000001EA   0x4790             BLX      R2
    295            }
    296            /* 128HZ callback processing                                                */
    297            if((reg_ier & RTC_IER_IE_128HZ_MASK) && (reg_isr & RTC_ISR_IS_128HZ_MASK))
   \                     ??irtc_isr_17: (+1)
   \   000001EC   0x04A0             LSLS     R0,R4,#+18
   \   000001EE   0xD50B             BPL      ??irtc_isr_18
   \   000001F0   0x04A8             LSLS     R0,R5,#+18
   \   000001F2   0xD509             BPL      ??irtc_isr_18
    298            {
    299              RTC_ISR = RTC_ISR_IS_128HZ_MASK;
   \   000001F4   0x2080             MOVS     R0,#+128
   \   000001F6   0x0180             LSLS     R0,R0,#+6        ;; #+8192
   \   000001F8   0x....             LDR      R1,??DataTable7_3  ;; 0x40050014
   \   000001FA   0x8008             STRH     R0,[R1, #+0]
    300              pCallbackIRTC(IRTC_128HZ_CALLBACK, (tTIME*)&tmp.time);
   \   000001FC   0x....             LDR      R1,??DataTable7_4
   \   000001FE   0x2080             MOVS     R0,#+128
   \   00000200   0x0200             LSLS     R0,R0,#+8        ;; #+32768
   \   00000202   0x....             LDR      R2,??DataTable7_5
   \   00000204   0x6812             LDR      R2,[R2, #+0]
   \   00000206   0x4790             BLX      R2
    301            }
    302            /* 256HZ callback processing                                                */
    303            if((reg_ier & RTC_IER_IE_256HZ_MASK) && (reg_isr & RTC_ISR_IS_256HZ_MASK))
   \                     ??irtc_isr_18: (+1)
   \   00000208   0x0460             LSLS     R0,R4,#+17
   \   0000020A   0xD50B             BPL      ??irtc_isr_19
   \   0000020C   0x0468             LSLS     R0,R5,#+17
   \   0000020E   0xD509             BPL      ??irtc_isr_19
    304            {
    305              RTC_ISR = RTC_ISR_IS_256HZ_MASK;
   \   00000210   0x2080             MOVS     R0,#+128
   \   00000212   0x01C0             LSLS     R0,R0,#+7        ;; #+16384
   \   00000214   0x....             LDR      R1,??DataTable7_3  ;; 0x40050014
   \   00000216   0x8008             STRH     R0,[R1, #+0]
    306              pCallbackIRTC(IRTC_256HZ_CALLBACK, (tTIME*)&tmp.time);
   \   00000218   0x....             LDR      R1,??DataTable7_4
   \   0000021A   0x2080             MOVS     R0,#+128
   \   0000021C   0x0240             LSLS     R0,R0,#+9        ;; #+65536
   \   0000021E   0x....             LDR      R2,??DataTable7_5
   \   00000220   0x6812             LDR      R2,[R2, #+0]
   \   00000222   0x4790             BLX      R2
    307            }
    308            /* 512HZ callback processing                                                */
    309            if((reg_ier & RTC_IER_IE_512HZ_MASK) && (reg_isr & RTC_ISR_IS_512HZ_MASK))
   \                     ??irtc_isr_19: (+1)
   \   00000224   0x0420             LSLS     R0,R4,#+16
   \   00000226   0xD50B             BPL      ??irtc_isr_20
   \   00000228   0x0428             LSLS     R0,R5,#+16
   \   0000022A   0xD509             BPL      ??irtc_isr_20
    310            {
    311              RTC_ISR = RTC_ISR_IS_512HZ_MASK;
   \   0000022C   0x2080             MOVS     R0,#+128
   \   0000022E   0x0200             LSLS     R0,R0,#+8        ;; #+32768
   \   00000230   0x....             LDR      R1,??DataTable7_3  ;; 0x40050014
   \   00000232   0x8008             STRH     R0,[R1, #+0]
    312              pCallbackIRTC(IRTC_512HZ_CALLBACK, (tTIME*)&tmp.time);
   \   00000234   0x....             LDR      R1,??DataTable7_4
   \   00000236   0x2080             MOVS     R0,#+128
   \   00000238   0x0280             LSLS     R0,R0,#+10       ;; #+131072
   \   0000023A   0x....             LDR      R2,??DataTable7_5
   \   0000023C   0x6812             LDR      R2,[R2, #+0]
   \   0000023E   0x4790             BLX      R2
    313            }
    314          }
   \                     ??irtc_isr_20: (+1)
   \   00000240   0xBD70             POP      {R4-R6,PC}       ;; return

   \                                 In section .bss, align 4
   \                     ??tmp:
   \   00000000                      DS8 12

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x........         DC32     pCallbackIRTC

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \   00000000   0xE000E280         DC32     0xe000e280

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_2:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0xE000E418         DC32     0xe000e418

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x40050012         DC32     0x40050012

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x40050032         DC32     0x40050032

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x0000FFF7         DC32     0xfff7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x00000F08         DC32     0xf08

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x0000FFFF         DC32     0xffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   0x40050014         DC32     0x40050014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \   00000000   0x44050032         DC32     0x44050032

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_8:
   \   00000000   0x44050016         DC32     0x44050016

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_9:
   \   00000000   0x48050032         DC32     0x48050032

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_10:
   \   00000000   0x48050016         DC32     0x48050016

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_11:
   \   00000000   0x40050010         DC32     0x40050010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_12:
   \   00000000   0x40050028         DC32     0x40050028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_13:
   \   00000000   0x4005002E         DC32     0x4005002e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_14:
   \   00000000   0x40050042         DC32     0x40050042

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_15:
   \   00000000   0x0000FF7F         DC32     0xff7f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_16:
   \   00000000   0x4005002C         DC32     0x4005002c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_17:
   \   00000000   0x40050034         DC32     0x40050034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_18:
   \   00000000   0x00000202         DC32     0x202

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_19:
   \   00000000   0x00000404         DC32     0x404

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_20:
   \   00000000   0x40050036         DC32     0x40050036

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x40050012         DC32     0x40050012

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x40050032         DC32     0x40050032

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x0000FFF7         DC32     0xfff7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x00000F08         DC32     0xf08

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x0000FFFF         DC32     0xffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x40050014         DC32     0x40050014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x44050032         DC32     0x44050032

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x44050016         DC32     0x44050016

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x48050032         DC32     0x48050032

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x48050016         DC32     0x48050016

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x40050010         DC32     0x40050010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x40050028         DC32     0x40050028

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x4005002E         DC32     0x4005002e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0x40050042         DC32     0x40050042

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   0x00000202         DC32     0x202

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \   00000000   0x4005002C         DC32     0x4005002c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_8:
   \   00000000   0x40050034         DC32     0x40050034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_9:
   \   00000000   0x00000404         DC32     0x404

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_10:
   \   00000000   0x40050036         DC32     0x40050036

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_11:
   \   00000000   0x40050012         DC32     0x40050012

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_12:
   \   00000000   0x40050000         DC32     0x40050000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_13:
   \   00000000   0x40050002         DC32     0x40050002

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_14:
   \   00000000   0x40050004         DC32     0x40050004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_15:
   \   00000000   0x40050006         DC32     0x40050006

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_16:
   \   00000000   0x40051000         DC32     0x40051000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x40050012         DC32     0x40050012

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x40050016         DC32     0x40050016

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x40050032         DC32     0x40050032

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x40050014         DC32     0x40050014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0x........         DC32     ??tmp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   0x........         DC32     pCallbackIRTC

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \   00000000   0x00000202         DC32     0x202

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \   00000000   0x00000404         DC32     0x404
    315          /******************************************************************************
    316           * End of module                                                              *
    317           ******************************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   IRTC_GetClock
      20   IRTC_Init
       4   IRTC_InstallCallback
       4   IRTC_RdRam
       8   IRTC_SetClock
      20   IRTC_WkupInit
       8   IRTC_WrRam
      16   irtc_isr
        16   -- Indirect call
        16   -> IRTC_GetClock


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       4  ??DataTable0_1
       4  ??DataTable0_2
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_10
       4  ??DataTable1_11
       4  ??DataTable1_12
       4  ??DataTable1_13
       4  ??DataTable1_14
       4  ??DataTable1_15
       4  ??DataTable1_16
       4  ??DataTable1_17
       4  ??DataTable1_18
       4  ??DataTable1_19
       4  ??DataTable1_2
       4  ??DataTable1_20
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
       4  ??DataTable1_8
       4  ??DataTable1_9
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_10
       4  ??DataTable6_11
       4  ??DataTable6_12
       4  ??DataTable6_13
       4  ??DataTable6_14
       4  ??DataTable6_15
       4  ??DataTable6_16
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
       4  ??DataTable6_8
       4  ??DataTable6_9
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
     126  IRTC_GetClock
     690  IRTC_Init
      56  IRTC_InstallCallback
      32  IRTC_Ram
      34  IRTC_RdRam
     170  IRTC_SetClock
     660  IRTC_WkupInit
      82  IRTC_WrRam
     578  irtc_isr
       4  pCallbackIRTC
      12  tmp

 
    16 bytes in section .bss
    32 bytes in section .bss  (abs)
 2 624 bytes in section .text
 
 2 624 bytes of CODE memory
    48 bytes of DATA memory

Errors: none
Warnings: none
