###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        14/Apr/2017  09:27:58
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\i2c\modbus.c
#    Command line =  
#        C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\i2c\modbus.c -D NDEBUG -lCN
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\adc_test\Release\List\
#        -o
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\adc_test\Release\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ --no_mem_idioms -e --fpu=None --dlib_config
#        D:\IAR7.4anzhuang\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\adc_test\..\..\..\..\src\common\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\adc_test\..\..\..\..\src\drivers\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\adc_test\..\..\..\..\src\freemaster\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\adc_test\..\..\..\..\src\projects\adc_test\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\adc_test\..\..\..\..\src\toolchain\iar\
#        -Ol --require_prototypes
#    List file    =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\adc_test\Release\List\modbus.lst
#    Object file  =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\adc_test\Release\Obj\modbus.o
#
###############################################################################

C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\i2c\modbus.c
      1          /*
      2           * modbus.c从机服务程序
      3           *
      4           */ 
      5          #include "types.h"
      6          #include "modbus.h"
      7          #include "common.h"
      8          #include "gpio/gpio.h"
      9          #include "drivers.h"
     10          #include "headers/MKM34ZA5.h" 
     11          
     12          uint8 receBuf[32]; //可能这个接收的数据 有问题 不是16位
     13          uint8 checkoutError;
     14          uint8 rececount;
     15          uint8 receCount;
     16          uint8 sendBuf[120];
     17          uint8 sendCount;
     18          uint8 sendPosi;
     19          uint16 voltage=0x0034;
     20          uint16  getRegisterVal(uint16 Addr,uint16 *tempData); 
     21          union Data
     22          {
     23          char c[4];
     24          float f;
     25          }y;
     26           
     27          //#include "usart.h"
     28          uint8 localAddr=1;	
     29          uint8 testCoil; 
     30          uint16 testRegister; 
     31          uint8 byteCount;
     32          
     33          uint16 adcval[120];//={0x4048,0xf5c3};//={0.123,0.134};
     34          
     35          extern uint8 ad_pos[120];
     36          
     37          const uint8 auchCRCHi[] = { 
     38          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 
     39          0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 
     40          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 
     41          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 
     42          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 
     43          0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 
     44          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 
     45          0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 
     46          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 
     47          0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 
     48          0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 
     49          0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 
     50          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,0x80, 0x41, 0x00, 0xC1, 0x81, 0x40} ; 
     51          
     52          
     53          const uint8 auchCRCLo[] = { 
     54          0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06,0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD, 
     55          0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 
     56          0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC, 0x14, 0xD4,0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3, 
     57          0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3,0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4, 
     58          0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 
     59          0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED,0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26, 
     60          0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60,0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67, 
     61          0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 
     62          0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E,0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5, 
     63          0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71,0x70, 0xB0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92, 
     64          0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 
     65          0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B,0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C, 
     66          0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,0x43, 0x83, 0x41, 0x81, 0x80, 0x40} ;
     67          //uint16   crc16(uint8 *puchMsg, uint16 usDataLen) //*puchMsg要进行CRC校验的消息 
     68          //{                                               // usDataLen消息中字节数
     69          //	uint8 uchCRCHi = 0xFF ;/*高CRC字节初始化*/ 
     70          //        
     71          //        
     72          //        
     73          //	uint8 uchCRCLo = 0xFF ; /*低CRC初始化*/
     74          //	uint32 uIndex ; 
     75          //	while (usDataLen--) 
     76          //	{ 
     77          //		uIndex =uchCRCHi ^ *puchMsg++ ; //16位的CRC寄存器高8位与第一个8位二进制数据 相异或
     78          //		uchCRCHi = uchCRCLo ^ auchCRCHi[uIndex] ; 
     79          //		uchCRCLo = auchCRCLo[uIndex] ; 
     80          //	} 
     81          //	return (uchCRCHi<<8|uchCRCLo) ; 
     82          //}//uint16 crc16(uint8 *puchMsg, uint16 usDataLen)
     83          
     84          
     85          void checkComm0Modbus(void)
     86          {
     87          // y.f=3.14;
     88          // adcval[0]=y.c[0];
     89          uint16 crcData;
     90          uint16 tempData;
     91          if(receCount>4)
     92          {
     93            switch(receBuf[1])
     94            {
     95            //case 1:
     96            case 3:
     97            case 5:
     98              if(receCount>=8)
     99              {
    100                
    101              UART0_BASE_PTR->C2&=~(1<<2);//关接收
    102                //GPIO_Set(GPIOD,PIN4);//拉高发送
    103                receCount=0;
    104                if(receBuf[0]==localAddr && checkoutError==0) //判断是不是本机地址
    105                 crcData=crc16(receBuf,6); //计算校验对不对 // 后来要加上
    106                 if(crcData == receBuf[7]+(receBuf[6]<<8)) //校验正确
    107                   if(receBuf[1]==1) //功能号是 01
    108                   {
    109                     // readCoil();//读线圈
    110                   }
    111                 else if(receBuf[1]==3)
    112                 {
    113                 readRegisrers();//读寄存器  /*读寄存器的过程手被关了*/
    114                 }
    115                 else if(receBuf[1]==5)
    116                 {
    117                 // forceSingleCoil();//设置单个线圈 
    118                 }
    119                 rececount=0;
    120                 checkoutError=0;//表示一帧已经结束
    121              UART0_BASE_PTR->C2|=(1<<2);//开接收
    122                
    123               //  while(!UART_TxIdle(UART0));
    124                  GPIO_Clr(GPIOD,PIN4);//拉低接收
    125              } break;
    126              default:
    127                receCount = 0;
    128                checkoutError =0 ;
    129                break;	
    130              
    131          
    132            }
    133          }
    134          }
    135          
    136          void readRegisrers(void)
    137          {
    138                y.f=voltage3;
    139                adcval[0]=y.c[0]+(y.c[1]<<8);
    140                adcval[1]=y.c[2]+(y.c[3]<<8);
    141          uint8 addr;
    142          uint8 tempAddr;
    143          uint16 crcData;
    144          uint8 readCount;//读到的两个字节数据
    145          uint8 byteCount;//换算成的字节
    146          uint16 i=0;
    147          uint16 tempData=0;
    148          //addr=(receBuf[2]<<8)+receBuf[3];
    149          addr=receBuf[3];
    150          tempAddr=addr;
    151          readCount=receBuf[5];//数据字节数
    152          //readCount=(receBuf[4]<<8)+receBuf[5];
    153          byteCount=readCount*2;
    154          for(i=0;i<byteCount;i+=2,tempAddr++)//地址加1数据加2
    155          {
    156          getRegisterVal(tempAddr, &tempData);
    157          sendBuf[i+3]=tempData>>8;
    158          sendBuf[i+4]=tempData&0xff;
    159          }
    160          //sendBuf[i+3]=voltage>>8;//发送电压数据 高字节
    161          //sendBuf[i+4]=voltage&0xff;
    162          
    163          sendBuf[0]=localAddr;//从机地址
    164          sendBuf[1]=receBuf[1]; //03功能号
    165          sendBuf[2]=byteCount;//数据字节数
    166          byteCount += 3; //3+4  //招2个数据
    167          crcData=crc16(sendBuf,byteCount);//
    168          sendBuf[byteCount] = crcData >> 8; //高字节
    169          byteCount++;//sendBuf[]
    170          sendBuf[byteCount]=crcData&0xff;//低字节
    171          sendCount=byteCount+2;
    172            
    173          beginSend();
    174          }
    175          
    176          void beginSend(void)
    177          {
    178            GPIO_Set(GPIOD,PIN4);//设为发送
    179            sendPosi = 0;//之前的
    180           
    181           do
    182            {
    183             while(!UART_TxIdle(UART0));
    184            UART_PutChar(UART0,sendBuf[sendPosi]);
    185            sendPosi++; 
    186            }while(sendPosi <sendCount);
    187          //   if(sendCount>1)
    188          //  sendCount--;
    189          //  UART_PutChar(UART0,sendBuf[0]);
    190            
    191          }
    192          
    193          uint16  getRegisterVal(uint16 addr,uint16 *tempData)  //addr数据地址 
    194          {
    195           uint16 result=0;
    196           uint16 ge,shi;
    197           ge=addr%10;
    198           shi=addr/10;
    199           switch(ge&0xff)
    200            {
    201           case 0:
    202                  *tempData=adcval[shi*10];
    203                  break;
    204           case 1:
    205                  *tempData=adcval[shi*10+1];
    206                  break;
    207           case 2:
    208                  *tempData=adcval[shi*10+2];
    209                  break;
    210           case 3: 
    211                  *tempData=adcval[shi*10+3];
    212                  break;
    213           case 4: 
    214                  *tempData=adcval[shi*10+4];
    215                  break;
    216           case 5:
    217                  *tempData=adcval[shi*10+5];
    218                  break;
    219           case 6:
    220                  *tempData=adcval[shi*10+6];
    221                  break;
    222           case 7:
    223                  *tempData=adcval[shi*10+7];
    224                  break;
    225           case 8:
    226                  *tempData=adcval[shi*10+8];
    227                  break;
    228           case 9: 
    229                  *tempData=adcval[shi*10+9];
    230                  break;
    231           default:
    232                 break;
    233              }
    234            return result; 
    235          }

Errors: 2
Warnings: 1
