###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        16/Mar/2017  11:18:10
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\vref\vref.c
#    Command line =  
#        C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\vref\vref.c -D NDEBUG -lCN
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\adc_test\Release\List\
#        -o
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\adc_test\Release\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ --no_mem_idioms -e --fpu=None --dlib_config
#        D:\IAR7.4anzhuang\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\adc_test\..\..\..\..\src\common\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\adc_test\..\..\..\..\src\drivers\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\adc_test\..\..\..\..\src\freemaster\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\adc_test\..\..\..\..\src\projects\adc_test\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\adc_test\..\..\..\..\src\toolchain\iar\
#        -Ol --require_prototypes
#    List file    =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\adc_test\Release\List\vref.lst
#    Object file  =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\adc_test\Release\Obj\vref.o
#
###############################################################################

C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\vref\vref.c
      1          /******************************************************************************
      2           * (c) Copyright 2010-2013, Freescale Semiconductor Inc.
      3           * ALL RIGHTS RESERVED.
      4           ***************************************************************************//*!
      5           * @file      vref.c
      6           * @version   1.0.2.0
      7           * @date      May-8-2011
      8           * @brief     Voltage Reference (VREF) driver source code.
      9           ******************************************************************************/
     10          #include "common.h"
     11          #include "vref.h"
     12          
     13          #if !defined(MCU_MKM34ZA5)
     14            #error "The vref.c module is specific to the MKMxxZxxACxx5 microcontrollers."
     15          #endif
     16          
     17          /******************************************************************************
     18           * public function definitions                                                *
     19           ******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
     20          void VREF_Init (tVREF vref, tVREF_S vref_s)
     21          {
   \                     VREF_Init: (+1)
   \   00000000   0xB507             PUSH     {R0-R2,LR}
     22            register uint8  tmp;
     23            register uint32 tmpl;
     24          
     25            VREF_VREFH_SC = VREF_VREFH_SC_VREFEN_MASK; /* enable module and keep mode 0 */
   \   00000002   0x2080             MOVS     R0,#+128
   \   00000004   0x4915             LDR      R1,??VREF_Init_0  ;; 0x4006f001
   \   00000006   0x7008             STRB     R0,[R1, #+0]
     26            /* check and wait until reference is stable                                 */
     27            if (vref.VREFH_SC & VREF_VREFH_SC_VREFEN_MASK)
   \   00000008   0x4668             MOV      R0,SP
   \   0000000A   0x7840             LDRB     R0,[R0, #+1]
   \   0000000C   0x0600             LSLS     R0,R0,#+24
   \   0000000E   0xD503             BPL      ??VREF_Init_1
     28              while (!(VREF_VREFH_SC & VREF_VREFH_SC_VREFST_MASK));
   \                     ??VREF_Init_2: (+1)
   \   00000010   0x4812             LDR      R0,??VREF_Init_0  ;; 0x4006f001
   \   00000012   0x7800             LDRB     R0,[R0, #+0]
   \   00000014   0x0740             LSLS     R0,R0,#+29
   \   00000016   0xD5FB             BPL      ??VREF_Init_2
     29          
     30            /* Load VREFH_TRM without change trim value                                 */
     31            tmp            = (VREF_VREFH_TRM & VREF_VREFH_TRM_TRIM_MASK);
   \                     ??VREF_Init_1: (+1)
   \   00000018   0x4811             LDR      R0,??VREF_Init_0+0x4  ;; 0x4006f000
   \   0000001A   0x7800             LDRB     R0,[R0, #+0]
   \   0000001C   0x0680             LSLS     R0,R0,#+26       ;; ZeroExtS R0,R0,#+26,#+26
   \   0000001E   0x0E80             LSRS     R0,R0,#+26
     32            VREF_VREFH_TRM = (vref.VREFH_TRM | tmp);    /* Set actual selection         */
   \   00000020   0x4669             MOV      R1,SP
   \   00000022   0x7809             LDRB     R1,[R1, #+0]
   \   00000024   0x4308             ORRS     R0,R0,R1
   \   00000026   0x490E             LDR      R1,??VREF_Init_0+0x4  ;; 0x4006f000
   \   00000028   0x7008             STRB     R0,[R1, #+0]
     33            /* Load control register                                                    */
     34            VREF_VREFH_SC  = vref.VREFH_SC;             /* write control register       */
   \   0000002A   0x4668             MOV      R0,SP
   \   0000002C   0x7840             LDRB     R0,[R0, #+1]
   \   0000002E   0x490B             LDR      R1,??VREF_Init_0  ;; 0x4006f001
   \   00000030   0x7008             STRB     R0,[R1, #+0]
     35            /* Load VREFL_TRM without change trim value                                 */
     36            tmp            = (VREF_VREFL_TRM & VREF_VREFL_TRM_VREFL_TRIM_MASK);
   \   00000032   0x480C             LDR      R0,??VREF_Init_0+0x8  ;; 0x4006f005
   \   00000034   0x7800             LDRB     R0,[R0, #+0]
   \   00000036   0x0740             LSLS     R0,R0,#+29       ;; ZeroExtS R0,R0,#+29,#+29
   \   00000038   0x0F40             LSRS     R0,R0,#+29
     37            VREF_VREFL_TRM = (vref.VREFL_TRM | vref_s.VREFL_TRM_S | tmp);
   \   0000003A   0x4669             MOV      R1,SP
   \   0000003C   0x7889             LDRB     R1,[R1, #+2]
   \   0000003E   0xAA01             ADD      R2,SP,#+4
   \   00000040   0x7912             LDRB     R2,[R2, #+4]
   \   00000042   0x430A             ORRS     R2,R2,R1
   \   00000044   0x4310             ORRS     R0,R0,R2
   \   00000046   0x4907             LDR      R1,??VREF_Init_0+0x8  ;; 0x4006f005
   \   00000048   0x7008             STRB     R0,[R1, #+0]
     38            /* Load SIM_MISC_CTL without change other flags                             */
     39            tmpl           = (SIM_MISC_CTL & (                                           \
     40                                                SIM_MISC_CTL_RTCCLKSEL_MASK|             \
     41                                                SIM_MISC_CTL_TMR3PCSSEL_MASK|            \
     42                                                SIM_MISC_CTL_TMR2PCSSEL_MASK|            \
     43                                                SIM_MISC_CTL_TMR1PCSSEL_MASK|            \
     44                                                SIM_MISC_CTL_TMR0PCSSEL_MASK|            \
     45                                                SIM_MISC_CTL_TMR3SCSSEL_MASK|            \
     46                                                SIM_MISC_CTL_TMR2SCSSEL_MASK|            \
     47                                                SIM_MISC_CTL_TMR1SCSSEL_MASK|            \
     48                                                SIM_MISC_CTL_TMR0SCSSEL_MASK|            \
     49                                                SIM_MISC_CTL_TMR0PLLCLKSEL_MASK|         \
     50                                                SIM_MISC_CTL_EWMINSEL_MASK|              \
     51                                                SIM_MISC_CTL_XBARPITOUTSEL_MASK|         \
     52                                                SIM_MISC_CTL_UART3IRSEL_MASK|            \
     53                                                SIM_MISC_CTL_UART2IRSEL_MASK|            \
     54                                                SIM_MISC_CTL_UART1IRSEL_MASK|            \
     55                                                SIM_MISC_CTL_UART0IRSEL_MASK|            \
     56                                                SIM_MISC_CTL_UARTMODTYPE_MASK|           \
     57                                                SIM_MISC_CTL_AFECLKPADDIR_MASK|          \
     58                                                SIM_MISC_CTL_AFECLKSEL_MASK|             \
     59                                                SIM_MISC_CTL_DMADONESEL_MASK|            \
     60                                                SIM_MISC_CTL_XBARAFEMODOUTSEL_MASK       \
     61                                             )                                           \
     62                             );
   \   0000004A   0x4807             LDR      R0,??VREF_Init_0+0xC  ;; 0x4003f06c
   \   0000004C   0x6800             LDR      R0,[R0, #+0]
   \   0000004E   0x00C0             LSLS     R0,R0,#+3        ;; ZeroExtS R0,R0,#+3,#+3
   \   00000050   0x08C0             LSRS     R0,R0,#+3
     63            SIM_MISC_CTL   = (vref_s.SIM_MISC_CTL_S | tmpl);
   \   00000052   0x9901             LDR      R1,[SP, #+4]
   \   00000054   0x4308             ORRS     R0,R0,R1
   \   00000056   0x4904             LDR      R1,??VREF_Init_0+0xC  ;; 0x4003f06c
   \   00000058   0x6008             STR      R0,[R1, #+0]
     64          }
   \   0000005A   0xBD07             POP      {R0-R2,PC}       ;; return
   \                     ??VREF_Init_0:
   \   0000005C   0x4006F001         DC32     0x4006f001
   \   00000060   0x4006F000         DC32     0x4006f000
   \   00000064   0x4006F005         DC32     0x4006f005
   \   00000068   0x4003F06C         DC32     0x4003f06c
     65          /******************************************************************************
     66           * End of module                                                              *
     67           ******************************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   VREF_Init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     108  VREF_Init

 
 108 bytes in section .text
 
 108 bytes of CODE memory

Errors: none
Warnings: none
