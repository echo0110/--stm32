###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        07/Mar/2017  13:03:28
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Freescale\KM128SWDRV_R4_1_6\src\projects\gpioaccess_test\gpioaccess_test.c
#    Command line =  
#        C:\Freescale\KM128SWDRV_R4_1_6\src\projects\gpioaccess_test\gpioaccess_test.c
#        --no_size_constraints -D NDEBUG -lCN
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\gpioaccess_test\Release\List\
#        -o
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\gpioaccess_test\Release\Obj\
#        --no_unroll --debug --endian=little --cpu=Cortex-M0+ --no_mem_idioms
#        -e --fpu=None --dlib_config
#        D:\IAR7.4anzhuang\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\gpioaccess_test\..\..\..\..\src\common\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\gpioaccess_test\..\..\..\..\src\drivers\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\gpioaccess_test\..\..\..\..\src\freemaster\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\gpioaccess_test\..\..\..\..\src\projects\gpioaccess_test\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\gpioaccess_test\..\..\..\..\src\toolchain\iar\
#        -Ohs --require_prototypes
#    List file    =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\gpioaccess_test\Release\List\gpioaccess_test.lst
#    Object file  =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\gpioaccess_test\Release\Obj\gpioaccess_test.o
#
###############################################################################

C:\Freescale\KM128SWDRV_R4_1_6\src\projects\gpioaccess_test\gpioaccess_test.c
      1          /******************************************************************************
      2           * (c) Copyright 2010-2015, Freescale Semiconductor Inc.
      3           * ALL RIGHTS RESERVED.
      4           ***************************************************************************//*!
      5           * gpioaccess_test.c
      6           ******************************************************************************/
      7          #include "drivers.h"
      8          

   \                                 In section .text, align 4, keep-with-next
      9          void main (void)
     10          {
   \                     main: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
     11            /* enable clocks to all on chip peripherals                                 */
     12            SIM_Init (SIM_MODULE_ALL_PERIPH_ON_CONFIG);
   \   00000002   0x....             LDR      R1,??DataTable2  ;; 0x4003e000
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x6008             STR      R0,[R1, #+0]
   \   00000008   0x6048             STR      R0,[R1, #+4]
   \   0000000A   0x....             LDR      R1,??DataTable2_1  ;; 0x4003f004
   \   0000000C   0x2501             MOVS     R5,#+1
   \   0000000E   0x600D             STR      R5,[R1, #+0]
   \   00000010   0x....             LDR      R2,??DataTable2_2  ;; 0x786cbdf2
   \   00000012   0x630A             STR      R2,[R1, #+48]
   \   00000014   0x....             LDR      R2,??DataTable2_3  ;; 0x7ab7fc8
   \   00000016   0x634A             STR      R2,[R1, #+52]
   \   00000018   0x....             LDR      R2,??DataTable2_4  ;; 0xd0116a1f
   \   0000001A   0x638A             STR      R2,[R1, #+56]
   \   0000001C   0x2203             MOVS     R2,#+3
   \   0000001E   0x63CA             STR      R2,[R1, #+60]
   \   00000020   0x06EA             LSLS     R2,R5,#+27
   \   00000022   0x640A             STR      R2,[R1, #+64]
   \   00000024   0x6488             STR      R0,[R1, #+72]
   \   00000026   0x6688             STR      R0,[R1, #+104]
     13          
     14            /* Set bus masters attribute to be controlled internally by the core        */
     15            MCM_SetMasterAttr (MCM_CM0_MASTER|MCM_DMA_MASTER,
     16                               MCM_MASTER_EN_PRIV_OR_USER_SECURE_OR_NONSEC,
     17                               TRUE);
   \   00000028   0x....             LDR      R0,??DataTable2_5  ;; 0x860086
   \   0000002A   0x....             LDR      R1,??DataTable2_6  ;; 0xf0003080
   \   0000002C   0x6008             STR      R0,[R1, #+0]
     18          
     19            /* User nonsec=Read/Write, User secure=Read/Write, Priv. secure=Read/Write. */
     20            PORT_Init (PORTA, PORT_MODULE_ALT1_MODE, PIN0);
   \   0000002E   0x2201             MOVS     R2,#+1
   \   00000030   0x....             ADR.N    R0,?_0
   \   00000032   0xC803             LDM      R0,{R0,R1}
   \   00000034   0x.... 0x....      BL       PORTA_Init
     21            GPIO_Init (GPIOA, GPIO_OUT_LOGIC1_MODE, PIN0);
   \   00000038   0x....             LDR      R4,??DataTable2_7  ;; 0x400ff000
   \   0000003A   0x7820             LDRB     R0,[R4, #+0]
   \   0000003C   0x2101             MOVS     R1,#+1
   \   0000003E   0x4301             ORRS     R1,R1,R0
   \   00000040   0x7021             STRB     R1,[R4, #+0]
   \   00000042   0x7D20             LDRB     R0,[R4, #+20]
   \   00000044   0x2101             MOVS     R1,#+1
   \   00000046   0x4301             ORRS     R1,R1,R0
   \   00000048   0x7521             STRB     R1,[R4, #+20]
     22            GPIO_SetPortAttr (GPIOA, GPIO_PORT_RW_RW_RW, TRUE);
   \   0000004A   0x26F8             MOVS     R6,#+248
   \   0000004C   0x7F20             LDRB     R0,[R4, #+28]
   \   0000004E   0x4030             ANDS     R0,R0,R6
   \   00000050   0x2180             MOVS     R1,#+128
   \   00000052   0x4301             ORRS     R1,R1,R0
   \   00000054   0x7721             STRB     R1,[R4, #+28]
     23          
     24            /* User nonsec=None, User secure=None, Priv. secure=Read/Write.             */
     25            PORT_Init (PORTB, PORT_MODULE_ALT1_MODE, PIN0);
   \   00000056   0x2201             MOVS     R2,#+1
   \   00000058   0x....             ADR.N    R0,?_1
   \   0000005A   0xC803             LDM      R0,{R0,R1}
   \   0000005C   0x.... 0x....      BL       PORTB_Init
     26            GPIO_Init (GPIOB, GPIO_OUT_LOGIC1_MODE, PIN0);
   \   00000060   0x7860             LDRB     R0,[R4, #+1]
   \   00000062   0x2101             MOVS     R1,#+1
   \   00000064   0x4301             ORRS     R1,R1,R0
   \   00000066   0x7061             STRB     R1,[R4, #+1]
   \   00000068   0x7D60             LDRB     R0,[R4, #+21]
   \   0000006A   0x2101             MOVS     R1,#+1
   \   0000006C   0x4301             ORRS     R1,R1,R0
   \   0000006E   0x7561             STRB     R1,[R4, #+21]
     27            GPIO_SetPortAttr (GPIOB, GPIO_PORT_NO_NO_RW, TRUE);
   \   00000070   0x7F60             LDRB     R0,[R4, #+29]
   \   00000072   0x4006             ANDS     R6,R6,R0
   \   00000074   0x2085             MOVS     R0,#+133
   \   00000076   0x4330             ORRS     R0,R0,R6
   \   00000078   0x7760             STRB     R0,[R4, #+29]
     28          
     29            /* Toggling pins in privileged mode                                         */
     30            GPIO_Tgl (FGPIOA, PIN0);  /* passes - access via CPU's IOPORT               */
   \   0000007A   0x20F8             MOVS     R0,#+248
   \   0000007C   0x0600             LSLS     R0,R0,#+24       ;; #-134217728
   \   0000007E   0x7801             LDRB     R1,[R0, #+0]
   \   00000080   0x2201             MOVS     R2,#+1
   \   00000082   0x404A             EORS     R2,R2,R1
   \   00000084   0x7002             STRB     R2,[R0, #+0]
     31            GPIO_Tgl (GPIOA, PIN0);   /* passes - access via Peripheral bridge          */
   \   00000086   0x7821             LDRB     R1,[R4, #+0]
   \   00000088   0x2201             MOVS     R2,#+1
   \   0000008A   0x404A             EORS     R2,R2,R1
   \   0000008C   0x7022             STRB     R2,[R4, #+0]
     32            GPIO_Tgl (FGPIOB, PIN0);  /* passes - access via CPU's IOPORT               */
   \   0000008E   0x7841             LDRB     R1,[R0, #+1]
   \   00000090   0x2201             MOVS     R2,#+1
   \   00000092   0x404A             EORS     R2,R2,R1
   \   00000094   0x7042             STRB     R2,[R0, #+1]
     33            GPIO_Tgl (GPIOB, PIN0);   /* passes - access via Peripheral bridge          */
   \   00000096   0x7861             LDRB     R1,[R4, #+1]
   \   00000098   0x2201             MOVS     R2,#+1
   \   0000009A   0x404A             EORS     R2,R2,R1
   \   0000009C   0x7062             STRB     R2,[R4, #+1]
     34          
     35            /* Toggling in user mode                                                    */
     36            UserMode();
   \   0000009E   0xF3EF 0x8114      MRS R1,CONTROL
   \   000000A2   0x4329             ORRS     R1,R1,R5
   \   000000A4   0xF381 0x8814      MSR CONTROL,R1
     37            GPIO_Tgl (FGPIOA, PIN0);  /* passes - access via CPU's IOPORT               */
   \   000000A8   0x7801             LDRB     R1,[R0, #+0]
   \   000000AA   0x2201             MOVS     R2,#+1
   \   000000AC   0x404A             EORS     R2,R2,R1
   \   000000AE   0x7002             STRB     R2,[R0, #+0]
     38            GPIO_Tgl (GPIOA, PIN0);   /* passes - access via Peripheral bridge          */
   \   000000B0   0x7821             LDRB     R1,[R4, #+0]
   \   000000B2   0x2201             MOVS     R2,#+1
   \   000000B4   0x404A             EORS     R2,R2,R1
   \   000000B6   0x7022             STRB     R2,[R4, #+0]
     39            GPIO_Tgl (FGPIOB, PIN0);  /* RAZ/WI error - access via CPU's IOPORT         */
   \   000000B8   0x7841             LDRB     R1,[R0, #+1]
   \   000000BA   0x2201             MOVS     R2,#+1
   \   000000BC   0x404A             EORS     R2,R2,R1
   \   000000BE   0x7042             STRB     R2,[R0, #+1]
     40            GPIO_Tgl (GPIOB, PIN0);   /* hard fault error - access via Peripheral bridge*/
   \   000000C0   0x7860             LDRB     R0,[R4, #+1]
   \   000000C2   0x4045             EORS     R5,R5,R0
   \   000000C4   0x7065             STRB     R5,[R4, #+1]
     41          
     42            while(1);
   \                     ??main_0: (+1)
   \   000000C6   0xE7FE             B        ??main_0
     43          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x4003E000         DC32     0x4003e000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x4003F004         DC32     0x4003f004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x786CBDF2         DC32     0x786cbdf2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x07AB7FC8         DC32     0x7ab7fc8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0xD0116A1F         DC32     0xd0116a1f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x00860086         DC32     0x860086

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0xF0003080         DC32     0xf0003080

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   0x400FF000         DC32     0x400ff000

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x00000100         DC32 256, 0
   \              0x00000000   

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x00000100         DC32 256, 0
   \              0x00000000   

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   main
        16   -> PORTA_Init
        16   -> PORTB_Init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       8  ?_0
       8  ?_1
     200  main

 
 248 bytes in section .text
 
 248 bytes of CODE memory

Errors: none
Warnings: none
