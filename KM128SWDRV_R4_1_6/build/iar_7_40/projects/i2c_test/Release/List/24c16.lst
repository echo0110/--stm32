###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        20/Mar/2017  09:47:56
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\i2c\24c16.c
#    Command line =  
#        C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\i2c\24c16.c -D NDEBUG -lCN
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\i2c_test\Release\List\
#        -o
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\i2c_test\Release\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ --no_mem_idioms -e --fpu=None --dlib_config
#        D:\IAR7.4anzhuang\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\i2c_test\..\..\..\..\src\common\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\i2c_test\..\..\..\..\src\drivers\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\i2c_test\..\..\..\..\src\freemaster\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\i2c_test\..\..\..\..\src\projects\i2c_test\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\i2c_test\..\..\..\..\src\toolchain\iar\
#        -On
#    List file    =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\i2c_test\Release\List\24c16.lst
#    Object file  =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\i2c_test\Release\Obj\24c16.o
#
###############################################################################

C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\i2c\24c16.c
      1          /******************************************************************************
      2           * (c) Copyright 2010-2015, Freescale Semiconductor Inc.
      3           * ALL RIGHTS RESERVED.
      4           ***************************************************************************//*!
      5           * @file      24c16.c
      6           * @version   1.0.4.0
      7           * @date      Apr-30-2016
      8           * @brief     I2C bus controller (I2C) driver source code.
      9          ******************************************************************************/
     10          #include "common.h"
     11          #include "24c16.h"
     12          #include "gpio/gpio.h"
     13          #include "flash.h"
     14          

   \                                 In section .bss, align 1
     15          uint8 IFACK;//确定ACk 有没有应答
   \                     IFACK:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     16          uint8 NO_ACK;
   \                     NO_ACK:
   \   00000000                      DS8 1
     17          uint8  GPIO_ReadInputDataBit(uint16 GPIO_PIN);// Reads the specified input port pin
     18          uint8  Check(void);
     19          //uint8 read_byte();//读一个字节
     20          //uint8 ACK(void);
     21          void I2C_Check();
     22          void  SendChar(unsigned char SendData);

   \                                 In section .text, align 2, keep-with-next
     23          void i2c_24c16 (void)
     24          {
     25            
     26          }
   \                     i2c_24c16: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     27          
     28          // //开始信号
     29          ////在时钟线为高电平时,数据线由高向低跳变. 

   \                                 In section .text, align 2, keep-with-next
     30          void StartI2C(void)
     31          {   
   \                     StartI2C: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     32              GPIO_Init (GPIOF, GPIO_OUT_LOGIC0_MODE, PIN6);//SDA为输出
   \   00000002   0x....             LDR      R0,??DataTable5
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x9000             STR      R0,[SP, #+0]
   \   00000008   0x....             LDR      R0,??DataTable5_1  ;; 0x400ff041
   \   0000000A   0x7800             LDRB     R0,[R0, #+0]
   \   0000000C   0x21BF             MOVS     R1,#+191
   \   0000000E   0x4001             ANDS     R1,R1,R0
   \   00000010   0x4668             MOV      R0,SP
   \   00000012   0x7840             LDRB     R0,[R0, #+1]
   \   00000014   0x2240             MOVS     R2,#+64
   \   00000016   0x4010             ANDS     R0,R0,R2
   \   00000018   0x4308             ORRS     R0,R0,R1
   \   0000001A   0x....             LDR      R1,??DataTable5_1  ;; 0x400ff041
   \   0000001C   0x7008             STRB     R0,[R1, #+0]
   \   0000001E   0x....             LDR      R0,??DataTable5_2
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x9000             STR      R0,[SP, #+0]
   \   00000024   0x....             LDR      R0,??DataTable5_3  ;; 0x400ff055
   \   00000026   0x7800             LDRB     R0,[R0, #+0]
   \   00000028   0x21BF             MOVS     R1,#+191
   \   0000002A   0x4001             ANDS     R1,R1,R0
   \   0000002C   0x4668             MOV      R0,SP
   \   0000002E   0x7800             LDRB     R0,[R0, #+0]
   \   00000030   0x2240             MOVS     R2,#+64
   \   00000032   0x4010             ANDS     R0,R0,R2
   \   00000034   0x4308             ORRS     R0,R0,R1
   \   00000036   0x....             LDR      R1,??DataTable5_3  ;; 0x400ff055
   \   00000038   0x7008             STRB     R0,[R1, #+0]
     33              SCK_1;
   \   0000003A   0x....             LDR      R0,??DataTable5_1  ;; 0x400ff041
   \   0000003C   0x7800             LDRB     R0,[R0, #+0]
   \   0000003E   0x2120             MOVS     R1,#+32
   \   00000040   0x4301             ORRS     R1,R1,R0
   \   00000042   0x....             LDR      R0,??DataTable5_1  ;; 0x400ff041
   \   00000044   0x7001             STRB     R1,[R0, #+0]
     34              SDA_1;
   \   00000046   0x....             LDR      R0,??DataTable5_1  ;; 0x400ff041
   \   00000048   0x7800             LDRB     R0,[R0, #+0]
   \   0000004A   0x2140             MOVS     R1,#+64
   \   0000004C   0x4301             ORRS     R1,R1,R0
   \   0000004E   0x....             LDR      R0,??DataTable5_1  ;; 0x400ff041
   \   00000050   0x7001             STRB     R1,[R0, #+0]
     35              arch_delay(150);// NOP;  200-4us  system clock --50Mhz  1000000--0.02s
   \   00000052   0x2096             MOVS     R0,#+150
   \   00000054   0x.... 0x....      BL       arch_delay
     36              SDA_0;
   \   00000058   0x....             LDR      R0,??DataTable5_1  ;; 0x400ff041
   \   0000005A   0x7800             LDRB     R0,[R0, #+0]
   \   0000005C   0x21BF             MOVS     R1,#+191
   \   0000005E   0x4001             ANDS     R1,R1,R0
   \   00000060   0x....             LDR      R0,??DataTable5_1  ;; 0x400ff041
   \   00000062   0x7001             STRB     R1,[R0, #+0]
     37              arch_delay(150);//NOP; 200-4us   250-5us
   \   00000064   0x2096             MOVS     R0,#+150
   \   00000066   0x.... 0x....      BL       arch_delay
     38              SCK_0;
   \   0000006A   0x....             LDR      R0,??DataTable5_1  ;; 0x400ff041
   \   0000006C   0x7800             LDRB     R0,[R0, #+0]
   \   0000006E   0x21DF             MOVS     R1,#+223
   \   00000070   0x4001             ANDS     R1,R1,R0
   \   00000072   0x....             LDR      R0,??DataTable5_1  ;; 0x400ff041
   \   00000074   0x7001             STRB     R1,[R0, #+0]
     39             // arch_delay(50000);   //NOP;
     40          }
   \   00000076   0xBD01             POP      {R0,PC}          ;; return
     41          //停止信号
     42          //在时钟线为高电平时,数据线由低向高跳变.

   \                                 In section .text, align 2, keep-with-next
     43          void StopI2C(void)
     44          {  
   \                     StopI2C: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     45              GPIO_Init (GPIOF, GPIO_OUT_LOGIC0_MODE, PIN6);//SDA为输出
   \   00000002   0x....             LDR      R0,??DataTable5_4
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x9000             STR      R0,[SP, #+0]
   \   00000008   0x....             LDR      R0,??DataTable5_1  ;; 0x400ff041
   \   0000000A   0x7800             LDRB     R0,[R0, #+0]
   \   0000000C   0x21BF             MOVS     R1,#+191
   \   0000000E   0x4001             ANDS     R1,R1,R0
   \   00000010   0x4668             MOV      R0,SP
   \   00000012   0x7840             LDRB     R0,[R0, #+1]
   \   00000014   0x2240             MOVS     R2,#+64
   \   00000016   0x4010             ANDS     R0,R0,R2
   \   00000018   0x4308             ORRS     R0,R0,R1
   \   0000001A   0x....             LDR      R1,??DataTable5_1  ;; 0x400ff041
   \   0000001C   0x7008             STRB     R0,[R1, #+0]
   \   0000001E   0x....             LDR      R0,??DataTable5_5
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x9000             STR      R0,[SP, #+0]
   \   00000024   0x....             LDR      R0,??DataTable5_3  ;; 0x400ff055
   \   00000026   0x7800             LDRB     R0,[R0, #+0]
   \   00000028   0x21BF             MOVS     R1,#+191
   \   0000002A   0x4001             ANDS     R1,R1,R0
   \   0000002C   0x4668             MOV      R0,SP
   \   0000002E   0x7800             LDRB     R0,[R0, #+0]
   \   00000030   0x2240             MOVS     R2,#+64
   \   00000032   0x4010             ANDS     R0,R0,R2
   \   00000034   0x4308             ORRS     R0,R0,R1
   \   00000036   0x....             LDR      R1,??DataTable5_3  ;; 0x400ff055
   \   00000038   0x7008             STRB     R0,[R1, #+0]
     46              SDA_0;
   \   0000003A   0x....             LDR      R0,??DataTable5_1  ;; 0x400ff041
   \   0000003C   0x7800             LDRB     R0,[R0, #+0]
   \   0000003E   0x21BF             MOVS     R1,#+191
   \   00000040   0x4001             ANDS     R1,R1,R0
   \   00000042   0x....             LDR      R0,??DataTable5_1  ;; 0x400ff041
   \   00000044   0x7001             STRB     R1,[R0, #+0]
     47              arch_delay(150); //NOP;5us
   \   00000046   0x2096             MOVS     R0,#+150
   \   00000048   0x.... 0x....      BL       arch_delay
     48              SCK_1;
   \   0000004C   0x....             LDR      R0,??DataTable5_1  ;; 0x400ff041
   \   0000004E   0x7800             LDRB     R0,[R0, #+0]
   \   00000050   0x2120             MOVS     R1,#+32
   \   00000052   0x4301             ORRS     R1,R1,R0
   \   00000054   0x....             LDR      R0,??DataTable5_1  ;; 0x400ff041
   \   00000056   0x7001             STRB     R1,[R0, #+0]
     49              arch_delay(150); 
   \   00000058   0x2096             MOVS     R0,#+150
   \   0000005A   0x.... 0x....      BL       arch_delay
     50              SDA_1;
   \   0000005E   0x....             LDR      R0,??DataTable5_1  ;; 0x400ff041
   \   00000060   0x7800             LDRB     R0,[R0, #+0]
   \   00000062   0x2140             MOVS     R1,#+64
   \   00000064   0x4301             ORRS     R1,R1,R0
   \   00000066   0x....             LDR      R0,??DataTable5_1  ;; 0x400ff041
   \   00000068   0x7001             STRB     R1,[R0, #+0]
     51              arch_delay(150);//5us 
   \   0000006A   0x2096             MOVS     R0,#+150
   \   0000006C   0x.... 0x....      BL       arch_delay
     52          }
   \   00000070   0xBD01             POP      {R0,PC}          ;; return
     53          
     54          //等待应答信号到来
     55          //返回值：1，接收应答失败
     56          //        0，接收应答成功
     57          

   \                                 In section .text, align 2, keep-with-next
     58          uint8 IIC_Wait_Ack(void)
     59          { 
   \                     IIC_Wait_Ack: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
     60              uint8 ucErrTime=0;
   \   00000004   0x2400             MOVS     R4,#+0
     61              GPIO_Init(GPIOF, GPIO_INP_MODE, PIN6);//SDA设置为输入
   \   00000006   0x....             LDR      R0,??DataTable6
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0x9000             STR      R0,[SP, #+0]
   \   0000000C   0x....             LDR      R0,??DataTable5_1  ;; 0x400ff041
   \   0000000E   0x7800             LDRB     R0,[R0, #+0]
   \   00000010   0x21BF             MOVS     R1,#+191
   \   00000012   0x4001             ANDS     R1,R1,R0
   \   00000014   0x4668             MOV      R0,SP
   \   00000016   0x7840             LDRB     R0,[R0, #+1]
   \   00000018   0x2240             MOVS     R2,#+64
   \   0000001A   0x4010             ANDS     R0,R0,R2
   \   0000001C   0x4308             ORRS     R0,R0,R1
   \   0000001E   0x....             LDR      R1,??DataTable5_1  ;; 0x400ff041
   \   00000020   0x7008             STRB     R0,[R1, #+0]
   \   00000022   0x....             LDR      R0,??DataTable6_1
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0x9000             STR      R0,[SP, #+0]
   \   00000028   0x....             LDR      R0,??DataTable5_3  ;; 0x400ff055
   \   0000002A   0x7800             LDRB     R0,[R0, #+0]
   \   0000002C   0x21BF             MOVS     R1,#+191
   \   0000002E   0x4001             ANDS     R1,R1,R0
   \   00000030   0x4668             MOV      R0,SP
   \   00000032   0x7800             LDRB     R0,[R0, #+0]
   \   00000034   0x2240             MOVS     R2,#+64
   \   00000036   0x4010             ANDS     R0,R0,R2
   \   00000038   0x4308             ORRS     R0,R0,R1
   \   0000003A   0x....             LDR      R1,??DataTable5_3  ;; 0x400ff055
   \   0000003C   0x7008             STRB     R0,[R1, #+0]
     62              SDA_1;arch_delay(25);//延时1us  //这个时间可能不对要用示波器看下。。。
   \   0000003E   0x....             LDR      R0,??DataTable5_1  ;; 0x400ff041
   \   00000040   0x7800             LDRB     R0,[R0, #+0]
   \   00000042   0x2140             MOVS     R1,#+64
   \   00000044   0x4301             ORRS     R1,R1,R0
   \   00000046   0x....             LDR      R0,??DataTable5_1  ;; 0x400ff041
   \   00000048   0x7001             STRB     R1,[R0, #+0]
   \   0000004A   0x2019             MOVS     R0,#+25
   \   0000004C   0x.... 0x....      BL       arch_delay
     63              SCK_1;arch_delay(25);//延时1us
   \   00000050   0x....             LDR      R0,??DataTable5_1  ;; 0x400ff041
   \   00000052   0x7800             LDRB     R0,[R0, #+0]
   \   00000054   0x2120             MOVS     R1,#+32
   \   00000056   0x4301             ORRS     R1,R1,R0
   \   00000058   0x....             LDR      R0,??DataTable5_1  ;; 0x400ff041
   \   0000005A   0x7001             STRB     R1,[R0, #+0]
   \   0000005C   0x2019             MOVS     R0,#+25
   \   0000005E   0x.... 0x....      BL       arch_delay
     64                while(READ_SDA)
   \                     ??IIC_Wait_Ack_0: (+1)
   \   00000062   0x2040             MOVS     R0,#+64
   \   00000064   0x.... 0x....      BL       GPIO_ReadInputDataBit
   \   00000068   0x2800             CMP      R0,#+0
   \   0000006A   0xD007             BEQ      ??IIC_Wait_Ack_1
     65              {  
     66              ucErrTime++;
   \   0000006C   0x1C64             ADDS     R4,R4,#+1
     67              if(ucErrTime>250)
   \   0000006E   0xB2E4             UXTB     R4,R4
   \   00000070   0x2CFB             CMP      R4,#+251
   \   00000072   0xDBF6             BLT      ??IIC_Wait_Ack_0
     68              {
     69               StopI2C();
   \   00000074   0x.... 0x....      BL       StopI2C
     70               return 1;
   \   00000078   0x2001             MOVS     R0,#+1
   \   0000007A   0xE006             B        ??IIC_Wait_Ack_2
     71              }
     72             
     73              }
     74             SCK_0;//时钟输出0
   \                     ??IIC_Wait_Ack_1: (+1)
   \   0000007C   0x....             LDR      R0,??DataTable5_1  ;; 0x400ff041
   \   0000007E   0x7800             LDRB     R0,[R0, #+0]
   \   00000080   0x21DF             MOVS     R1,#+223
   \   00000082   0x4001             ANDS     R1,R1,R0
   \   00000084   0x....             LDR      R0,??DataTable5_1  ;; 0x400ff041
   \   00000086   0x7001             STRB     R1,[R0, #+0]
     75             return 0;
   \   00000088   0x2000             MOVS     R0,#+0
   \                     ??IIC_Wait_Ack_2: (+1)
   \   0000008A   0xBD16             POP      {R1,R2,R4,PC}    ;; return
     76          }
     77          /*****************************************************************
     78          //函数名称：IIC_Ack(void)
     79          //功能描述：产生ack应答
     80          //designer: niub
     81          //Data    :2017-3-3
     82          *****************************************************************/

   \                                 In section .text, align 2, keep-with-next
     83          void IIC_Ack(void)
     84          {
   \                     IIC_Ack: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     85          SCK_0;
   \   00000002   0x....             LDR      R0,??DataTable5_1  ;; 0x400ff041
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x21DF             MOVS     R1,#+223
   \   00000008   0x4001             ANDS     R1,R1,R0
   \   0000000A   0x....             LDR      R0,??DataTable5_1  ;; 0x400ff041
   \   0000000C   0x7001             STRB     R1,[R0, #+0]
     86          GPIO_Init(GPIOF, GPIO_OUT_LOGIC0_MODE, PIN6);//配置SDA输出
   \   0000000E   0x....             LDR      R0,??DataTable8
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x9000             STR      R0,[SP, #+0]
   \   00000014   0x....             LDR      R0,??DataTable5_1  ;; 0x400ff041
   \   00000016   0x7800             LDRB     R0,[R0, #+0]
   \   00000018   0x21BF             MOVS     R1,#+191
   \   0000001A   0x4001             ANDS     R1,R1,R0
   \   0000001C   0x4668             MOV      R0,SP
   \   0000001E   0x7840             LDRB     R0,[R0, #+1]
   \   00000020   0x2240             MOVS     R2,#+64
   \   00000022   0x4010             ANDS     R0,R0,R2
   \   00000024   0x4308             ORRS     R0,R0,R1
   \   00000026   0x....             LDR      R1,??DataTable5_1  ;; 0x400ff041
   \   00000028   0x7008             STRB     R0,[R1, #+0]
   \   0000002A   0x....             LDR      R0,??DataTable8_1
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
   \   0000002E   0x9000             STR      R0,[SP, #+0]
   \   00000030   0x....             LDR      R0,??DataTable5_3  ;; 0x400ff055
   \   00000032   0x7800             LDRB     R0,[R0, #+0]
   \   00000034   0x21BF             MOVS     R1,#+191
   \   00000036   0x4001             ANDS     R1,R1,R0
   \   00000038   0x4668             MOV      R0,SP
   \   0000003A   0x7800             LDRB     R0,[R0, #+0]
   \   0000003C   0x2240             MOVS     R2,#+64
   \   0000003E   0x4010             ANDS     R0,R0,R2
   \   00000040   0x4308             ORRS     R0,R0,R1
   \   00000042   0x....             LDR      R1,??DataTable5_3  ;; 0x400ff055
   \   00000044   0x7008             STRB     R0,[R1, #+0]
     87          SDA_0;
   \   00000046   0x....             LDR      R0,??DataTable5_1  ;; 0x400ff041
   \   00000048   0x7800             LDRB     R0,[R0, #+0]
   \   0000004A   0x21BF             MOVS     R1,#+191
   \   0000004C   0x4001             ANDS     R1,R1,R0
   \   0000004E   0x....             LDR      R0,??DataTable5_1  ;; 0x400ff041
   \   00000050   0x7001             STRB     R1,[R0, #+0]
     88          arch_delay(60);//延时2us
   \   00000052   0x203C             MOVS     R0,#+60
   \   00000054   0x.... 0x....      BL       arch_delay
     89          SCK_1;
   \   00000058   0x....             LDR      R0,??DataTable5_1  ;; 0x400ff041
   \   0000005A   0x7800             LDRB     R0,[R0, #+0]
   \   0000005C   0x2120             MOVS     R1,#+32
   \   0000005E   0x4301             ORRS     R1,R1,R0
   \   00000060   0x....             LDR      R0,??DataTable5_1  ;; 0x400ff041
   \   00000062   0x7001             STRB     R1,[R0, #+0]
     90          arch_delay(60);//延时2us
   \   00000064   0x203C             MOVS     R0,#+60
   \   00000066   0x.... 0x....      BL       arch_delay
     91          SCK_0;
   \   0000006A   0x....             LDR      R0,??DataTable5_1  ;; 0x400ff041
   \   0000006C   0x7800             LDRB     R0,[R0, #+0]
   \   0000006E   0x21DF             MOVS     R1,#+223
   \   00000070   0x4001             ANDS     R1,R1,R0
   \   00000072   0x....             LDR      R0,??DataTable5_1  ;; 0x400ff041
   \   00000074   0x7001             STRB     R1,[R0, #+0]
     92          }
   \   00000076   0xBD01             POP      {R0,PC}          ;; return
     93          /*****************************************************************
     94          //函数名称：IIC_NAck(void)
     95          //功能描述：不产生ack应答
     96          //designer: niub
     97          //Data    :2017-3-3
     98          *****************************************************************/

   \                                 In section .text, align 2, keep-with-next
     99          void IIC_NAck(void)
    100          {
   \                     IIC_NAck: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    101          SCK_0;
   \   00000002   0x....             LDR      R0,??DataTable5_1  ;; 0x400ff041
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x21DF             MOVS     R1,#+223
   \   00000008   0x4001             ANDS     R1,R1,R0
   \   0000000A   0x....             LDR      R0,??DataTable5_1  ;; 0x400ff041
   \   0000000C   0x7001             STRB     R1,[R0, #+0]
    102          GPIO_Init (GPIOF, GPIO_OUT_LOGIC0_MODE, PIN6);
   \   0000000E   0x....             LDR      R0,??DataTable9
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0x9000             STR      R0,[SP, #+0]
   \   00000014   0x....             LDR      R0,??DataTable5_1  ;; 0x400ff041
   \   00000016   0x7800             LDRB     R0,[R0, #+0]
   \   00000018   0x21BF             MOVS     R1,#+191
   \   0000001A   0x4001             ANDS     R1,R1,R0
   \   0000001C   0x4668             MOV      R0,SP
   \   0000001E   0x7840             LDRB     R0,[R0, #+1]
   \   00000020   0x2240             MOVS     R2,#+64
   \   00000022   0x4010             ANDS     R0,R0,R2
   \   00000024   0x4308             ORRS     R0,R0,R1
   \   00000026   0x....             LDR      R1,??DataTable5_1  ;; 0x400ff041
   \   00000028   0x7008             STRB     R0,[R1, #+0]
   \   0000002A   0x....             LDR      R0,??DataTable9_1
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
   \   0000002E   0x9000             STR      R0,[SP, #+0]
   \   00000030   0x....             LDR      R0,??DataTable5_3  ;; 0x400ff055
   \   00000032   0x7800             LDRB     R0,[R0, #+0]
   \   00000034   0x21BF             MOVS     R1,#+191
   \   00000036   0x4001             ANDS     R1,R1,R0
   \   00000038   0x4668             MOV      R0,SP
   \   0000003A   0x7800             LDRB     R0,[R0, #+0]
   \   0000003C   0x2240             MOVS     R2,#+64
   \   0000003E   0x4010             ANDS     R0,R0,R2
   \   00000040   0x4308             ORRS     R0,R0,R1
   \   00000042   0x....             LDR      R1,??DataTable5_3  ;; 0x400ff055
   \   00000044   0x7008             STRB     R0,[R1, #+0]
    103          SDA_1;
   \   00000046   0x....             LDR      R0,??DataTable5_1  ;; 0x400ff041
   \   00000048   0x7800             LDRB     R0,[R0, #+0]
   \   0000004A   0x2140             MOVS     R1,#+64
   \   0000004C   0x4301             ORRS     R1,R1,R0
   \   0000004E   0x....             LDR      R0,??DataTable5_1  ;; 0x400ff041
   \   00000050   0x7001             STRB     R1,[R0, #+0]
    104          arch_delay(60);//延时2us
   \   00000052   0x203C             MOVS     R0,#+60
   \   00000054   0x.... 0x....      BL       arch_delay
    105          SCK_1;
   \   00000058   0x....             LDR      R0,??DataTable5_1  ;; 0x400ff041
   \   0000005A   0x7800             LDRB     R0,[R0, #+0]
   \   0000005C   0x2120             MOVS     R1,#+32
   \   0000005E   0x4301             ORRS     R1,R1,R0
   \   00000060   0x....             LDR      R0,??DataTable5_1  ;; 0x400ff041
   \   00000062   0x7001             STRB     R1,[R0, #+0]
    106          arch_delay(60);
   \   00000064   0x203C             MOVS     R0,#+60
   \   00000066   0x.... 0x....      BL       arch_delay
    107          SCK_0;
   \   0000006A   0x....             LDR      R0,??DataTable5_1  ;; 0x400ff041
   \   0000006C   0x7800             LDRB     R0,[R0, #+0]
   \   0000006E   0x21DF             MOVS     R1,#+223
   \   00000070   0x4001             ANDS     R1,R1,R0
   \   00000072   0x....             LDR      R0,??DataTable5_1  ;; 0x400ff041
   \   00000074   0x7001             STRB     R1,[R0, #+0]
    108          }
   \   00000076   0xBD01             POP      {R0,PC}          ;; return
    109          
    110          /*****************************************************************
    111          //函数名称：write_add(uint8 address, uint8 data)
    112          //功能描述：指定地址写入一个数据
    113          //designer: niub
    114          //Data    :2017-3-3
    115          *****************************************************************/

   \                                 In section .text, align 2, keep-with-next
    116            void write_add(uint16 address,uint8 date)//任意地址写一个字节  
    117            {  
   \                     write_add: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    118               StartI2C();//开始信号 
   \   00000006   0x.... 0x....      BL       StartI2C
    119               
    120              write_byte(0xA0+((address/256)<<1));//发送器件地址 写数据   /*高位 08的话---0xA0 a9 a8 
   \   0000000A   0xB2A4             UXTH     R4,R4
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0x2180             MOVS     R1,#+128
   \   00000010   0x0049             LSLS     R1,R1,#+1        ;; #+256
   \   00000012   0x.... 0x....      BL       __aeabi_idiv
   \   00000016   0x0040             LSLS     R0,R0,#+1
   \   00000018   0x30A0             ADDS     R0,R0,#+160
   \   0000001A   0xB2C0             UXTB     R0,R0
   \   0000001C   0x.... 0x....      BL       write_byte
    121             // write_byte(0x55);
    122               IIC_Wait_Ack();//等待从设备的响应  
   \   00000020   0x.... 0x....      BL       IIC_Wait_Ack
    123              write_byte(address%256);//发送低字节地址 
   \   00000024   0xB2A4             UXTH     R4,R4
   \   00000026   0x0020             MOVS     R0,R4
   \   00000028   0x2180             MOVS     R1,#+128
   \   0000002A   0x0049             LSLS     R1,R1,#+1        ;; #+256
   \   0000002C   0x.... 0x....      BL       __aeabi_idivmod
   \   00000030   0x0008             MOVS     R0,R1
   \   00000032   0xB2C0             UXTB     R0,R0
   \   00000034   0x.... 0x....      BL       write_byte
    124              IIC_Wait_Ack();//等待从设备的响应 
   \   00000038   0x.... 0x....      BL       IIC_Wait_Ack
    125              write_byte(date);
   \   0000003C   0x0028             MOVS     R0,R5
   \   0000003E   0xB2C0             UXTB     R0,R0
   \   00000040   0x.... 0x....      BL       write_byte
    126               IIC_Wait_Ack();
   \   00000044   0x.... 0x....      BL       IIC_Wait_Ack
    127              StopI2C();//停止 
   \   00000048   0x.... 0x....      BL       StopI2C
    128              arch_delay(250000);//延时少于10ms
   \   0000004C   0x....             LDR      R0,??DataTable9_2  ;; 0x3d090
   \   0000004E   0x.... 0x....      BL       arch_delay
    129              
    130            }  
   \   00000052   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    131          
    132          /*****************************************************************
    133          //函数名称：read_add(uint8 data)
    134          //功能描述：指定地址读入一个数据
    135          //designer: niub
    136          //Data    :2017-3-3
    137          *****************************************************************/

   \                                 In section .text, align 2, keep-with-next
    138          uint8 read_add(uint16 address)
    139          {
   \                     read_add: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0005             MOVS     R5,R0
    140          uint8 temp=0;
   \   00000004   0x2400             MOVS     R4,#+0
    141          write_byte(0XA0+((address/256)<<1));// 发送器件地址，高地址
   \   00000006   0xB2AD             UXTH     R5,R5
   \   00000008   0x0028             MOVS     R0,R5
   \   0000000A   0x2180             MOVS     R1,#+128
   \   0000000C   0x0049             LSLS     R1,R1,#+1        ;; #+256
   \   0000000E   0x.... 0x....      BL       __aeabi_idiv
   \   00000012   0x0040             LSLS     R0,R0,#+1
   \   00000014   0x30A0             ADDS     R0,R0,#+160
   \   00000016   0xB2C0             UXTB     R0,R0
   \   00000018   0x.... 0x....      BL       write_byte
    142           //write_byte(0x55);
    143           IIC_Wait_Ack();
   \   0000001C   0x.... 0x....      BL       IIC_Wait_Ack
    144           write_byte(address%256); //低地址
   \   00000020   0xB2AD             UXTH     R5,R5
   \   00000022   0x0028             MOVS     R0,R5
   \   00000024   0x2180             MOVS     R1,#+128
   \   00000026   0x0049             LSLS     R1,R1,#+1        ;; #+256
   \   00000028   0x.... 0x....      BL       __aeabi_idivmod
   \   0000002C   0x0008             MOVS     R0,R1
   \   0000002E   0xB2C0             UXTB     R0,R0
   \   00000030   0x.... 0x....      BL       write_byte
    145           IIC_Wait_Ack();
   \   00000034   0x.... 0x....      BL       IIC_Wait_Ack
    146           StartI2C();//开始信号
   \   00000038   0x.... 0x....      BL       StartI2C
    147           write_byte(0xA1);//进入接收模式
   \   0000003C   0x20A1             MOVS     R0,#+161
   \   0000003E   0x.... 0x....      BL       write_byte
    148            IIC_Wait_Ack();
   \   00000042   0x.... 0x....      BL       IIC_Wait_Ack
    149            temp=read_byte(0);
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0x.... 0x....      BL       read_byte
   \   0000004C   0x0004             MOVS     R4,R0
    150            StopI2C();//产生一个停止信号
   \   0000004E   0x.... 0x....      BL       StopI2C
    151            return temp;
   \   00000052   0x0020             MOVS     R0,R4
   \   00000054   0xB2C0             UXTB     R0,R0
   \   00000056   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    152          }
    153          
    154          
    155          /*****************************************************************
    156          //函数名称：write_byte(uint8 data)
    157          //功能描述：发送一个字节 返回从机有无应答
    158          /1,有应答 
    159          /0 无应答
    160          //designer: niub
    161          //Data    :2017-3-3
    162          *****************************************************************/
    163          

   \                                 In section .text, align 2, keep-with-next
    164          void write_byte(uint8 txd)//发送一个字节
    165          {
   \                     write_byte: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    166          uint8 t;
    167          GPIO_Init (GPIOF, GPIO_OUT_LOGIC0_MODE, PIN6);//配置SDA为输出
   \   00000004   0x....             LDR      R0,??DataTable9_3
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x9000             STR      R0,[SP, #+0]
   \   0000000A   0x....             LDR      R0,??DataTable9_4  ;; 0x400ff041
   \   0000000C   0x7800             LDRB     R0,[R0, #+0]
   \   0000000E   0x21BF             MOVS     R1,#+191
   \   00000010   0x4001             ANDS     R1,R1,R0
   \   00000012   0x4668             MOV      R0,SP
   \   00000014   0x7840             LDRB     R0,[R0, #+1]
   \   00000016   0x2240             MOVS     R2,#+64
   \   00000018   0x4010             ANDS     R0,R0,R2
   \   0000001A   0x4308             ORRS     R0,R0,R1
   \   0000001C   0x....             LDR      R1,??DataTable9_4  ;; 0x400ff041
   \   0000001E   0x7008             STRB     R0,[R1, #+0]
   \   00000020   0x....             LDR      R0,??DataTable9_5
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0x9000             STR      R0,[SP, #+0]
   \   00000026   0x....             LDR      R0,??DataTable9_6  ;; 0x400ff055
   \   00000028   0x7800             LDRB     R0,[R0, #+0]
   \   0000002A   0x21BF             MOVS     R1,#+191
   \   0000002C   0x4001             ANDS     R1,R1,R0
   \   0000002E   0x4668             MOV      R0,SP
   \   00000030   0x7800             LDRB     R0,[R0, #+0]
   \   00000032   0x2240             MOVS     R2,#+64
   \   00000034   0x4010             ANDS     R0,R0,R2
   \   00000036   0x4308             ORRS     R0,R0,R1
   \   00000038   0x....             LDR      R1,??DataTable9_6  ;; 0x400ff055
   \   0000003A   0x7008             STRB     R0,[R1, #+0]
    168          //temp=txd;
    169          SCK_0;//拉低时钟开始数据传输
   \   0000003C   0x....             LDR      R0,??DataTable9_4  ;; 0x400ff041
   \   0000003E   0x7800             LDRB     R0,[R0, #+0]
   \   00000040   0x21DF             MOVS     R1,#+223
   \   00000042   0x4001             ANDS     R1,R1,R0
   \   00000044   0x....             LDR      R0,??DataTable9_4  ;; 0x400ff041
   \   00000046   0x7001             STRB     R1,[R0, #+0]
    170          for(t=0;t<8;t++)
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0x0005             MOVS     R5,R0
   \                     ??write_byte_0: (+1)
   \   0000004C   0xB2ED             UXTB     R5,R5
   \   0000004E   0x2D08             CMP      R5,#+8
   \   00000050   0xDA2A             BGE      ??write_byte_1
    171          {
    172          if((txd&0x80)>>7)//高位在前发送数据 (因为高位在前  所以高位有数据  就SDA置1)
   \   00000052   0x0020             MOVS     R0,R4
   \   00000054   0xB2C0             UXTB     R0,R0
   \   00000056   0x09C0             LSRS     R0,R0,#+7
   \   00000058   0xB2C0             UXTB     R0,R0
   \   0000005A   0x2800             CMP      R0,#+0
   \   0000005C   0xD006             BEQ      ??write_byte_2
    173             SDA_1;
   \   0000005E   0x....             LDR      R0,??DataTable9_4  ;; 0x400ff041
   \   00000060   0x7800             LDRB     R0,[R0, #+0]
   \   00000062   0x2140             MOVS     R1,#+64
   \   00000064   0x4301             ORRS     R1,R1,R0
   \   00000066   0x....             LDR      R0,??DataTable9_4  ;; 0x400ff041
   \   00000068   0x7001             STRB     R1,[R0, #+0]
   \   0000006A   0xE005             B        ??write_byte_3
    174          else
    175             SDA_0;
   \                     ??write_byte_2: (+1)
   \   0000006C   0x....             LDR      R0,??DataTable9_4  ;; 0x400ff041
   \   0000006E   0x7800             LDRB     R0,[R0, #+0]
   \   00000070   0x21BF             MOVS     R1,#+191
   \   00000072   0x4001             ANDS     R1,R1,R0
   \   00000074   0x....             LDR      R0,??DataTable9_4  ;; 0x400ff041
   \   00000076   0x7001             STRB     R1,[R0, #+0]
    176             txd<<=1;
   \                     ??write_byte_3: (+1)
   \   00000078   0x0064             LSLS     R4,R4,#+1
    177             arch_delay(60);//延时2us
   \   0000007A   0x203C             MOVS     R0,#+60
   \   0000007C   0x.... 0x....      BL       arch_delay
    178             SCK_1;
   \   00000080   0x....             LDR      R0,??DataTable9_4  ;; 0x400ff041
   \   00000082   0x7800             LDRB     R0,[R0, #+0]
   \   00000084   0x2120             MOVS     R1,#+32
   \   00000086   0x4301             ORRS     R1,R1,R0
   \   00000088   0x....             LDR      R0,??DataTable9_4  ;; 0x400ff041
   \   0000008A   0x7001             STRB     R1,[R0, #+0]
    179             arch_delay(60);//延时2us
   \   0000008C   0x203C             MOVS     R0,#+60
   \   0000008E   0x.... 0x....      BL       arch_delay
    180             SCK_0;
   \   00000092   0x....             LDR      R0,??DataTable9_4  ;; 0x400ff041
   \   00000094   0x7800             LDRB     R0,[R0, #+0]
   \   00000096   0x21DF             MOVS     R1,#+223
   \   00000098   0x4001             ANDS     R1,R1,R0
   \   0000009A   0x....             LDR      R0,??DataTable9_4  ;; 0x400ff041
   \   0000009C   0x7001             STRB     R1,[R0, #+0]
    181            arch_delay(60);
   \   0000009E   0x203C             MOVS     R0,#+60
   \   000000A0   0x.... 0x....      BL       arch_delay
    182          }
   \   000000A4   0x1C6D             ADDS     R5,R5,#+1
   \   000000A6   0xE7D1             B        ??write_byte_0
    183          }
   \                     ??write_byte_1: (+1)
   \   000000A8   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    184          
    185          /*****************************************************************
    186          //函数名称：read_byte()
    187          //功能描述：读一个字节
    188          /ack=1,发送ack 
    189          /ack=0, 发送nack
    190          //designer: niub
    191          //Data    :2017-3-3
    192          *****************************************************************/
    193          

   \                                 In section .text, align 2, keep-with-next
    194          uint8 read_byte(unsigned char ack1)//读一个字节
    195          {
   \                     read_byte: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
    196          unsigned char i,receive=0;
   \   00000006   0x2600             MOVS     R6,#+0
    197          GPIO_Init (GPIOF, GPIO_INP_MODE, PIN6);//SDA设置为输入  //输入输出模式配错
   \   00000008   0x....             LDR      R0,??DataTable9_7
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x9000             STR      R0,[SP, #+0]
   \   0000000E   0x....             LDR      R0,??DataTable9_4  ;; 0x400ff041
   \   00000010   0x7800             LDRB     R0,[R0, #+0]
   \   00000012   0x21BF             MOVS     R1,#+191
   \   00000014   0x4001             ANDS     R1,R1,R0
   \   00000016   0x4668             MOV      R0,SP
   \   00000018   0x7840             LDRB     R0,[R0, #+1]
   \   0000001A   0x2240             MOVS     R2,#+64
   \   0000001C   0x4010             ANDS     R0,R0,R2
   \   0000001E   0x4308             ORRS     R0,R0,R1
   \   00000020   0x....             LDR      R1,??DataTable9_4  ;; 0x400ff041
   \   00000022   0x7008             STRB     R0,[R1, #+0]
   \   00000024   0x....             LDR      R0,??DataTable9_8
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0x9000             STR      R0,[SP, #+0]
   \   0000002A   0x....             LDR      R0,??DataTable9_6  ;; 0x400ff055
   \   0000002C   0x7800             LDRB     R0,[R0, #+0]
   \   0000002E   0x21BF             MOVS     R1,#+191
   \   00000030   0x4001             ANDS     R1,R1,R0
   \   00000032   0x4668             MOV      R0,SP
   \   00000034   0x7800             LDRB     R0,[R0, #+0]
   \   00000036   0x2240             MOVS     R2,#+64
   \   00000038   0x4010             ANDS     R0,R0,R2
   \   0000003A   0x4308             ORRS     R0,R0,R1
   \   0000003C   0x....             LDR      R1,??DataTable9_6  ;; 0x400ff055
   \   0000003E   0x7008             STRB     R0,[R1, #+0]
    198          for(i=0;i<8;i++)
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x0005             MOVS     R5,R0
   \                     ??read_byte_0: (+1)
   \   00000044   0xB2ED             UXTB     R5,R5
   \   00000046   0x2D08             CMP      R5,#+8
   \   00000048   0xDA1A             BGE      ??read_byte_1
    199          {
    200          SCK_0;//
   \   0000004A   0x....             LDR      R0,??DataTable9_4  ;; 0x400ff041
   \   0000004C   0x7800             LDRB     R0,[R0, #+0]
   \   0000004E   0x21DF             MOVS     R1,#+223
   \   00000050   0x4001             ANDS     R1,R1,R0
   \   00000052   0x....             LDR      R0,??DataTable9_4  ;; 0x400ff041
   \   00000054   0x7001             STRB     R1,[R0, #+0]
    201          arch_delay(60);//延时2us
   \   00000056   0x203C             MOVS     R0,#+60
   \   00000058   0x.... 0x....      BL       arch_delay
    202          SCK_1;
   \   0000005C   0x....             LDR      R0,??DataTable9_4  ;; 0x400ff041
   \   0000005E   0x7800             LDRB     R0,[R0, #+0]
   \   00000060   0x2120             MOVS     R1,#+32
   \   00000062   0x4301             ORRS     R1,R1,R0
   \   00000064   0x....             LDR      R0,??DataTable9_4  ;; 0x400ff041
   \   00000066   0x7001             STRB     R1,[R0, #+0]
    203          receive=receive<<1;
   \   00000068   0x0076             LSLS     R6,R6,#+1
    204            if(READ_SDA)receive++;
   \   0000006A   0x2040             MOVS     R0,#+64
   \   0000006C   0x.... 0x....      BL       GPIO_ReadInputDataBit
   \   00000070   0x2800             CMP      R0,#+0
   \   00000072   0xD000             BEQ      ??read_byte_2
   \   00000074   0x1C76             ADDS     R6,R6,#+1
    205            arch_delay(25);//延时1us
   \                     ??read_byte_2: (+1)
   \   00000076   0x2019             MOVS     R0,#+25
   \   00000078   0x.... 0x....      BL       arch_delay
    206          }
   \   0000007C   0x1C6D             ADDS     R5,R5,#+1
   \   0000007E   0xE7E1             B        ??read_byte_0
    207          if(!ack1)
   \                     ??read_byte_1: (+1)
   \   00000080   0xB2E4             UXTB     R4,R4
   \   00000082   0x2C00             CMP      R4,#+0
   \   00000084   0xD102             BNE      ??read_byte_3
    208            IIC_NAck();//发送nACK
   \   00000086   0x.... 0x....      BL       IIC_NAck
   \   0000008A   0xE001             B        ??read_byte_4
    209          else
    210            IIC_Ack(); //发送ACK  
   \                     ??read_byte_3: (+1)
   \   0000008C   0x.... 0x....      BL       IIC_Ack
    211          return receive;
   \                     ??read_byte_4: (+1)
   \   00000090   0x0030             MOVS     R0,R6
   \   00000092   0xB2C0             UXTB     R0,R0
   \   00000094   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    212          
    213          }
    214          
    215           
    216          
    217          
    218          
    219          
    220          
    221          
    222          /*
    223          *检测ACK应答
    224          */
    225          /*  uint8 I2C_Check(void)
    226          {
    227              uint8 result;  
    228              SDA_1;    //释放SDA数据总线  
    229              arch_delay(1);  
    230              SCK_1;  
    231              arch_delay(1);  
    232              result =GPIO_Get1(PIN6);  
    233              SCK_0;  
    234              return (result);   //低电平  ACk应答  
    235          }*/
    236          
    237          
    238          
    239          

   \                                 In section .text, align 2, keep-with-next
    240          uint8  GPIO_ReadInputDataBit(uint16 GPIO_PIN)
    241          {
   \                     GPIO_ReadInputDataBit: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0x0001             MOVS     R1,R0
    242            uint8 bitstatus = 0x00;
   \   00000004   0x2000             MOVS     R0,#+0
    243          if((GPIOF_BASE_PTR->PDIR&0x40)!=(uint32)(Bit_RESET))
   \   00000006   0x....             LDR      R2,??DataTable9_9  ;; 0x400ff051
   \   00000008   0x7812             LDRB     R2,[R2, #+0]
   \   0000000A   0xB2D2             UXTB     R2,R2
   \   0000000C   0x0652             LSLS     R2,R2,#+25
   \   0000000E   0xD502             BPL      ??GPIO_ReadInputDataBit_0
    244          {
    245          bitstatus=(uint8)Bit_SET;
   \   00000010   0x2201             MOVS     R2,#+1
   \   00000012   0x0010             MOVS     R0,R2
   \   00000014   0xE001             B        ??GPIO_ReadInputDataBit_1
    246          }
    247          else
    248          {
    249           bitstatus=(uint8)Bit_RESET;
   \                     ??GPIO_ReadInputDataBit_0: (+1)
   \   00000016   0x2200             MOVS     R2,#+0
   \   00000018   0x0010             MOVS     R0,R2
    250          }  
    251          return bitstatus;
   \                     ??GPIO_ReadInputDataBit_1: (+1)
   \   0000001A   0xB2C0             UXTB     R0,R0
   \   0000001C   0xBD00             POP      {PC}             ;; return
    252          
    253          }
    254          
    255          
    256          /*****************************************************************
    257          //函数名称：uint8 24C16_Check(void)
    258          //功能描述：检测24c16是否正常
    259          /检测失败返回1
    260          /检测成功返回0
    261          //designer: niub
    262          //Data    :2017-3-3
    263          *****************************************************************/

   \                                 In section .text, align 2, keep-with-next
    264          uint8   Check(void)
    265          {
   \                     Check: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    266          	uint8 tempc;
    267          	tempc=read_add(2047);//			   
   \   00000002   0x....             LDR      R0,??DataTable9_10  ;; 0x7ff
   \   00000004   0x.... 0x....      BL       read_add
   \   00000008   0x0004             MOVS     R4,R0
    268          	if(tempc==0x55)return 0;		   
   \   0000000A   0xB2E4             UXTB     R4,R4
   \   0000000C   0x2C55             CMP      R4,#+85
   \   0000000E   0xD101             BNE      ??Check_0
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xE00D             B        ??Check_1
    269          	//else//
    270          	{
    271                      write_add(2047,0x55);
   \                     ??Check_0: (+1)
   \   00000014   0x2155             MOVS     R1,#+85
   \   00000016   0x....             LDR      R0,??DataTable9_10  ;; 0x7ff
   \   00000018   0x.... 0x....      BL       write_add
    272          	    tempc=read_add(2047);	  
   \   0000001C   0x....             LDR      R0,??DataTable9_10  ;; 0x7ff
   \   0000001E   0x.... 0x....      BL       read_add
   \   00000022   0x0004             MOVS     R4,R0
    273          		if(tempc==0X55)
   \   00000024   0xB2E4             UXTB     R4,R4
   \   00000026   0x2C55             CMP      R4,#+85
   \   00000028   0xD101             BNE      ??Check_2
    274                            return 0;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0xE000             B        ??Check_1
    275          	}
    276          	return 1;											  
   \                     ??Check_2: (+1)
   \   0000002E   0x2001             MOVS     R0,#+1
   \                     ??Check_1: (+1)
   \   00000030   0xBD10             POP      {R4,PC}          ;; return
    277          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x400FF041         DC32     0x400ff041

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x400FF055         DC32     0x400ff055

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x........         DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x........         DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x........         DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x........         DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0x........         DC32     ?_7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   0x........         DC32     ?_8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \   00000000   0x........         DC32     ?_9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_2:
   \   00000000   0x0003D090         DC32     0x3d090

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_3:
   \   00000000   0x........         DC32     ?_10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_4:
   \   00000000   0x400FF041         DC32     0x400ff041

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_5:
   \   00000000   0x........         DC32     ?_11

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_6:
   \   00000000   0x400FF055         DC32     0x400ff055

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_7:
   \   00000000   0x........         DC32     ?_12

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_8:
   \   00000000   0x........         DC32     ?_13

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_9:
   \   00000000   0x400FF051         DC32     0x400ff051

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_10:
   \   00000000   0x000007FF         DC32     0x7ff

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0xFF 0x00          DC8 255, 0, 0, 0
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0xFF 0x00          DC8 255, 0, 0, 0
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0xFF 0x00          DC8 255, 0, 0, 0
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \                     ?_3:
   \   00000000   0xFF 0x00          DC8 255, 0, 0, 0
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \                     ?_4:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \                     ?_5:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \                     ?_6:
   \   00000000   0xFF 0x00          DC8 255, 0, 0, 0
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \                     ?_7:
   \   00000000   0xFF 0x00          DC8 255, 0, 0, 0
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \                     ?_8:
   \   00000000   0xFF 0x00          DC8 255, 0, 0, 0
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \                     ?_9:
   \   00000000   0xFF 0x00          DC8 255, 0, 0, 0
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \                     ?_10:
   \   00000000   0xFF 0x00          DC8 255, 0, 0, 0
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \                     ?_11:
   \   00000000   0xFF 0x00          DC8 255, 0, 0, 0
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \                     ?_12:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \                     ?_13:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
    278          
    279          /******************************************************************************
    280           * End of module                                                              *
    281           ******************************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   Check
         8   -> read_add
         8   -> write_add
       4   GPIO_ReadInputDataBit
       8   IIC_Ack
         8   -> arch_delay
       8   IIC_NAck
         8   -> arch_delay
      16   IIC_Wait_Ack
        16   -> GPIO_ReadInputDataBit
        16   -> StopI2C
        16   -> arch_delay
       8   StartI2C
         8   -> arch_delay
       8   StopI2C
         8   -> arch_delay
       0   i2c_24c16
      16   read_add
        16   -> IIC_Wait_Ack
        16   -> StartI2C
        16   -> StopI2C
        16   -> read_byte
        16   -> write_byte
        16 __aeabi_idiv
        16 __aeabi_idivmod
      24   read_byte
        24   -> GPIO_ReadInputDataBit
        24   -> IIC_Ack
        24   -> IIC_NAck
        24   -> arch_delay
      16   write_add
        16   -> IIC_Wait_Ack
        16   -> StartI2C
        16   -> StopI2C
        16   -> arch_delay
        16   -> write_byte
        16 __aeabi_idiv
        16 __aeabi_idivmod
      16   write_byte
        16   -> arch_delay


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_10
       4  ??DataTable9_2
       4  ??DataTable9_3
       4  ??DataTable9_4
       4  ??DataTable9_5
       4  ??DataTable9_6
       4  ??DataTable9_7
       4  ??DataTable9_8
       4  ??DataTable9_9
       4  ?_0
       4  ?_1
       4  ?_10
       4  ?_11
       4  ?_12
       4  ?_13
       4  ?_2
       4  ?_3
       4  ?_4
       4  ?_5
       4  ?_6
       4  ?_7
       4  ?_8
       4  ?_9
      50  Check
      30  GPIO_ReadInputDataBit
       1  IFACK
     120  IIC_Ack
     120  IIC_NAck
     140  IIC_Wait_Ack
       1  NO_ACK
     120  StartI2C
     114  StopI2C
       2  i2c_24c16
      88  read_add
     150  read_byte
      84  write_add
     170  write_byte

 
     2 bytes in section .bss
    56 bytes in section .rodata
 1 272 bytes in section .text
 
 1 272 bytes of CODE  memory
    56 bytes of CONST memory
     2 bytes of DATA  memory

Errors: none
Warnings: none
