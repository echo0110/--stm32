###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        20/Mar/2017  09:47:57
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\Freescale\KM128SWDRV_R4_1_6\src\common\arm_cm0.c
#    Command line =  
#        C:\Freescale\KM128SWDRV_R4_1_6\src\common\arm_cm0.c -D NDEBUG -lCN
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\i2c_test\Release\List\
#        -o
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\i2c_test\Release\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ --no_mem_idioms -e --fpu=None --dlib_config
#        D:\IAR7.4anzhuang\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\i2c_test\..\..\..\..\src\common\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\i2c_test\..\..\..\..\src\drivers\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\i2c_test\..\..\..\..\src\freemaster\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\i2c_test\..\..\..\..\src\projects\i2c_test\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\i2c_test\..\..\..\..\src\toolchain\iar\
#        -On
#    List file    =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\i2c_test\Release\List\arm_cm0.lst
#    Object file  =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\i2c_test\Release\Obj\arm_cm0.o
#
###############################################################################

C:\Freescale\KM128SWDRV_R4_1_6\src\common\arm_cm0.c
      1          /******************************************************************************
      2           * (c) Copyright 2010-2016, Freescale Semiconductor Inc.
      3           * ALL RIGHTS RESERVED.
      4           ***************************************************************************//*!
      5           * @file      arm_cm0.c
      6           * @version   1.0.2.0
      7           * @date      Mar-27-2016
      8           * @brief     arm_cm0 driver implementation.
      9           ******************************************************************************/
     10          #include "common.h"
     11          
     12          /******************************************************************************
     13           * data type definitions                                                      *
     14           ******************************************************************************/

   \                                 In section .bss, align 4
     15          SVC_CALLBACK pCallbackSVC;
   \                     pCallbackSVC:
   \   00000000                      DS8 4
     16          
     17          /******************************************************************************
     18           * public function definitions                                                *
     19           ******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
     20          void SVC_InstallCallback (uint8 ip, SVC_CALLBACK pCallback)
     21          {
   \                     SVC_InstallCallback: (+1)
   \   00000000   0xB500             PUSH     {LR}
     22            if (pCallback) { pCallbackSVC = pCallback; FAULT_SetIsr(INT_SVCall,ip); }
   \   00000002   0x000A             MOVS     R2,R1
   \   00000004   0x2A00             CMP      R2,#+0
   \   00000006   0xD008             BEQ      ??SVC_InstallCallback_0
   \   00000008   0x4A04             LDR      R2,??SVC_InstallCallback_1
   \   0000000A   0x6011             STR      R1,[R2, #+0]
   \   0000000C   0x4A04             LDR      R2,??SVC_InstallCallback_1+0x4  ;; 0xe000ed1c
   \   0000000E   0x6812             LDR      R2,[R2, #+0]
   \   00000010   0xB2C0             UXTB     R0,R0
   \   00000012   0x0783             LSLS     R3,R0,#+30
   \   00000014   0x4313             ORRS     R3,R3,R2
   \   00000016   0x4A02             LDR      R2,??SVC_InstallCallback_1+0x4  ;; 0xe000ed1c
   \   00000018   0x6013             STR      R3,[R2, #+0]
     23          }
   \                     ??SVC_InstallCallback_0: (+1)
   \   0000001A   0xBD00             POP      {PC}             ;; return
   \                     ??SVC_InstallCallback_1:
   \   0000001C   0x........         DC32     pCallbackSVC
   \   00000020   0xE000ED1C         DC32     0xe000ed1c
     24          
     25          /******************************************************************************
     26           * interrupt function definitions - please refer to svcall_isr.s module       *
     27           ******************************************************************************/
     28          /******************************************************************************
     29           * End of module                                                              *
     30           ******************************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       4   SVC_InstallCallback


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      36  SVC_InstallCallback
       4  pCallbackSVC

 
  4 bytes in section .bss
 36 bytes in section .text
 
 36 bytes of CODE memory
  4 bytes of DATA memory

Errors: none
Warnings: none
