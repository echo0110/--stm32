###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        20/Mar/2017  09:47:58
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\i2c\flash.c
#    Command line =  
#        C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\i2c\flash.c -D NDEBUG -lCN
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\i2c_test\Release\List\
#        -o
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\i2c_test\Release\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ --no_mem_idioms -e --fpu=None --dlib_config
#        D:\IAR7.4anzhuang\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\i2c_test\..\..\..\..\src\common\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\i2c_test\..\..\..\..\src\drivers\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\i2c_test\..\..\..\..\src\freemaster\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\i2c_test\..\..\..\..\src\projects\i2c_test\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\i2c_test\..\..\..\..\src\toolchain\iar\
#        -On
#    List file    =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\i2c_test\Release\List\flash.lst
#    Object file  =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\i2c_test\Release\Obj\flash.o
#
###############################################################################

C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\i2c\flash.c
      1          /******************************************************************************
      2           * (c) Copyright 2010-2015, Freescale Semiconductor Inc.
      3           * ALL RIGHTS RESERVED.
      4           ***************************************************************************//*!
      5           * @file      i2c.c
      6           * @version   1.0.4.0
      7           * @date      Apr-20-2014
      8           * @brief     I2C bus controller (I2C) driver source code.
      9          ******************************************************************************/
     10          #include "common.h"
     11          #include "flash.h"
     12          #include "spi/spi.h"
     13          #include "gpio/gpio.h"
     14          #include "headers/MKM34ZA5.h"
     15          #include "i2c/24c16.h"
     16          //#include "spi.h"
     17          //PTF5---SCL
     18          //PTF6---SDA
     19          void  SST25_write(unsigned long addr,unsigned char data);
     20          

   \                                 In section .bss, align 4
     21          uint8 spi_buff[16];//={0x00,0x09,0x9f};
   \                     spi_buff:
   \   00000000                      DS8 16

   \                                 In section .bss, align 4
     22          uint32 temp_id=0,temp_id1=0;
   \                     temp_id:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     temp_id1:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     23          uint32 Temp=0,Temp1=0,Temp2=0,Temp3=0;
   \                     Temp:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     Temp1:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     Temp2:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     Temp3:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     24          unsigned char SST25_buffer[4096];
   \                     SST25_buffer:
   \   00000000                      DS8 4096
     25          
     26          //  unsigned char  SendByte(unsigned char byte)
     27          //{
     28          // 
     29          //
     30          //  // while(SPI_TxCmpl(SPI0)==0x20); //判断发送寄存器数据有没有发送完   //true 和fause  待测试  false发送完跳出。
     31          //   SPI_PutByte(SPI0,byte);//向发送寄存器写发送的数据
     32          //    //while(SPI_RxFull(SPI0)==0);//判断接收寄存器有没有收到数据 0是代表没有接收到数据   1接收到数据后置1
     33          //     return SPI_TxRxByte(SPI0,byte);//返回接收到的数据
     34          //}
     35          
     36          
     37          
     38          //读数据APi

   \                                 In section .text, align 2, keep-with-next
     39           unsigned   char SST25_read(unsigned long addr)
     40          {
   \                     SST25_read: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
     41           unsigned char i=0;
   \   00000004   0x2500             MOVS     R5,#+0
     42           uint32  max_addr=0x1fffff;
   \   00000006   0x....             LDR      R6,??DataTable6  ;; 0x1fffff
     43           
     44           if(addr>max_addr)  return(0);//
   \   00000008   0x42A6             CMP      R6,R4
   \   0000000A   0xD201             BCS      ??SST25_read_0
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0xE01A             B        ??SST25_read_1
     45           SPI0_TxRxByte(0x03);//send read  commmand
   \                     ??SST25_read_0: (+1)
   \   00000010   0x2003             MOVS     R0,#+3
   \   00000012   0x.... 0x....      BL       SPI0_TxRxByte
     46           SPI0_TxRxByte(addr&0xffffff>>16);//先发送高8位
   \   00000016   0x0020             MOVS     R0,R4
   \   00000018   0xB2C0             UXTB     R0,R0
   \   0000001A   0x.... 0x....      BL       SPI0_TxRxByte
     47           SPI0_TxRxByte(addr&0xffff>>8);
   \   0000001E   0x0020             MOVS     R0,R4
   \   00000020   0xB2C0             UXTB     R0,R0
   \   00000022   0x.... 0x....      BL       SPI0_TxRxByte
     48           SPI0_TxRxByte(addr&0xff);//低8位
   \   00000026   0x0020             MOVS     R0,R4
   \   00000028   0xB2C0             UXTB     R0,R0
   \   0000002A   0x.... 0x....      BL       SPI0_TxRxByte
     49           i=SPI0_TxRxByte(0xff);//发送哑字节 以读取数据
   \   0000002E   0x20FF             MOVS     R0,#+255
   \   00000030   0x.... 0x....      BL       SPI0_TxRxByte
   \   00000034   0x0005             MOVS     R5,R0
     50           SPISS_1;
   \   00000036   0x....             LDR      R0,??DataTable6_1  ;; 0x400ff042
   \   00000038   0x7800             LDRB     R0,[R0, #+0]
   \   0000003A   0x2104             MOVS     R1,#+4
   \   0000003C   0x4301             ORRS     R1,R1,R0
   \   0000003E   0x....             LDR      R0,??DataTable6_1  ;; 0x400ff042
   \   00000040   0x7001             STRB     R1,[R0, #+0]
     51           return(i);
   \   00000042   0x0028             MOVS     R0,R5
   \   00000044   0xB2C0             UXTB     R0,R0
   \                     ??SST25_read_1: (+1)
   \   00000046   0xBD70             POP      {R4-R6,PC}       ;; return
     52          }
     53          
     54          //写数据APi

   \                                 In section .text, align 2, keep-with-next
     55          void  SST25_write(unsigned long addr,unsigned char data)
     56          {
   \                     SST25_write: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000F             MOVS     R7,R1
     57            uint8 temp=0,statval=0;
   \   00000006   0x2500             MOVS     R5,#+0
   \   00000008   0x2600             MOVS     R6,#+0
     58            sect_clr(addr);//擦除页
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0x.... 0x....      BL       sect_clr
     59            //SST25_E4K(0);
     60            wsr();//使能写状态
   \   00000010   0x.... 0x....      BL       wsr
     61            wen();//写使能
   \   00000014   0x.... 0x....      BL       wen
     62           SPISS_0;
   \   00000018   0x....             LDR      R0,??DataTable6_1  ;; 0x400ff042
   \   0000001A   0x7800             LDRB     R0,[R0, #+0]
   \   0000001C   0x21FB             MOVS     R1,#+251
   \   0000001E   0x4001             ANDS     R1,R1,R0
   \   00000020   0x....             LDR      R0,??DataTable6_1  ;; 0x400ff042
   \   00000022   0x7001             STRB     R1,[R0, #+0]
     63           temp=SPI0_TxRxByte(0x05);//Read-Status-Register   //0x05
   \   00000024   0x2005             MOVS     R0,#+5
   \   00000026   0x.... 0x....      BL       SPI0_TxRxByte
   \   0000002A   0x0005             MOVS     R5,R0
     64           SPISS_1;
   \   0000002C   0x....             LDR      R0,??DataTable6_1  ;; 0x400ff042
   \   0000002E   0x7800             LDRB     R0,[R0, #+0]
   \   00000030   0x2104             MOVS     R1,#+4
   \   00000032   0x4301             ORRS     R1,R1,R0
   \   00000034   0x....             LDR      R0,??DataTable6_1  ;; 0x400ff042
   \   00000036   0x7001             STRB     R1,[R0, #+0]
     65           SPISS_0;
   \   00000038   0x....             LDR      R0,??DataTable6_1  ;; 0x400ff042
   \   0000003A   0x7800             LDRB     R0,[R0, #+0]
   \   0000003C   0x21FB             MOVS     R1,#+251
   \   0000003E   0x4001             ANDS     R1,R1,R0
   \   00000040   0x....             LDR      R0,??DataTable6_1  ;; 0x400ff042
   \   00000042   0x7001             STRB     R1,[R0, #+0]
     66           SPI0_TxRxByte(0x50);//Enable-Write-Status-Registe
   \   00000044   0x2050             MOVS     R0,#+80
   \   00000046   0x.... 0x....      BL       SPI0_TxRxByte
     67           SPISS_1;
   \   0000004A   0x....             LDR      R0,??DataTable6_1  ;; 0x400ff042
   \   0000004C   0x7800             LDRB     R0,[R0, #+0]
   \   0000004E   0x2104             MOVS     R1,#+4
   \   00000050   0x4301             ORRS     R1,R1,R0
   \   00000052   0x....             LDR      R0,??DataTable6_1  ;; 0x400ff042
   \   00000054   0x7001             STRB     R1,[R0, #+0]
     68           SPISS_0;
   \   00000056   0x....             LDR      R0,??DataTable6_1  ;; 0x400ff042
   \   00000058   0x7800             LDRB     R0,[R0, #+0]
   \   0000005A   0x21FB             MOVS     R1,#+251
   \   0000005C   0x4001             ANDS     R1,R1,R0
   \   0000005E   0x....             LDR      R0,??DataTable6_1  ;; 0x400ff042
   \   00000060   0x7001             STRB     R1,[R0, #+0]
     69           SPI0_TxRxByte(0x01);//Write-Status-Register 
   \   00000062   0x2001             MOVS     R0,#+1
   \   00000064   0x.... 0x....      BL       SPI0_TxRxByte
     70           SPI0_TxRxByte(0);//Block Protection  使flash全区可写
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0x.... 0x....      BL       SPI0_TxRxByte
     71           SPISS_1;
   \   0000006E   0x....             LDR      R0,??DataTable6_1  ;; 0x400ff042
   \   00000070   0x7800             LDRB     R0,[R0, #+0]
   \   00000072   0x2104             MOVS     R1,#+4
   \   00000074   0x4301             ORRS     R1,R1,R0
   \   00000076   0x....             LDR      R0,??DataTable6_1  ;; 0x400ff042
   \   00000078   0x7001             STRB     R1,[R0, #+0]
     72           SPISS_0;
   \   0000007A   0x....             LDR      R0,??DataTable6_1  ;; 0x400ff042
   \   0000007C   0x7800             LDRB     R0,[R0, #+0]
   \   0000007E   0x21FB             MOVS     R1,#+251
   \   00000080   0x4001             ANDS     R1,R1,R0
   \   00000082   0x....             LDR      R0,??DataTable6_1  ;; 0x400ff042
   \   00000084   0x7001             STRB     R1,[R0, #+0]
     73           SPI0_TxRxByte(0x06);//write enable
   \   00000086   0x2006             MOVS     R0,#+6
   \   00000088   0x.... 0x....      BL       SPI0_TxRxByte
     74           SPISS_1;
   \   0000008C   0x....             LDR      R0,??DataTable6_1  ;; 0x400ff042
   \   0000008E   0x7800             LDRB     R0,[R0, #+0]
   \   00000090   0x2104             MOVS     R1,#+4
   \   00000092   0x4301             ORRS     R1,R1,R0
   \   00000094   0x....             LDR      R0,??DataTable6_1  ;; 0x400ff042
   \   00000096   0x7001             STRB     R1,[R0, #+0]
     75           SPISS_0;
   \   00000098   0x....             LDR      R0,??DataTable6_1  ;; 0x400ff042
   \   0000009A   0x7800             LDRB     R0,[R0, #+0]
   \   0000009C   0x21FB             MOVS     R1,#+251
   \   0000009E   0x4001             ANDS     R1,R1,R0
   \   000000A0   0x....             LDR      R0,??DataTable6_1  ;; 0x400ff042
   \   000000A2   0x7001             STRB     R1,[R0, #+0]
     76           SPI0_TxRxByte(0x02);//To Program One Data Byte   发送字节烧写
   \   000000A4   0x2002             MOVS     R0,#+2
   \   000000A6   0x.... 0x....      BL       SPI0_TxRxByte
     77           SPI0_TxRxByte(addr&0xffffff>>16);//发送3字节的地址信息
   \   000000AA   0x0020             MOVS     R0,R4
   \   000000AC   0xB2C0             UXTB     R0,R0
   \   000000AE   0x.... 0x....      BL       SPI0_TxRxByte
     78           SPI0_TxRxByte(addr&0xffff>>8);
   \   000000B2   0x0020             MOVS     R0,R4
   \   000000B4   0xB2C0             UXTB     R0,R0
   \   000000B6   0x.... 0x....      BL       SPI0_TxRxByte
     79           SPI0_TxRxByte(addr&0xff);
   \   000000BA   0x0020             MOVS     R0,R4
   \   000000BC   0xB2C0             UXTB     R0,R0
   \   000000BE   0x.... 0x....      BL       SPI0_TxRxByte
     80           SPI0_TxRxByte(data);//发送要烧写的数据
   \   000000C2   0x0038             MOVS     R0,R7
   \   000000C4   0xB2C0             UXTB     R0,R0
   \   000000C6   0x.... 0x....      BL       SPI0_TxRxByte
     81           SPISS_1;
   \   000000CA   0x....             LDR      R0,??DataTable6_1  ;; 0x400ff042
   \   000000CC   0x7800             LDRB     R0,[R0, #+0]
   \   000000CE   0x2104             MOVS     R1,#+4
   \   000000D0   0x4301             ORRS     R1,R1,R0
   \   000000D2   0x....             LDR      R0,??DataTable6_1  ;; 0x400ff042
   \   000000D4   0x7001             STRB     R1,[R0, #+0]
     82           do
     83           {
     84             SPISS_0;
   \                     ??SST25_write_0: (+1)
   \   000000D6   0x....             LDR      R0,??DataTable6_1  ;; 0x400ff042
   \   000000D8   0x7800             LDRB     R0,[R0, #+0]
   \   000000DA   0x21FB             MOVS     R1,#+251
   \   000000DC   0x4001             ANDS     R1,R1,R0
   \   000000DE   0x....             LDR      R0,??DataTable6_1  ;; 0x400ff042
   \   000000E0   0x7001             STRB     R1,[R0, #+0]
     85            statval=SPI0_TxRxByte(0x05);//保存读到的状态寄存器的值
   \   000000E2   0x2005             MOVS     R0,#+5
   \   000000E4   0x.... 0x....      BL       SPI0_TxRxByte
   \   000000E8   0x0006             MOVS     R6,R0
     86            SPISS_1;
   \   000000EA   0x....             LDR      R0,??DataTable6_1  ;; 0x400ff042
   \   000000EC   0x7800             LDRB     R0,[R0, #+0]
   \   000000EE   0x2104             MOVS     R1,#+4
   \   000000F0   0x4301             ORRS     R1,R1,R0
   \   000000F2   0x....             LDR      R0,??DataTable6_1  ;; 0x400ff042
   \   000000F4   0x7001             STRB     R1,[R0, #+0]
     87            
     88           }while(statval==0x03);  //一直等待 直到芯片空闲
   \   000000F6   0xB2F6             UXTB     R6,R6
   \   000000F8   0x2E03             CMP      R6,#+3
   \   000000FA   0xD0EC             BEQ      ??SST25_write_0
     89            SPISS_0;
   \   000000FC   0x....             LDR      R0,??DataTable6_1  ;; 0x400ff042
   \   000000FE   0x7800             LDRB     R0,[R0, #+0]
   \   00000100   0x21FB             MOVS     R1,#+251
   \   00000102   0x4001             ANDS     R1,R1,R0
   \   00000104   0x....             LDR      R0,??DataTable6_1  ;; 0x400ff042
   \   00000106   0x7001             STRB     R1,[R0, #+0]
     90            SPI0_TxRxByte(0x06);//发送写使能
   \   00000108   0x2006             MOVS     R0,#+6
   \   0000010A   0x.... 0x....      BL       SPI0_TxRxByte
     91            SPISS_1;
   \   0000010E   0x....             LDR      R0,??DataTable6_1  ;; 0x400ff042
   \   00000110   0x7800             LDRB     R0,[R0, #+0]
   \   00000112   0x2104             MOVS     R1,#+4
   \   00000114   0x4301             ORRS     R1,R1,R0
   \   00000116   0x....             LDR      R0,??DataTable6_1  ;; 0x400ff042
   \   00000118   0x7001             STRB     R1,[R0, #+0]
     92            SPISS_0;
   \   0000011A   0x....             LDR      R0,??DataTable6_1  ;; 0x400ff042
   \   0000011C   0x7800             LDRB     R0,[R0, #+0]
   \   0000011E   0x21FB             MOVS     R1,#+251
   \   00000120   0x4001             ANDS     R1,R1,R0
   \   00000122   0x....             LDR      R0,??DataTable6_1  ;; 0x400ff042
   \   00000124   0x7001             STRB     R1,[R0, #+0]
     93            SPI0_TxRxByte(0x50);//Enable-Write-Status-Register 
   \   00000126   0x2050             MOVS     R0,#+80
   \   00000128   0x.... 0x....      BL       SPI0_TxRxByte
     94            SPISS_1;
   \   0000012C   0x....             LDR      R0,??DataTable6_1  ;; 0x400ff042
   \   0000012E   0x7800             LDRB     R0,[R0, #+0]
   \   00000130   0x2104             MOVS     R1,#+4
   \   00000132   0x4301             ORRS     R1,R1,R0
   \   00000134   0x....             LDR      R0,??DataTable6_1  ;; 0x400ff042
   \   00000136   0x7001             STRB     R1,[R0, #+0]
     95            SPISS_0;
   \   00000138   0x....             LDR      R0,??DataTable6_1  ;; 0x400ff042
   \   0000013A   0x7800             LDRB     R0,[R0, #+0]
   \   0000013C   0x21FB             MOVS     R1,#+251
   \   0000013E   0x4001             ANDS     R1,R1,R0
   \   00000140   0x....             LDR      R0,??DataTable6_1  ;; 0x400ff042
   \   00000142   0x7001             STRB     R1,[R0, #+0]
     96            SPI0_TxRxByte(0x01);
   \   00000144   0x2001             MOVS     R0,#+1
   \   00000146   0x.... 0x....      BL       SPI0_TxRxByte
     97            SPI0_TxRxByte(temp);//恢复状态寄存器的设置信息
   \   0000014A   0x0028             MOVS     R0,R5
   \   0000014C   0xB2C0             UXTB     R0,R0
   \   0000014E   0x.... 0x....      BL       SPI0_TxRxByte
     98            SPISS_1;
   \   00000152   0x....             LDR      R0,??DataTable6_1  ;; 0x400ff042
   \   00000154   0x7800             LDRB     R0,[R0, #+0]
   \   00000156   0x2104             MOVS     R1,#+4
   \   00000158   0x4301             ORRS     R1,R1,R0
   \   0000015A   0x....             LDR      R0,??DataTable6_1  ;; 0x400ff042
   \   0000015C   0x7001             STRB     R1,[R0, #+0]
     99          }
   \   0000015E   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    100             
    101          
    102          
    103          
    104          
    105          
    106          /*****************************************************************
    107          //函数名称：SST25_ReadID
    108          //功能描述：SST25VF016B的ID号--Jedec_ID
    109          //designer: niub
    110          //Data    :2017-2-10
    111          *****************************************************************/

   \                                 In section .text, align 2, keep-with-next
    112          unsigned long SST25_ReadID(void)
    113          {
   \                     SST25_ReadID: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    114          
    115          //unsigned long temp_id=0;
    116          SPISS_0;
   \   00000002   0x....             LDR      R0,??DataTable6_1  ;; 0x400ff042
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x21FB             MOVS     R1,#+251
   \   00000008   0x4001             ANDS     R1,R1,R0
   \   0000000A   0x....             LDR      R0,??DataTable6_1  ;; 0x400ff042
   \   0000000C   0x7001             STRB     R1,[R0, #+0]
    117          //SPI0_MISO_0;
    118          //SPI0_MOSI_0;
    119          //spi_buff[0]=0x90;
    120          //SPI0_BASE_PTR->S=0x03;
    121          //SPI0_BASE_PTR->DL=0x01;
    122          //SPI0_BASE_PTR->DL=0x01;
    123          //SPI0_BASE_PTR->DL=0x01;
    124          //SPI0_BASE_PTR->DL=0x01;
    125          //SPI0_BASE_PTR->BR=0x04;
    126          //SPI0_BASE_PTR->BR=0x04;
    127          //SPI0_BASE_PTR->BR=0x04;
    128          //SPI0_BASE_PTR->C1=0x05;
    129          //SPI_CommByte(SPI0,spi_buff,1,NULL,0);//发送读设备ID命令 /* 1 Tx byte, no receiving  */
    130          //spi_buff[0]=0x00;
    131          //SPI_CommByte(SPI0,spi_buff,1,NULL,0);
    132          //SPI_CommByte(SPI0,spi_buff,1,NULL,0);
    133          //SPI_CommByte(SPI0,spi_buff,1,NULL,0);
    134          SPI0_TxRxByte(0x90);
   \   0000000E   0x2090             MOVS     R0,#+144
   \   00000010   0x.... 0x....      BL       SPI0_TxRxByte
    135          Temp1=SPI0_TxRxByte(0x00);
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x.... 0x....      BL       SPI0_TxRxByte
   \   0000001A   0x....             LDR      R1,??DataTable7
   \   0000001C   0x6008             STR      R0,[R1, #+0]
    136          Temp2=SPI0_TxRxByte(0x00);
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x.... 0x....      BL       SPI0_TxRxByte
   \   00000024   0x....             LDR      R1,??DataTable7_1
   \   00000026   0x6008             STR      R0,[R1, #+0]
    137          Temp3=SPI0_TxRxByte(0x00);
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x.... 0x....      BL       SPI0_TxRxByte
   \   0000002E   0x....             LDR      R1,??DataTable8
   \   00000030   0x6008             STR      R0,[R1, #+0]
    138          temp_id=SPI0_TxRxByte(0);//BF
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x.... 0x....      BL       SPI0_TxRxByte
   \   00000038   0x....             LDR      R1,??DataTable7_2
   \   0000003A   0x6008             STR      R0,[R1, #+0]
    139          temp_id1=SPI0_TxRxByte(0);//41
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0x.... 0x....      BL       SPI0_TxRxByte
   \   00000042   0x....             LDR      R1,??DataTable8_1
   \   00000044   0x6008             STR      R0,[R1, #+0]
    140          //temp_id|=SPI0_TxRxByte(0xff)<<8;
    141          //temp_id|=SPI0_TxRxByte(0xff);
    142          //temp_id=(temp_id|SPI_GetByte(SPI0))<<8;  
    143          ////temp_id=(temp_id|SPI_GetByte(SPI0))<<8;
    144          //temp_id=(temp_id|SPI_GetByte(SPI0));
    145          
    146          SPISS_1;
   \   00000046   0x....             LDR      R0,??DataTable6_1  ;; 0x400ff042
   \   00000048   0x7800             LDRB     R0,[R0, #+0]
   \   0000004A   0x2104             MOVS     R1,#+4
   \   0000004C   0x4301             ORRS     R1,R1,R0
   \   0000004E   0x....             LDR      R0,??DataTable6_1  ;; 0x400ff042
   \   00000050   0x7001             STRB     R1,[R0, #+0]
    147          Temp= (Temp1<< 16)|(Temp2<<8)|Temp3;
   \   00000052   0x....             LDR      R0,??DataTable7
   \   00000054   0x6800             LDR      R0,[R0, #+0]
   \   00000056   0x0400             LSLS     R0,R0,#+16
   \   00000058   0x....             LDR      R1,??DataTable7_1
   \   0000005A   0x6809             LDR      R1,[R1, #+0]
   \   0000005C   0x0209             LSLS     R1,R1,#+8
   \   0000005E   0x4301             ORRS     R1,R1,R0
   \   00000060   0x....             LDR      R0,??DataTable8
   \   00000062   0x6800             LDR      R0,[R0, #+0]
   \   00000064   0x4308             ORRS     R0,R0,R1
   \   00000066   0x....             LDR      R1,??DataTable8_2
   \   00000068   0x6008             STR      R0,[R1, #+0]
    148          return Temp;
   \   0000006A   0x....             LDR      R0,??DataTable8_2
   \   0000006C   0x6800             LDR      R0,[R0, #+0]
   \   0000006E   0xBD02             POP      {R1,PC}          ;; return
    149          }
    150          /******************************
    151          *名称：void sect_clr(unsigned long a1)
    152          *功能：页擦除
    153          *********************************/

   \                                 In section .text, align 2, keep-with-next
    154          void sect_clr(unsigned long a1)
    155          {
   \                     sect_clr: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    156          wsr();
   \   00000004   0x.... 0x....      BL       wsr
    157          wen();
   \   00000008   0x.... 0x....      BL       wen
    158          SPISS_0;	  
   \   0000000C   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   0000000E   0x7800             LDRB     R0,[R0, #+0]
   \   00000010   0x21FB             MOVS     R1,#+251
   \   00000012   0x4001             ANDS     R1,R1,R0
   \   00000014   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   00000016   0x7001             STRB     R1,[R0, #+0]
    159          SPI0_TxRxByte(0x20);
   \   00000018   0x2020             MOVS     R0,#+32
   \   0000001A   0x.... 0x....      BL       SPI0_TxRxByte
    160          SPI0_TxRxByte((a1&0xffffff)>>16);          //addh
   \   0000001E   0x0020             MOVS     R0,R4
   \   00000020   0x0C00             LSRS     R0,R0,#+16
   \   00000022   0xB2C0             UXTB     R0,R0
   \   00000024   0x.... 0x....      BL       SPI0_TxRxByte
    161          SPI0_TxRxByte((a1&0xffff)>>8);          //addl 
   \   00000028   0x0020             MOVS     R0,R4
   \   0000002A   0x0A00             LSRS     R0,R0,#+8
   \   0000002C   0xB2C0             UXTB     R0,R0
   \   0000002E   0x.... 0x....      BL       SPI0_TxRxByte
    162          SPI0_TxRxByte(a1&0xff);                 //wtt
   \   00000032   0x0020             MOVS     R0,R4
   \   00000034   0xB2C0             UXTB     R0,R0
   \   00000036   0x.... 0x....      BL       SPI0_TxRxByte
    163          SPISS_1;;
   \   0000003A   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   0000003C   0x7800             LDRB     R0,[R0, #+0]
   \   0000003E   0x2104             MOVS     R1,#+4
   \   00000040   0x4301             ORRS     R1,R1,R0
   \   00000042   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   00000044   0x7001             STRB     R1,[R0, #+0]
    164          wip();
   \   00000046   0x.... 0x....      BL       wip
    165          }
   \   0000004A   0xBD10             POP      {R4,PC}          ;; return
    166          /****************************************************************************
    167          *名称wsr(void)
    168          * 功能：写状态
    169          ****************************************************************************/ 

   \                                 In section .text, align 2, keep-with-next
    170          void wsr(void){	
   \                     wsr: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    171          SPISS_0;
   \   00000002   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x21FB             MOVS     R1,#+251
   \   00000008   0x4001             ANDS     R1,R1,R0
   \   0000000A   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   0000000C   0x7001             STRB     R1,[R0, #+0]
    172          SPI0_TxRxByte(0x50);
   \   0000000E   0x2050             MOVS     R0,#+80
   \   00000010   0x.... 0x....      BL       SPI0_TxRxByte
    173          SPISS_1; 
   \   00000014   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   00000016   0x7800             LDRB     R0,[R0, #+0]
   \   00000018   0x2104             MOVS     R1,#+4
   \   0000001A   0x4301             ORRS     R1,R1,R0
   \   0000001C   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   0000001E   0x7001             STRB     R1,[R0, #+0]
    174          SPISS_0;
   \   00000020   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   00000022   0x7800             LDRB     R0,[R0, #+0]
   \   00000024   0x21FB             MOVS     R1,#+251
   \   00000026   0x4001             ANDS     R1,R1,R0
   \   00000028   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   0000002A   0x7001             STRB     R1,[R0, #+0]
    175          SPI0_TxRxByte(0x01);
   \   0000002C   0x2001             MOVS     R0,#+1
   \   0000002E   0x.... 0x....      BL       SPI0_TxRxByte
    176          SPI0_TxRxByte(0x00); 
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x.... 0x....      BL       SPI0_TxRxByte
    177          SPISS_1;
   \   00000038   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   0000003A   0x7800             LDRB     R0,[R0, #+0]
   \   0000003C   0x2104             MOVS     R1,#+4
   \   0000003E   0x4301             ORRS     R1,R1,R0
   \   00000040   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   00000042   0x7001             STRB     R1,[R0, #+0]
    178          wip();
   \   00000044   0x.... 0x....      BL       wip
    179          }
   \   00000048   0xBD01             POP      {R0,PC}          ;; return
    180          /****************************************************************************
    181          * 名称：void wip(void)
    182          * 功能：忙检测
    183          
    184          ****************************************************************************/ 

   \                                 In section .text, align 2, keep-with-next
    185          void wip(void){
   \                     wip: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    186          	unsigned char a=1;
   \   00000002   0x2401             MOVS     R4,#+1
    187          	while((a&0x01)==1) a=rdsr();	
   \                     ??wip_0: (+1)
   \   00000004   0xB2E4             UXTB     R4,R4
   \   00000006   0x07E0             LSLS     R0,R4,#+31
   \   00000008   0xD503             BPL      ??wip_1
   \   0000000A   0x.... 0x....      BL       rdsr
   \   0000000E   0x0004             MOVS     R4,R0
   \   00000010   0xE7F8             B        ??wip_0
    188          
    189          }
   \                     ??wip_1: (+1)
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
    190          /****************************************************************************
    191          * 名称：unsigned char rdsr(void)
    192          * 功能： 读状态寄存器
    193          
    194          ****************************************************************************/ 

   \                                 In section .text, align 2, keep-with-next
    195          unsigned char rdsr(void){
   \                     rdsr: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    196          	unsigned char busy=0;
   \   00000002   0x2400             MOVS     R4,#+0
    197          	SPISS_0;
   \   00000004   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   00000006   0x7800             LDRB     R0,[R0, #+0]
   \   00000008   0x21FB             MOVS     R1,#+251
   \   0000000A   0x4001             ANDS     R1,R1,R0
   \   0000000C   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   0000000E   0x7001             STRB     R1,[R0, #+0]
    198                  SPI0_TxRxByte(0x05);
   \   00000010   0x2005             MOVS     R0,#+5
   \   00000012   0x.... 0x....      BL       SPI0_TxRxByte
    199               //busy=5;
    200                  //busy=SPI0_TxRxByte(0);
    201          	busy = SPI_Flash_ReadByte();
   \   00000016   0x.... 0x....      BL       SPI_Flash_ReadByte
   \   0000001A   0x0004             MOVS     R4,R0
    202          	SPISS_1;
   \   0000001C   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   0000001E   0x7800             LDRB     R0,[R0, #+0]
   \   00000020   0x2104             MOVS     R1,#+4
   \   00000022   0x4301             ORRS     R1,R1,R0
   \   00000024   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   00000026   0x7001             STRB     R1,[R0, #+0]
    203          	return(busy);
   \   00000028   0x0020             MOVS     R0,R4
   \   0000002A   0xB2C0             UXTB     R0,R0
   \   0000002C   0xBD10             POP      {R4,PC}          ;; return
    204          	
    205          }
    206          /****************************************************************************
    207          * 名称：void wen(void)
    208          * 功能：写使能
    209          *
    210          *
    211          ****************************************************************************/ 

   \                                 In section .text, align 2, keep-with-next
    212          void wen(void)
    213          {
   \                     wen: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    214          SPISS_0;
   \   00000002   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x21FB             MOVS     R1,#+251
   \   00000008   0x4001             ANDS     R1,R1,R0
   \   0000000A   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   0000000C   0x7001             STRB     R1,[R0, #+0]
    215          SPI0_TxRxByte(0x06);
   \   0000000E   0x2006             MOVS     R0,#+6
   \   00000010   0x.... 0x....      BL       SPI0_TxRxByte
    216          SPISS_1;
   \   00000014   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   00000016   0x7800             LDRB     R0,[R0, #+0]
   \   00000018   0x2104             MOVS     R1,#+4
   \   0000001A   0x4301             ORRS     R1,R1,R0
   \   0000001C   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   0000001E   0x7001             STRB     R1,[R0, #+0]
    217          }
   \   00000020   0xBD01             POP      {R0,PC}          ;; return
    218          
    219          /*******************************************************************************
    220          * Function Name  : SPI_FLASH_ReadByte
    221          * Description    : Reads a byte from the SPI Flash.
    222          *                  This function must be used only if the Start_Read_Sequence
    223          *                  function has been previously called.
    224          * Input          : None
    225          * Output         : None
    226          * Return         : Byte Read from the SPI Flash.
    227          *******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    228          uint8 SPI_Flash_ReadByte(void)
    229          {
   \                     SPI_Flash_ReadByte: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    230            return (SPI0_TxRxByte(Dummy_Byte));
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x.... 0x....      BL       SPI0_TxRxByte
   \   00000008   0xBD02             POP      {R1,PC}          ;; return
    231          }
    232          
    233          
    234          
    235          /*****************************************************************
    236          //函数名称：unsigned char SST25_E4k(unsigned short)
    237          //功能描述：擦除指定的扇区号
    238          //designer: niub
    239          //Data    :2017-3-2
    240          *****************************************************************/
    241          

   \                                 In section .text, align 2, keep-with-next
    242          unsigned char SST25_E4K(unsigned short sec1)
    243          {
   \                     SST25_E4K: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0007             MOVS     R7,R0
    244          unsigned long temp_4k=0,StatRgVal=0;
   \   00000004   0x2400             MOVS     R4,#+0
   \   00000006   0x2500             MOVS     R5,#+0
    245          uint32  SechAddr=0;
   \   00000008   0x2600             MOVS     R6,#+0
    246          if(sec1>511)
   \   0000000A   0xB2BF             UXTH     R7,R7
   \   0000000C   0x2080             MOVS     R0,#+128
   \   0000000E   0x0080             LSLS     R0,R0,#+2        ;; #+512
   \   00000010   0x4287             CMP      R7,R0
   \   00000012   0xDB01             BLT      ??SST25_E4K_0
    247          {
    248          return(0);
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0xE0A2             B        ??SST25_E4K_1
    249          }
    250          SPISS_0;
   \                     ??SST25_E4K_0: (+1)
   \   00000018   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   0000001A   0x7800             LDRB     R0,[R0, #+0]
   \   0000001C   0x21FB             MOVS     R1,#+251
   \   0000001E   0x4001             ANDS     R1,R1,R0
   \   00000020   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   00000022   0x7001             STRB     R1,[R0, #+0]
    251          temp_4k=SPI0_TxRxByte(0x05);//保存读的状态寄存器的值
   \   00000024   0x2005             MOVS     R0,#+5
   \   00000026   0x.... 0x....      BL       SPI0_TxRxByte
   \   0000002A   0x0004             MOVS     R4,R0
    252          SPISS_1;
   \   0000002C   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   0000002E   0x7800             LDRB     R0,[R0, #+0]
   \   00000030   0x2104             MOVS     R1,#+4
   \   00000032   0x4301             ORRS     R1,R1,R0
   \   00000034   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   00000036   0x7001             STRB     R1,[R0, #+0]
    253          SPISS_0;
   \   00000038   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   0000003A   0x7800             LDRB     R0,[R0, #+0]
   \   0000003C   0x21FB             MOVS     R1,#+251
   \   0000003E   0x4001             ANDS     R1,R1,R0
   \   00000040   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   00000042   0x7001             STRB     R1,[R0, #+0]
    254          SPI0_TxRxByte(0x50);//使状态寄存器可写
   \   00000044   0x2050             MOVS     R0,#+80
   \   00000046   0x.... 0x....      BL       SPI0_TxRxByte
    255          SPISS_1;
   \   0000004A   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   0000004C   0x7800             LDRB     R0,[R0, #+0]
   \   0000004E   0x2104             MOVS     R1,#+4
   \   00000050   0x4301             ORRS     R1,R1,R0
   \   00000052   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   00000054   0x7001             STRB     R1,[R0, #+0]
    256          SPISS_0;
   \   00000056   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   00000058   0x7800             LDRB     R0,[R0, #+0]
   \   0000005A   0x21FB             MOVS     R1,#+251
   \   0000005C   0x4001             ANDS     R1,R1,R0
   \   0000005E   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   00000060   0x7001             STRB     R1,[R0, #+0]
    257          SPI0_TxRxByte(0x50);//发送写状态寄存器指令
   \   00000062   0x2050             MOVS     R0,#+80
   \   00000064   0x.... 0x....      BL       SPI0_TxRxByte
    258          SPI0_TxRxByte(0);//清0BPx位  使flash全区可写
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0x.... 0x....      BL       SPI0_TxRxByte
    259          SPISS_1;
   \   0000006E   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   00000070   0x7800             LDRB     R0,[R0, #+0]
   \   00000072   0x2104             MOVS     R1,#+4
   \   00000074   0x4301             ORRS     R1,R1,R0
   \   00000076   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   00000078   0x7001             STRB     R1,[R0, #+0]
    260          SPISS_0;
   \   0000007A   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   0000007C   0x7800             LDRB     R0,[R0, #+0]
   \   0000007E   0x21FB             MOVS     R1,#+251
   \   00000080   0x4001             ANDS     R1,R1,R0
   \   00000082   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   00000084   0x7001             STRB     R1,[R0, #+0]
    261          SPI0_TxRxByte(0x06);//发送写使能命令
   \   00000086   0x2006             MOVS     R0,#+6
   \   00000088   0x.... 0x....      BL       SPI0_TxRxByte
    262          SPISS_1;
   \   0000008C   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   0000008E   0x7800             LDRB     R0,[R0, #+0]
   \   00000090   0x2104             MOVS     R1,#+4
   \   00000092   0x4301             ORRS     R1,R1,R0
   \   00000094   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   00000096   0x7001             STRB     R1,[R0, #+0]
    263          SechAddr=sec1*4096;//可能要改。。。
   \   00000098   0xB2BF             UXTH     R7,R7
   \   0000009A   0x2080             MOVS     R0,#+128
   \   0000009C   0x0140             LSLS     R0,R0,#+5        ;; #+4096
   \   0000009E   0x4378             MULS     R0,R7,R0
   \   000000A0   0x0006             MOVS     R6,R0
    264          SPISS_0;
   \   000000A2   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   000000A4   0x7800             LDRB     R0,[R0, #+0]
   \   000000A6   0x21FB             MOVS     R1,#+251
   \   000000A8   0x4001             ANDS     R1,R1,R0
   \   000000AA   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   000000AC   0x7001             STRB     R1,[R0, #+0]
    265          SPI0_TxRxByte(0x20);//发送擦除扇区指令
   \   000000AE   0x2020             MOVS     R0,#+32
   \   000000B0   0x.... 0x....      BL       SPI0_TxRxByte
    266          SPI0_TxRxByte(SechAddr&0xffffff>>16);
   \   000000B4   0x0030             MOVS     R0,R6
   \   000000B6   0xB2C0             UXTB     R0,R0
   \   000000B8   0x.... 0x....      BL       SPI0_TxRxByte
    267          SPI0_TxRxByte(SechAddr&0xffff>>8);
   \   000000BC   0x0030             MOVS     R0,R6
   \   000000BE   0xB2C0             UXTB     R0,R0
   \   000000C0   0x.... 0x....      BL       SPI0_TxRxByte
    268          SPI0_TxRxByte(SechAddr);
   \   000000C4   0x0030             MOVS     R0,R6
   \   000000C6   0xB2C0             UXTB     R0,R0
   \   000000C8   0x.... 0x....      BL       SPI0_TxRxByte
    269          SPISS_1;
   \   000000CC   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   000000CE   0x7800             LDRB     R0,[R0, #+0]
   \   000000D0   0x2104             MOVS     R1,#+4
   \   000000D2   0x4301             ORRS     R1,R1,R0
   \   000000D4   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   000000D6   0x7001             STRB     R1,[R0, #+0]
    270          do
    271          {
    272          SPISS_0; 
   \                     ??SST25_E4K_2: (+1)
   \   000000D8   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   000000DA   0x7800             LDRB     R0,[R0, #+0]
   \   000000DC   0x21FB             MOVS     R1,#+251
   \   000000DE   0x4001             ANDS     R1,R1,R0
   \   000000E0   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   000000E2   0x7001             STRB     R1,[R0, #+0]
    273          SPI0_TxRxByte(0x05);//保存读的状态寄存器值
   \   000000E4   0x2005             MOVS     R0,#+5
   \   000000E6   0x.... 0x....      BL       SPI0_TxRxByte
    274          SPISS_1;
   \   000000EA   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   000000EC   0x7800             LDRB     R0,[R0, #+0]
   \   000000EE   0x2104             MOVS     R1,#+4
   \   000000F0   0x4301             ORRS     R1,R1,R0
   \   000000F2   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   000000F4   0x7001             STRB     R1,[R0, #+0]
    275          }while(StatRgVal==0x03); //等待芯片空闲
   \   000000F6   0x2D03             CMP      R5,#+3
   \   000000F8   0xD0EE             BEQ      ??SST25_E4K_2
    276          
    277          //擦除结束 恢复状态寄存器的值
    278          SPISS_0; 
   \   000000FA   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   000000FC   0x7800             LDRB     R0,[R0, #+0]
   \   000000FE   0x21FB             MOVS     R1,#+251
   \   00000100   0x4001             ANDS     R1,R1,R0
   \   00000102   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   00000104   0x7001             STRB     R1,[R0, #+0]
    279          SPI0_TxRxByte(0x06);
   \   00000106   0x2006             MOVS     R0,#+6
   \   00000108   0x.... 0x....      BL       SPI0_TxRxByte
    280          SPISS_1;
   \   0000010C   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   0000010E   0x7800             LDRB     R0,[R0, #+0]
   \   00000110   0x2104             MOVS     R1,#+4
   \   00000112   0x4301             ORRS     R1,R1,R0
   \   00000114   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   00000116   0x7001             STRB     R1,[R0, #+0]
    281          SPISS_0;
   \   00000118   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   0000011A   0x7800             LDRB     R0,[R0, #+0]
   \   0000011C   0x21FB             MOVS     R1,#+251
   \   0000011E   0x4001             ANDS     R1,R1,R0
   \   00000120   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   00000122   0x7001             STRB     R1,[R0, #+0]
    282          SPI0_TxRxByte(0x05);//使状态寄存器可写
   \   00000124   0x2005             MOVS     R0,#+5
   \   00000126   0x.... 0x....      BL       SPI0_TxRxByte
    283          SPISS_1;
   \   0000012A   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   0000012C   0x7800             LDRB     R0,[R0, #+0]
   \   0000012E   0x2104             MOVS     R1,#+4
   \   00000130   0x4301             ORRS     R1,R1,R0
   \   00000132   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   00000134   0x7001             STRB     R1,[R0, #+0]
    284          SPISS_0;
   \   00000136   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   00000138   0x7800             LDRB     R0,[R0, #+0]
   \   0000013A   0x21FB             MOVS     R1,#+251
   \   0000013C   0x4001             ANDS     R1,R1,R0
   \   0000013E   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   00000140   0x7001             STRB     R1,[R0, #+0]
    285          SPI0_TxRxByte(0x01);
   \   00000142   0x2001             MOVS     R0,#+1
   \   00000144   0x.... 0x....      BL       SPI0_TxRxByte
    286          SPI0_TxRxByte(temp_4k);
   \   00000148   0x0020             MOVS     R0,R4
   \   0000014A   0xB2C0             UXTB     R0,R0
   \   0000014C   0x.... 0x....      BL       SPI0_TxRxByte
    287          SPISS_1;
   \   00000150   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   00000152   0x7800             LDRB     R0,[R0, #+0]
   \   00000154   0x2104             MOVS     R1,#+4
   \   00000156   0x4301             ORRS     R1,R1,R0
   \   00000158   0x....             LDR      R0,??DataTable7_3  ;; 0x400ff042
   \   0000015A   0x7001             STRB     R1,[R0, #+0]
    288          return 1;
   \   0000015C   0x2001             MOVS     R0,#+1
   \                     ??SST25_E4K_1: (+1)
   \   0000015E   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    289          }
    290          
    291          
    292          /****************************************************************************
    293          * 名称：void SST25_W_BLOCK(uint32_t addr, u8 *readbuff, uint16_t BlockSize)
    294          * 功能页写
    295          * 入口参数 uint32_t addr--页  uint8 *readbuff--数组  uint16_t BlockSize-- 长度  
    296          * 
    297          * 
    298          * 
    299          ****************************************************************************/  

   \                                 In section .text, align 2, keep-with-next
    300          void SST25_W_BLOCK(uint32 addr, uint8 *readbuff, uint16 BlockSize){
   \                     SST25_W_BLOCK: (+1)
   \   00000000   0xB5F4             PUSH     {R2,R4-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000F             MOVS     R7,R1
    301          	unsigned int i=0,a2;
   \   00000006   0x2600             MOVS     R6,#+0
    302          	sect_clr(addr);   								  //é?3yò3		  
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x.... 0x....      BL       sect_clr
    303          	wsr();
   \   0000000E   0x.... 0x....      BL       wsr
    304            	wen();	
   \   00000012   0x.... 0x....      BL       wen
    305          	SPISS_0;   
   \   00000016   0x....             LDR      R0,??DataTable10  ;; 0x400ff042
   \   00000018   0x7800             LDRB     R0,[R0, #+0]
   \   0000001A   0x21FB             MOVS     R1,#+251
   \   0000001C   0x4001             ANDS     R1,R1,R0
   \   0000001E   0x....             LDR      R0,??DataTable10  ;; 0x400ff042
   \   00000020   0x7001             STRB     R1,[R0, #+0]
    306          	SPI0_TxRxByte(0xad);
   \   00000022   0x20AD             MOVS     R0,#+173
   \   00000024   0x.... 0x....      BL       SPI0_TxRxByte
    307          	SPI0_TxRxByte((addr&0xffffff)>>16);
   \   00000028   0x0020             MOVS     R0,R4
   \   0000002A   0x0C00             LSRS     R0,R0,#+16
   \   0000002C   0xB2C0             UXTB     R0,R0
   \   0000002E   0x.... 0x....      BL       SPI0_TxRxByte
    308          	SPI0_TxRxByte((addr&0xffff)>>8);
   \   00000032   0x0020             MOVS     R0,R4
   \   00000034   0x0A00             LSRS     R0,R0,#+8
   \   00000036   0xB2C0             UXTB     R0,R0
   \   00000038   0x.... 0x....      BL       SPI0_TxRxByte
    309          	SPI0_TxRxByte(addr&0xff);
   \   0000003C   0x0020             MOVS     R0,R4
   \   0000003E   0xB2C0             UXTB     R0,R0
   \   00000040   0x.... 0x....      BL       SPI0_TxRxByte
    310            	SPI0_TxRxByte(readbuff[0]);
   \   00000044   0x7838             LDRB     R0,[R7, #+0]
   \   00000046   0x.... 0x....      BL       SPI0_TxRxByte
    311          	SPI0_TxRxByte(readbuff[1]);
   \   0000004A   0x7878             LDRB     R0,[R7, #+1]
   \   0000004C   0x.... 0x....      BL       SPI0_TxRxByte
    312                  SPISS_1; 
   \   00000050   0x....             LDR      R0,??DataTable10  ;; 0x400ff042
   \   00000052   0x7800             LDRB     R0,[R0, #+0]
   \   00000054   0x2104             MOVS     R1,#+4
   \   00000056   0x4301             ORRS     R1,R1,R0
   \   00000058   0x....             LDR      R0,??DataTable10  ;; 0x400ff042
   \   0000005A   0x7001             STRB     R1,[R0, #+0]
    313          	i=2;
   \   0000005C   0x2002             MOVS     R0,#+2
   \   0000005E   0x0006             MOVS     R6,R0
    314          	while(i<BlockSize){
   \                     ??SST25_W_BLOCK_0: (+1)
   \   00000060   0x4668             MOV      R0,SP
   \   00000062   0x8800             LDRH     R0,[R0, #+0]
   \   00000064   0x4286             CMP      R6,R0
   \   00000066   0xD21D             BCS      ??SST25_W_BLOCK_1
    315          		a2=120;
   \   00000068   0x2078             MOVS     R0,#+120
   \   0000006A   0x0005             MOVS     R5,R0
    316          		while(a2>0) a2--;
   \                     ??SST25_W_BLOCK_2: (+1)
   \   0000006C   0x2D00             CMP      R5,#+0
   \   0000006E   0xD001             BEQ      ??SST25_W_BLOCK_3
   \   00000070   0x1E6D             SUBS     R5,R5,#+1
   \   00000072   0xE7FB             B        ??SST25_W_BLOCK_2
    317          		SPISS_0; 
   \                     ??SST25_W_BLOCK_3: (+1)
   \   00000074   0x....             LDR      R0,??DataTable10  ;; 0x400ff042
   \   00000076   0x7800             LDRB     R0,[R0, #+0]
   \   00000078   0x21FB             MOVS     R1,#+251
   \   0000007A   0x4001             ANDS     R1,R1,R0
   \   0000007C   0x....             LDR      R0,??DataTable10  ;; 0x400ff042
   \   0000007E   0x7001             STRB     R1,[R0, #+0]
    318          		SPI0_TxRxByte(0xad);
   \   00000080   0x20AD             MOVS     R0,#+173
   \   00000082   0x.... 0x....      BL       SPI0_TxRxByte
    319          		SPI0_TxRxByte(readbuff[i++]);
   \   00000086   0x5DB8             LDRB     R0,[R7, R6]
   \   00000088   0x.... 0x....      BL       SPI0_TxRxByte
   \   0000008C   0x1C76             ADDS     R6,R6,#+1
    320          		SPI0_TxRxByte(readbuff[i++]);
   \   0000008E   0x5DB8             LDRB     R0,[R7, R6]
   \   00000090   0x.... 0x....      BL       SPI0_TxRxByte
   \   00000094   0x1C76             ADDS     R6,R6,#+1
    321          		SPISS_1; 
   \   00000096   0x....             LDR      R0,??DataTable10  ;; 0x400ff042
   \   00000098   0x7800             LDRB     R0,[R0, #+0]
   \   0000009A   0x2104             MOVS     R1,#+4
   \   0000009C   0x4301             ORRS     R1,R1,R0
   \   0000009E   0x....             LDR      R0,??DataTable10  ;; 0x400ff042
   \   000000A0   0x7001             STRB     R1,[R0, #+0]
   \   000000A2   0xE7DD             B        ??SST25_W_BLOCK_0
    322          	}
    323          	
    324          	a2=100;
   \                     ??SST25_W_BLOCK_1: (+1)
   \   000000A4   0x2064             MOVS     R0,#+100
   \   000000A6   0x0005             MOVS     R5,R0
    325          	while(a2>0) a2--;
   \                     ??SST25_W_BLOCK_4: (+1)
   \   000000A8   0x2D00             CMP      R5,#+0
   \   000000AA   0xD001             BEQ      ??SST25_W_BLOCK_5
   \   000000AC   0x1E6D             SUBS     R5,R5,#+1
   \   000000AE   0xE7FB             B        ??SST25_W_BLOCK_4
    326          	wdis();	
   \                     ??SST25_W_BLOCK_5: (+1)
   \   000000B0   0x.... 0x....      BL       wdis
    327                  SPISS_0; 	
   \   000000B4   0x....             LDR      R0,??DataTable10  ;; 0x400ff042
   \   000000B6   0x7800             LDRB     R0,[R0, #+0]
   \   000000B8   0x21FB             MOVS     R1,#+251
   \   000000BA   0x4001             ANDS     R1,R1,R0
   \   000000BC   0x....             LDR      R0,??DataTable10  ;; 0x400ff042
   \   000000BE   0x7001             STRB     R1,[R0, #+0]
    328          	wip();
   \   000000C0   0x.... 0x....      BL       wip
    329          }
   \   000000C4   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    330          
    331          
    332          /****************************************************************************
    333          * 名称：void SST25_R_BLOCK(unsigned long addr, unsigned char *readbuff, unsigned int BlockSize)
    334          * 功能：页读
    335          *            unsigned long addr--页  unsigned char *readbuff--数组  unsigned int BlockSize--长度
    336          * 
    337          * 
    338          * 
    339          ****************************************************************************/  

   \                                 In section .text, align 2, keep-with-next
    340          void SST25_R_BLOCK(unsigned long addr, unsigned char *readbuff, unsigned int BlockSize){
   \                     SST25_R_BLOCK: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0017             MOVS     R7,R2
    341          	unsigned int i=0; 	
   \   00000008   0x2600             MOVS     R6,#+0
    342          	SPISS_0; 
   \   0000000A   0x....             LDR      R0,??DataTable10  ;; 0x400ff042
   \   0000000C   0x7800             LDRB     R0,[R0, #+0]
   \   0000000E   0x21FB             MOVS     R1,#+251
   \   00000010   0x4001             ANDS     R1,R1,R0
   \   00000012   0x....             LDR      R0,??DataTable10  ;; 0x400ff042
   \   00000014   0x7001             STRB     R1,[R0, #+0]
    343          	SPI0_TxRxByte(0x0b);
   \   00000016   0x200B             MOVS     R0,#+11
   \   00000018   0x.... 0x....      BL       SPI0_TxRxByte
    344          	SPI0_TxRxByte((addr&0xffffff)>>16);
   \   0000001C   0x0020             MOVS     R0,R4
   \   0000001E   0x0C00             LSRS     R0,R0,#+16
   \   00000020   0xB2C0             UXTB     R0,R0
   \   00000022   0x.... 0x....      BL       SPI0_TxRxByte
    345          	SPI0_TxRxByte((addr&0xffff)>>8);
   \   00000026   0x0020             MOVS     R0,R4
   \   00000028   0x0A00             LSRS     R0,R0,#+8
   \   0000002A   0xB2C0             UXTB     R0,R0
   \   0000002C   0x.... 0x....      BL       SPI0_TxRxByte
    346          	SPI0_TxRxByte(addr&0xff);
   \   00000030   0x0020             MOVS     R0,R4
   \   00000032   0xB2C0             UXTB     R0,R0
   \   00000034   0x.... 0x....      BL       SPI0_TxRxByte
    347          	SPI0_TxRxByte(0);
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x.... 0x....      BL       SPI0_TxRxByte
    348          	//while(i<BlockSize){	
    349          		readbuff[4]=SPI_Flash_ReadByte();
   \   0000003E   0x.... 0x....      BL       SPI_Flash_ReadByte
   \   00000042   0x7128             STRB     R0,[R5, #+4]
    350          		
    351          		//i++;
    352          	//}
    353          	SPISS_1; 	 	
   \   00000044   0x....             LDR      R0,??DataTable10  ;; 0x400ff042
   \   00000046   0x7800             LDRB     R0,[R0, #+0]
   \   00000048   0x2104             MOVS     R1,#+4
   \   0000004A   0x4301             ORRS     R1,R1,R0
   \   0000004C   0x....             LDR      R0,??DataTable10  ;; 0x400ff042
   \   0000004E   0x7001             STRB     R1,[R0, #+0]
    354          }
   \   00000050   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    355          
    356          /****************************************************************************
    357          * 名称：void wdis(void)
    358          * 功能：写禁止
    359          * 
    360          ****************************************************************************/ 

   \                                 In section .text, align 2, keep-with-next
    361          void wdis(void){
   \                     wdis: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    362          
    363          	SPISS_0;  
   \   00000002   0x....             LDR      R0,??DataTable10  ;; 0x400ff042
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x21FB             MOVS     R1,#+251
   \   00000008   0x4001             ANDS     R1,R1,R0
   \   0000000A   0x....             LDR      R0,??DataTable10  ;; 0x400ff042
   \   0000000C   0x7001             STRB     R1,[R0, #+0]
    364          	SPI0_TxRxByte(0x04); 
   \   0000000E   0x2004             MOVS     R0,#+4
   \   00000010   0x.... 0x....      BL       SPI0_TxRxByte
    365          	SPISS_1;  
   \   00000014   0x....             LDR      R0,??DataTable10  ;; 0x400ff042
   \   00000016   0x7800             LDRB     R0,[R0, #+0]
   \   00000018   0x2104             MOVS     R1,#+4
   \   0000001A   0x4301             ORRS     R1,R1,R0
   \   0000001C   0x....             LDR      R0,??DataTable10  ;; 0x400ff042
   \   0000001E   0x7001             STRB     R1,[R0, #+0]
    366          	wip();
   \   00000020   0x.... 0x....      BL       wip
    367          	
    368          }	
   \   00000024   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x001FFFFF         DC32     0x1fffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x400FF042         DC32     0x400ff042

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x........         DC32     Temp1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x........         DC32     Temp2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x........         DC32     temp_id

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x400FF042         DC32     0x400ff042

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x........         DC32     Temp3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0x........         DC32     temp_id1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   0x........         DC32     Temp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0x400FF042         DC32     0x400ff042
    369          
    370          /******************************************************************************
    371           * End of module                                                              *
    372           ******************************************************************************/
    373          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   SPI_Flash_ReadByte
         8   -> SPI0_TxRxByte
      24   SST25_E4K
        24   -> SPI0_TxRxByte
      24   SST25_R_BLOCK
        24   -> SPI0_TxRxByte
        24   -> SPI_Flash_ReadByte
       8   SST25_ReadID
         8   -> SPI0_TxRxByte
      24   SST25_W_BLOCK
        24   -> SPI0_TxRxByte
        24   -> sect_clr
        24   -> wdis
        24   -> wen
        24   -> wip
        24   -> wsr
      16   SST25_read
        16   -> SPI0_TxRxByte
      24   SST25_write
        24   -> SPI0_TxRxByte
        24   -> sect_clr
        24   -> wen
        24   -> wsr
       8   rdsr
         8   -> SPI0_TxRxByte
         8   -> SPI_Flash_ReadByte
       8   sect_clr
         8   -> SPI0_TxRxByte
         8   -> wen
         8   -> wip
         8   -> wsr
       8   wdis
         8   -> SPI0_TxRxByte
         8   -> wip
       8   wen
         8   -> SPI0_TxRxByte
       8   wip
         8   -> rdsr
       8   wsr
         8   -> SPI0_TxRxByte
         8   -> wip


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable10
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_2
      10  SPI_Flash_ReadByte
     352  SST25_E4K
      82  SST25_R_BLOCK
     112  SST25_ReadID
     198  SST25_W_BLOCK
    4096  SST25_buffer
      72  SST25_read
     352  SST25_write
       4  Temp
       4  Temp1
       4  Temp2
       4  Temp3
      46  rdsr
      76  sect_clr
      16  spi_buff
       4  temp_id
       4  temp_id1
      38  wdis
      34  wen
      20  wip
      74  wsr

 
 4 136 bytes in section .bss
 1 506 bytes in section .text
 
 1 506 bytes of CODE memory
 4 136 bytes of DATA memory

Errors: none
Warnings: 1
