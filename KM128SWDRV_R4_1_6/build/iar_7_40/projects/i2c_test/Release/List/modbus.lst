###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        20/Mar/2017  16:15:51
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\i2c\modbus.c
#    Command line =  
#        C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\i2c\modbus.c -D NDEBUG -lCN
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\i2c_test\Release\List\
#        -o
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\i2c_test\Release\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ --no_mem_idioms -e --fpu=None --dlib_config
#        D:\IAR7.4anzhuang\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\i2c_test\..\..\..\..\src\common\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\i2c_test\..\..\..\..\src\drivers\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\i2c_test\..\..\..\..\src\freemaster\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\i2c_test\..\..\..\..\src\projects\i2c_test\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\i2c_test\..\..\..\..\src\toolchain\iar\
#        -On
#    List file    =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\i2c_test\Release\List\modbus.lst
#    Object file  =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\i2c_test\Release\Obj\modbus.o
#
###############################################################################

C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\i2c\modbus.c
      1          /*
      2           * modbus.c从机服务程序
      3           *
      4           */ 
      5          #include "types.h"
      6          #include "modbus.h"
      7          #include "common.h"
      8          #include "gpio/gpio.h"
      9          #include "drivers.h"
     10          #include "headers/MKM34ZA5.h" 
     11          

   \                                 In section .bss, align 4
     12           uint8 receBuf[32];
   \                     receBuf:
   \   00000000                      DS8 32

   \                                 In section .bss, align 1
     13           uint8 checkoutError;
   \                     checkoutError:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     14           uint8 rececount;
   \                     rececount:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     15           uint8 receCount;
   \                     receCount:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
     16           uint8 sendBuf[120];
   \                     sendBuf:
   \   00000000                      DS8 120

   \                                 In section .bss, align 1
     17           uint8 sendCount;
   \                     sendCount:
   \   00000000                      DS8 1
     18           

   \                                 In section .bss, align 4
     19           float voltage;
   \                     voltage:
   \   00000000                      DS8 4
     20           
     21           
     22             
     23          //#include "usart.h"
     24          

   \                                 In section .data, align 1
     25          uint8 localAddr=1;	
   \                     localAddr:
   \   00000000   0x01               DC8 1

   \                                 In section .bss, align 1
     26          uint8 testCoil; 
   \                     testCoil:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
     27          uint16 testRegister; 
   \                     testRegister:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
     28          uint8 byteCount;
   \                     byteCount:
   \   00000000                      DS8 1
     29          extern uint16 adcval[120];
     30          extern uint8 ad_pos[120];
     31          

   \                                 In section .rodata, align 4
     32          const uint8 auchCRCHi[] = { 
   \                     auchCRCHi:
   \   00000000   0x00 0xC1          DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \   00000010   0x01 0xC0          DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \   00000020   0x01 0xC0          DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \   00000030   0x00 0xC1          DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \   00000040   0x01 0xC0          DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \   00000050   0x00 0xC1          DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \   00000060   0x00 0xC1          DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \   00000070   0x01 0xC0          DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \   00000080   0x01 0xC0          DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \   00000090   0x00 0xC1          DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \   000000A0   0x00 0xC1          DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \   000000B0   0x01 0xC0          DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \   000000C0   0x00 0xC1          DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \   000000D0   0x01 0xC0          DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \   000000E0   0x01 0xC0          DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \   000000F0   0x00 0xC1          DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
     33          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 
     34          0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 
     35          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 
     36          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 
     37          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 
     38          0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 
     39          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 
     40          0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 
     41          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 
     42          0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 
     43          0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 
     44          0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 
     45          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,0x80, 0x41, 0x00, 0xC1, 0x81, 0x40} ; 
     46          
     47          

   \                                 In section .rodata, align 4
     48          const uint8 auchCRCLo[] = { 
   \                     auchCRCLo:
   \   00000000   0x00 0xC0          DC8 0, 192, 193, 1, 195, 3, 2, 194, 198, 6, 7, 199, 5, 197, 196, 4, 204
   \              0xC1 0x01    
   \              0xC3 0x03    
   \              0x02 0xC2    
   \              0xC6 0x06    
   \              0x07 0xC7    
   \              0x05 0xC5    
   \              0xC4 0x04    
   \              0xCC         
   \   00000011   0x0C 0x0D          DC8 12, 13, 205, 15, 207, 206, 14, 10, 202, 203, 11, 201, 9, 8, 200
   \              0xCD 0x0F    
   \              0xCF 0xCE    
   \              0x0E 0x0A    
   \              0xCA 0xCB    
   \              0x0B 0xC9    
   \              0x09 0x08    
   \              0xC8         
   \   00000020   0xD8 0x18          DC8 216, 24, 25, 217, 27, 219, 218, 26, 30, 222, 223, 31, 221, 29, 28
   \              0x19 0xD9    
   \              0x1B 0xDB    
   \              0xDA 0x1A    
   \              0x1E 0xDE    
   \              0xDF 0x1F    
   \              0xDD 0x1D    
   \              0x1C         
   \   0000002F   0xDC 0x14          DC8 220, 20, 212, 213, 21, 215, 23, 22, 214, 210, 18, 19, 211, 17, 209
   \              0xD4 0xD5    
   \              0x15 0xD7    
   \              0x17 0x16    
   \              0xD6 0xD2    
   \              0x12 0x13    
   \              0xD3 0x11    
   \              0xD1         
   \   0000003E   0xD0 0x10          DC8 208, 16, 240, 48, 49, 241, 51, 243, 242, 50, 54, 246, 247, 55, 245
   \              0xF0 0x30    
   \              0x31 0xF1    
   \              0x33 0xF3    
   \              0xF2 0x32    
   \              0x36 0xF6    
   \              0xF7 0x37    
   \              0xF5         
   \   0000004D   0x35 0x34          DC8 53, 52, 244, 60, 252, 253, 61, 255, 63, 62, 254, 250, 58, 59, 251
   \              0xF4 0x3C    
   \              0xFC 0xFD    
   \              0x3D 0xFF    
   \              0x3F 0x3E    
   \              0xFE 0xFA    
   \              0x3A 0x3B    
   \              0xFB         
   \   0000005C   0x39 0xF9          DC8 57, 249, 248, 56, 40, 232, 233, 41, 235, 43, 42, 234, 238, 46, 47
   \              0xF8 0x38    
   \              0x28 0xE8    
   \              0xE9 0x29    
   \              0xEB 0x2B    
   \              0x2A 0xEA    
   \              0xEE 0x2E    
   \              0x2F         
   \   0000006B   0xEF 0x2D          DC8 239, 45, 237, 236, 44, 228, 36, 37, 229, 39, 231, 230, 38, 34, 226
   \              0xED 0xEC    
   \              0x2C 0xE4    
   \              0x24 0x25    
   \              0xE5 0x27    
   \              0xE7 0xE6    
   \              0x26 0x22    
   \              0xE2         
   \   0000007A   0xE3 0x23          DC8 227, 35, 225, 33, 32, 224, 160, 96, 97, 161, 99, 163, 162, 98, 102
   \              0xE1 0x21    
   \              0x20 0xE0    
   \              0xA0 0x60    
   \              0x61 0xA1    
   \              0x63 0xA3    
   \              0xA2 0x62    
   \              0x66         
   \   00000089   0xA6 0xA7          DC8 166, 167, 103, 165, 101, 100, 164, 108, 172, 173, 109, 175, 111
   \              0x67 0xA5    
   \              0x65 0x64    
   \              0xA4 0x6C    
   \              0xAC 0xAD    
   \              0x6D 0xAF    
   \              0x6F         
   \   00000096   0x6E 0xAE          DC8 110, 174, 170, 106, 107, 171, 105, 169, 168, 104, 120, 184, 185
   \              0xAA 0x6A    
   \              0x6B 0xAB    
   \              0x69 0xA9    
   \              0xA8 0x68    
   \              0x78 0xB8    
   \              0xB9         
   \   000000A3   0x79 0xBB          DC8 121, 187, 123, 122, 186, 190, 126, 127, 191, 125, 189, 188, 124
   \              0x7B 0x7A    
   \              0xBA 0xBE    
   \              0x7E 0x7F    
   \              0xBF 0x7D    
   \              0xBD 0xBC    
   \              0x7C         
   \   000000B0   0xB4 0x74          DC8 180, 116, 117, 181, 119, 183, 182, 118, 114, 178, 179, 115, 177
   \              0x75 0xB5    
   \              0x77 0xB7    
   \              0xB6 0x76    
   \              0x72 0xB2    
   \              0xB3 0x73    
   \              0xB1         
   \   000000BD   0x71 0x70          DC8 113, 112, 176, 80, 144, 145, 81, 147, 83, 82, 146, 150, 86, 87, 151
   \              0xB0 0x50    
   \              0x90 0x91    
   \              0x51 0x93    
   \              0x53 0x52    
   \              0x92 0x96    
   \              0x56 0x57    
   \              0x97         
   \   000000CC   0x55 0x95          DC8 85, 149, 148, 84, 156, 92, 93, 157, 95, 159, 158, 94, 90, 154, 155
   \              0x94 0x54    
   \              0x9C 0x5C    
   \              0x5D 0x9D    
   \              0x5F 0x9F    
   \              0x9E 0x5E    
   \              0x5A 0x9A    
   \              0x9B         
   \   000000DB   0x5B 0x99          DC8 91, 153, 89, 88, 152, 136, 72, 73, 137, 75, 139, 138, 74, 78, 142
   \              0x59 0x58    
   \              0x98 0x88    
   \              0x48 0x49    
   \              0x89 0x4B    
   \              0x8B 0x8A    
   \              0x4A 0x4E    
   \              0x8E         
   \   000000EA   0x8F 0x4F          DC8 143, 79, 141, 77, 76, 140, 68, 132, 133, 69, 135, 71, 70, 134, 130
   \              0x8D 0x4D    
   \              0x4C 0x8C    
   \              0x44 0x84    
   \              0x85 0x45    
   \              0x87 0x47    
   \              0x46 0x86    
   \              0x82         
   \   000000F9   0x42 0x43          DC8 66, 67, 131, 65, 129, 128, 64
   \              0x83 0x41    
   \              0x81 0x80    
   \              0x40         
     49          0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06,0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD, 
     50          0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 
     51          0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC, 0x14, 0xD4,0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3, 
     52          0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3,0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4, 
     53          0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 
     54          0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED,0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26, 
     55          0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60,0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67, 
     56          0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 
     57          0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E,0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5, 
     58          0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71,0x70, 0xB0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92, 
     59          0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 
     60          0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B,0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C, 
     61          0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,0x43, 0x83, 0x41, 0x81, 0x80, 0x40} ;

   \                                 In section .text, align 2, keep-with-next
     62          uint16   crc16(uint8 *puchMsg, uint16 usDataLen) 
     63          { 
   \                     crc16: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0x0002             MOVS     R2,R0
     64          	uint8 uchCRCHi = 0xFF ; 
   \   00000004   0x20FF             MOVS     R0,#+255
     65          	uint8 uchCRCLo = 0xFF ; 
   \   00000006   0x24FF             MOVS     R4,#+255
     66          	uint32 uIndex ; 
     67          	while (usDataLen--) 
   \                     ??crc16_0: (+1)
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x1E69             SUBS     R1,R5,#+1
   \   0000000C   0xB2AD             UXTH     R5,R5
   \   0000000E   0x2D00             CMP      R5,#+0
   \   00000010   0xD00C             BEQ      ??crc16_1
     68          	{ 
     69          		uIndex =uchCRCHi ^ *puchMsg++ ; //计算CRC
   \   00000012   0xB2C0             UXTB     R0,R0
   \   00000014   0x7815             LDRB     R5,[R2, #+0]
   \   00000016   0x4045             EORS     R5,R5,R0
   \   00000018   0x002B             MOVS     R3,R5
   \   0000001A   0x1C52             ADDS     R2,R2,#+1
     70          		uchCRCHi = uchCRCLo ^ auchCRCHi[uIndex] ; 
   \   0000001C   0x....             LDR      R5,??DataTable3
   \   0000001E   0x5CED             LDRB     R5,[R5, R3]
   \   00000020   0x4065             EORS     R5,R5,R4
   \   00000022   0x0028             MOVS     R0,R5
     71          		uchCRCLo = auchCRCLo[uIndex] ; 
   \   00000024   0x....             LDR      R5,??DataTable3_1
   \   00000026   0x5CED             LDRB     R5,[R5, R3]
   \   00000028   0x002C             MOVS     R4,R5
   \   0000002A   0xE7ED             B        ??crc16_0
     72          	} 
     73          	return (uchCRCHi<<8|uchCRCLo) ; 
   \                     ??crc16_1: (+1)
   \   0000002C   0xB2C0             UXTB     R0,R0
   \   0000002E   0x0200             LSLS     R0,R0,#+8
   \   00000030   0xB2E4             UXTB     R4,R4
   \   00000032   0x4320             ORRS     R0,R0,R4
   \   00000034   0xB280             UXTH     R0,R0
   \   00000036   0xBD30             POP      {R4,R5,PC}       ;; return
     74          }//uint16 crc16(uint8 *puchMsg, uint16 usDataLen)
     75          
     76          

   \                                 In section .text, align 2, keep-with-next
     77          void checkComm0Modbus(void)
     78          {
   \                     checkComm0Modbus: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     79          uint8 crcData;
     80          uint16 tempData;
     81          if(receCount>4)  //为什么要这样判断
   \   00000002   0x....             LDR      R0,??DataTable3_2
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x2805             CMP      R0,#+5
   \   00000008   0xDB40             BLT      ??checkComm0Modbus_0
     82          switch(receBuf[1])
   \   0000000A   0x....             LDR      R0,??DataTable3_3
   \   0000000C   0x7840             LDRB     R0,[R0, #+1]
   \   0000000E   0x2801             CMP      R0,#+1
   \   00000010   0xD003             BEQ      ??checkComm0Modbus_1
   \   00000012   0x2803             CMP      R0,#+3
   \   00000014   0xD001             BEQ      ??checkComm0Modbus_1
   \   00000016   0x2805             CMP      R0,#+5
   \   00000018   0xD138             BNE      ??checkComm0Modbus_0
     83          {
     84          case 1:
     85          case 3:
     86          case 5:
     87            if(receCount>=8)
   \                     ??checkComm0Modbus_1: (+1)
   \   0000001A   0x....             LDR      R0,??DataTable3_2
   \   0000001C   0x7800             LDRB     R0,[R0, #+0]
   \   0000001E   0x2808             CMP      R0,#+8
   \   00000020   0xDB05             BLT      ??checkComm0Modbus_2
     88              UART0_BASE_PTR->C2&=~(1<<2);//关接收
   \   00000022   0x....             LDR      R0,??DataTable3_4  ;; 0x4006a003
   \   00000024   0x7800             LDRB     R0,[R0, #+0]
   \   00000026   0x21FB             MOVS     R1,#+251
   \   00000028   0x4001             ANDS     R1,R1,R0
   \   0000002A   0x....             LDR      R0,??DataTable3_4  ;; 0x4006a003
   \   0000002C   0x7001             STRB     R1,[R0, #+0]
     89             if(receBuf[0]==localAddr && checkoutError==0) //判断是不是本机地址
   \                     ??checkComm0Modbus_2: (+1)
   \   0000002E   0x....             LDR      R0,??DataTable3_3
   \   00000030   0x7800             LDRB     R0,[R0, #+0]
   \   00000032   0x....             LDR      R1,??DataTable3_5
   \   00000034   0x7809             LDRB     R1,[R1, #+0]
   \   00000036   0x4288             CMP      R0,R1
   \   00000038   0xD108             BNE      ??checkComm0Modbus_3
   \   0000003A   0x....             LDR      R0,??DataTable3_6
   \   0000003C   0x7800             LDRB     R0,[R0, #+0]
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD104             BNE      ??checkComm0Modbus_3
     90               crcData=crc16(receBuf,6); //计算校验对不对 // 后来要加上
   \   00000042   0x2106             MOVS     R1,#+6
   \   00000044   0x....             LDR      R0,??DataTable3_3
   \   00000046   0x.... 0x....      BL       crc16
   \   0000004A   0x0004             MOVS     R4,R0
     91               if(crcData == receBuf[7]+(receBuf[6]<<8)) //校验正确
   \                     ??checkComm0Modbus_3: (+1)
   \   0000004C   0xB2E4             UXTB     R4,R4
   \   0000004E   0x....             LDR      R0,??DataTable3_3
   \   00000050   0x79C0             LDRB     R0,[R0, #+7]
   \   00000052   0x....             LDR      R1,??DataTable3_3
   \   00000054   0x7989             LDRB     R1,[R1, #+6]
   \   00000056   0x0209             LSLS     R1,R1,#+8
   \   00000058   0x1840             ADDS     R0,R0,R1
   \   0000005A   0x4284             CMP      R4,R0
   \   0000005C   0xD10A             BNE      ??checkComm0Modbus_4
     92                 if(receBuf[1]==1) //功能号是 01
   \   0000005E   0x....             LDR      R0,??DataTable3_3
   \   00000060   0x7840             LDRB     R0,[R0, #+1]
   \   00000062   0x2801             CMP      R0,#+1
   \   00000064   0xD006             BEQ      ??checkComm0Modbus_4
     93                 {
     94                   // readCoil();//读线圈
     95                 }
     96               else if(receBuf[1]==3)
   \   00000066   0x....             LDR      R0,??DataTable3_3
   \   00000068   0x7840             LDRB     R0,[R0, #+1]
   \   0000006A   0x2803             CMP      R0,#+3
   \   0000006C   0xD102             BNE      ??checkComm0Modbus_5
     97               {
     98               readRegisrers();//读寄存器
   \   0000006E   0x.... 0x....      BL       readRegisrers
   \   00000072   0xE7FF             B        ??checkComm0Modbus_4
     99               }
    100               else if(receBuf[1]==5)
    101               {
    102               // forceSingleCoil();//设置单个线圈 
    103               }
    104               rececount=0;
   \                     ??checkComm0Modbus_5: (+1)
   \                     ??checkComm0Modbus_4: (+1)
   \   00000074   0x2000             MOVS     R0,#+0
   \   00000076   0x....             LDR      R1,??DataTable3_7
   \   00000078   0x7008             STRB     R0,[R1, #+0]
    105               checkoutError=0;
   \   0000007A   0x2000             MOVS     R0,#+0
   \   0000007C   0x....             LDR      R1,??DataTable3_6
   \   0000007E   0x7008             STRB     R0,[R1, #+0]
    106               UART0_BASE_PTR->C2|=(1<<2);//开接收
   \   00000080   0x....             LDR      R0,??DataTable3_4  ;; 0x4006a003
   \   00000082   0x7800             LDRB     R0,[R0, #+0]
   \   00000084   0x2104             MOVS     R1,#+4
   \   00000086   0x4301             ORRS     R1,R1,R0
   \   00000088   0x....             LDR      R0,??DataTable3_4  ;; 0x4006a003
   \   0000008A   0x7001             STRB     R1,[R0, #+0]
    107          
    108          }
    109          }
   \                     ??checkComm0Modbus_0: (+1)
   \   0000008C   0xBD10             POP      {R4,PC}          ;; return
    110          

   \                                 In section .text, align 2, keep-with-next
    111          void readRegisrers(void)
    112          {
   \                     readRegisrers: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
    113          uint8 addr;
    114          uint8 tempAddr;
    115          uint8 crcData;
    116          uint8 readCount;//读到的两个字节数据
    117          uint8 byteCount;//换算成的字节
    118          uint16 i;
    119          uint16 tempData=0;
   \   00000002   0x2500             MOVS     R5,#+0
    120          addr=receBuf[3];
   \   00000004   0x4668             MOV      R0,SP
   \   00000006   0x....             LDR      R1,??DataTable3_3
   \   00000008   0x78C9             LDRB     R1,[R1, #+3]
   \   0000000A   0x7041             STRB     R1,[R0, #+1]
    121          tempAddr=addr;
   \   0000000C   0x4668             MOV      R0,SP
   \   0000000E   0x7840             LDRB     R0,[R0, #+1]
   \   00000010   0x4669             MOV      R1,SP
   \   00000012   0x7088             STRB     R0,[R1, #+2]
    122          readCount=receBuf[5];//两个字节数据
   \   00000014   0x....             LDR      R0,??DataTable3_3
   \   00000016   0x7940             LDRB     R0,[R0, #+5]
   \   00000018   0x0007             MOVS     R7,R0
    123          byteCount=readCount*2;
   \   0000001A   0x2002             MOVS     R0,#+2
   \   0000001C   0x4378             MULS     R0,R7,R0
   \   0000001E   0x0004             MOVS     R4,R0
    124          sendBuf[i+3]=(uint8)voltage>>8;//发送电压数据 高字节
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x....             LDR      R1,??DataTable3_8
   \   00000024   0xB2B6             UXTH     R6,R6
   \   00000026   0x1989             ADDS     R1,R1,R6
   \   00000028   0x70C8             STRB     R0,[R1, #+3]
    125          sendBuf[i+4]=(uint8)voltage&0xff;
   \   0000002A   0x....             LDR      R0,??DataTable3_9
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
   \   0000002E   0x.... 0x....      BL       __aeabi_f2iz
   \   00000032   0x....             LDR      R1,??DataTable3_8
   \   00000034   0xB2B6             UXTH     R6,R6
   \   00000036   0x1989             ADDS     R1,R1,R6
   \   00000038   0x7108             STRB     R0,[R1, #+4]
    126          
    127          sendBuf[0]=localAddr;//从机地址
   \   0000003A   0x....             LDR      R0,??DataTable3_5
   \   0000003C   0x7800             LDRB     R0,[R0, #+0]
   \   0000003E   0x....             LDR      R1,??DataTable3_8
   \   00000040   0x7008             STRB     R0,[R1, #+0]
    128          sendBuf[1]=receBuf[1]; //03功能号
   \   00000042   0x....             LDR      R0,??DataTable3_3
   \   00000044   0x7840             LDRB     R0,[R0, #+1]
   \   00000046   0x....             LDR      R1,??DataTable3_8
   \   00000048   0x7048             STRB     R0,[R1, #+1]
    129          sendBuf[2]= byteCount;//两个字节数据
   \   0000004A   0x....             LDR      R0,??DataTable3_8
   \   0000004C   0x7084             STRB     R4,[R0, #+2]
    130          byteCount += 3; 
   \   0000004E   0x1CE4             ADDS     R4,R4,#+3
    131          crcData=crc16(sendBuf,byteCount);//
   \   00000050   0xB2E4             UXTB     R4,R4
   \   00000052   0x0021             MOVS     R1,R4
   \   00000054   0xB289             UXTH     R1,R1
   \   00000056   0x....             LDR      R0,??DataTable3_8
   \   00000058   0x.... 0x....      BL       crc16
   \   0000005C   0x4669             MOV      R1,SP
   \   0000005E   0x7008             STRB     R0,[R1, #+0]
    132          sendBuf[byteCount] = crcData >> 8; //高字节
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0x....             LDR      R1,??DataTable3_8
   \   00000064   0xB2E4             UXTB     R4,R4
   \   00000066   0x5508             STRB     R0,[R1, R4]
    133          byteCount++;//sendBuf[]
   \   00000068   0x1C64             ADDS     R4,R4,#+1
    134          sendBuf[byteCount]=crcData&0xff;//低字节
   \   0000006A   0x4668             MOV      R0,SP
   \   0000006C   0x7800             LDRB     R0,[R0, #+0]
   \   0000006E   0x....             LDR      R1,??DataTable3_8
   \   00000070   0xB2E4             UXTB     R4,R4
   \   00000072   0x5508             STRB     R0,[R1, R4]
    135          sendCount=byteCount+1;
   \   00000074   0x0020             MOVS     R0,R4
   \   00000076   0x1C40             ADDS     R0,R0,#+1
   \   00000078   0x....             LDR      R1,??DataTable3_10
   \   0000007A   0x7008             STRB     R0,[R1, #+0]
    136            
    137          beginSend();
   \   0000007C   0x.... 0x....      BL       beginSend
    138          }
   \   00000080   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    139          

   \                                 In section .text, align 2, keep-with-next
    140          void beginSend(void)
    141          {
   \                     beginSend: (+1)
   \   00000000   0xB500             PUSH     {LR}
    142            if(sendCount>1)
   \   00000002   0x....             LDR      R0,??DataTable3_10
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x2802             CMP      R0,#+2
   \   00000008   0xDB04             BLT      ??beginSend_0
    143              sendCount--;
   \   0000000A   0x....             LDR      R0,??DataTable3_10
   \   0000000C   0x7800             LDRB     R0,[R0, #+0]
   \   0000000E   0x1E40             SUBS     R0,R0,#+1
   \   00000010   0x....             LDR      R1,??DataTable3_10
   \   00000012   0x7008             STRB     R0,[R1, #+0]
    144            UART_PutChar(UART0,sendBuf[0]);
   \                     ??beginSend_0: (+1)
   \   00000014   0x....             LDR      R0,??DataTable3_8
   \   00000016   0x7800             LDRB     R0,[R0, #+0]
   \   00000018   0x....             LDR      R1,??DataTable3_11  ;; 0x4006a007
   \   0000001A   0x7008             STRB     R0,[R1, #+0]
    145          
    146          }
   \   0000001C   0xBD00             POP      {PC}             ;; return
    147          

   \                                 In section .text, align 2, keep-with-next
    148          uint16  getRegisterVal(uint16 tempAddr,uint16 *tempData)  
    149          {
    150          
    151          
    152          
    153          }
   \                     getRegisterVal: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     auchCRCHi

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     auchCRCLo

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     receCount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     receBuf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x4006A003         DC32     0x4006a003

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x........         DC32     localAddr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x........         DC32     checkoutError

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x........         DC32     rececount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x........         DC32     sendBuf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \   00000000   0x........         DC32     voltage

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \   00000000   0x........         DC32     sendCount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_11:
   \   00000000   0x4006A007         DC32     0x4006a007

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       4   beginSend
       8   checkComm0Modbus
         8   -> crc16
         8   -> readRegisrers
      12   crc16
       0   getRegisterVal
      24   readRegisrers
        24   -> __aeabi_f2iz
        24   -> beginSend
        24   -> crc16


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_11
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
     256  auchCRCHi
     256  auchCRCLo
      30  beginSend
       1  byteCount
     142  checkComm0Modbus
       1  checkoutError
      56  crc16
       2  getRegisterVal
       1  localAddr
     130  readRegisrers
      32  receBuf
       1  receCount
       1  rececount
     120  sendBuf
       1  sendCount
       1  testCoil
       2  testRegister
       4  voltage

 
 164 bytes in section .bss
   1 byte  in section .data
 512 bytes in section .rodata
 408 bytes in section .text
 
 408 bytes of CODE  memory
 512 bytes of CONST memory
 165 bytes of DATA  memory

Errors: none
Warnings: 5
