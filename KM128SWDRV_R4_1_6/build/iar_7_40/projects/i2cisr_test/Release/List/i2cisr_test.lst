###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        16/Mar/2017  08:55:56
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Freescale\KM128SWDRV_R4_1_6\src\projects\i2cisr_test\i2cisr_test.c
#    Command line =  
#        C:\Freescale\KM128SWDRV_R4_1_6\src\projects\i2cisr_test\i2cisr_test.c
#        --no_size_constraints -D NDEBUG -lCN
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\i2cisr_test\Release\List\
#        -o
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\i2cisr_test\Release\Obj\
#        --no_unroll --debug --endian=little --cpu=Cortex-M0+ --no_mem_idioms
#        -e --fpu=None --dlib_config
#        D:\IAR7.4anzhuang\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\i2cisr_test\..\..\..\..\src\common\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\i2cisr_test\..\..\..\..\src\drivers\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\i2cisr_test\..\..\..\..\src\freemaster\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\i2cisr_test\..\..\..\..\src\projects\i2cisr_test\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\i2cisr_test\..\..\..\..\src\toolchain\iar\
#        -Ohs --require_prototypes
#    List file    =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\i2cisr_test\Release\List\i2cisr_test.lst
#    Object file  =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\i2cisr_test\Release\Obj\i2cisr_test.o
#
###############################################################################

C:\Freescale\KM128SWDRV_R4_1_6\src\projects\i2cisr_test\i2cisr_test.c
      1          /******************************************************************************
      2           * (c) Copyright 2010-2015, Freescale Semiconductor Inc.
      3           * ALL RIGHTS RESERVED.
      4           ******************************************************************************
      5           * i2cisr_test.c
      6           ******************************************************************************/
      7          #include "drivers.h"
      8          
      9          /* program constants                                                          */
     10          #define READBYTES (uint8)5       /* number of bytes to read from 24C16 memory */
     11          
     12          /* i2c callback function prototype                                            */
     13          static void i2c_callback (I2C_CALLBACK_SRC module, I2C_CALLBACK_TYPE type);
     14          
     15          /* data type definitions                                                      */

   \                                 In section .data, align 4
     16          static uint8 ui8_data[READBYTES+3] = {0xa0,0,0xa1};           /* WR/RD buffer */
     17          static uint8 cnt = 0;                                   /* WR/RD byte counter */
   \                     cnt:
   \   00000000   0x00               DC8 0
   \   00000001   0x00 0x00          DC8 0, 0, 0
   \              0x00         
   \   00000004   0xA0 0x00          DC8 160, 0, 161, 0, 0, 0, 0, 0
   \              0xA1 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
     18          

   \                                 In section .text, align 4, keep-with-next
     19          void main (void)
     20          {
   \                     main: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
     21            /* enable clocks to all on chip peripherals                                 */
     22            SIM_Init (SIM_MODULE_ALL_PERIPH_ON_CONFIG);
   \   00000004   0x....             LDR      R1,??DataTable5  ;; 0x4003e000
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x6008             STR      R0,[R1, #+0]
   \   0000000A   0x6048             STR      R0,[R1, #+4]
   \   0000000C   0x....             LDR      R1,??DataTable5_1  ;; 0x4003f004
   \   0000000E   0x2201             MOVS     R2,#+1
   \   00000010   0x600A             STR      R2,[R1, #+0]
   \   00000012   0x....             LDR      R2,??DataTable5_2  ;; 0x786cbdf2
   \   00000014   0x630A             STR      R2,[R1, #+48]
   \   00000016   0x....             LDR      R2,??DataTable5_3  ;; 0x7ab7fc8
   \   00000018   0x634A             STR      R2,[R1, #+52]
   \   0000001A   0x....             LDR      R2,??DataTable5_4  ;; 0xd0116a1f
   \   0000001C   0x638A             STR      R2,[R1, #+56]
   \   0000001E   0x2203             MOVS     R2,#+3
   \   00000020   0x63CA             STR      R2,[R1, #+60]
   \   00000022   0x2280             MOVS     R2,#+128
   \   00000024   0x0512             LSLS     R2,R2,#+20       ;; #+134217728
   \   00000026   0x640A             STR      R2,[R1, #+64]
   \   00000028   0x6488             STR      R0,[R1, #+72]
   \   0000002A   0x6688             STR      R0,[R1, #+104]
     23          
     24            /* clock mode 2:1:1, 48MHz                                                  */
     25            SIM_SetClkMode (SYSCLK_MODE1);
   \   0000002C   0x....             LDR      R1,??DataTable5_5  ;; 0x5d83f044
   \   0000002E   0x600A             STR      R2,[R1, #+0]
     26            SIM_SetClkDiv  (SYSCLK_DIV1);
   \   00000030   0x....             LDR      R1,??DataTable5_6  ;; 0x5e1bf044
   \   00000032   0x6008             STR      R0,[R1, #+0]
     27            FLL_Init  (FLL_MODULE_FEE_48MHZ_CONFIG);
   \   00000034   0x....             ADR.N    R0,?_0
   \   00000036   0xC803             LDM      R0,{R0,R1}
   \   00000038   0x.... 0x....      BL       FLL_Init
     28          
     29            /* PORTs initialize, PTD7_SCL, PTE0_SDA                                     */
     30            PORT_Init (PORTF, PORT_MODULE_ALT2_MODE, PIN5);
   \   0000003C   0x2220             MOVS     R2,#+32
   \   0000003E   0xBF00             Nop      
   \   00000040   0x....             ADR.N    R0,?_1
   \   00000042   0xC803             LDM      R0,{R0,R1}
   \   00000044   0x.... 0x....      BL       PORTF_Init
     31            PORT_Init (PORTF, PORT_MODULE_ALT2_MODE, PIN6);
   \   00000048   0x2240             MOVS     R2,#+64
   \   0000004A   0xBF00             Nop      
   \   0000004C   0x....             ADR.N    R0,?_2
   \   0000004E   0xC803             LDM      R0,{R0,R1}
   \   00000050   0x.... 0x....      BL       PORTF_Init
     32          
     33            /* I2C module initialize 100 kBps (@24MHz), IRQ master mode                 */
     34            I2C_Init  (I2C1, I2C_MODULE_IRQ_EN_CONFIG(0x1f));
   \   00000054   0x....             ADR.N    R0,?_3
   \   00000056   0xC807             LDM      R0,{R0-R2}
   \   00000058   0x.... 0x....      BL       I2C1_Init
     35            I2C_InstallCallback  (PRI_LVL1, i2c_callback);
   \   0000005C   0x....             LDR      R1,??DataTable5_7
   \   0000005E   0x2001             MOVS     R0,#+1
   \   00000060   0x.... 0x....      BL       I2C_InstallCallback
     36          
     37            /* Set TX mode and Generate START on I2C bus                                */
     38            I2C_SetTxMode(I2C1);
   \   00000064   0x....             LDR      R0,??DataTable5_8  ;; 0x48068002
   \   00000066   0x2110             MOVS     R1,#+16
   \   00000068   0x7001             STRB     R1,[R0, #+0]
     39            I2C_StartSignal(I2C1);
   \   0000006A   0x2120             MOVS     R1,#+32
   \   0000006C   0x7001             STRB     R1,[R0, #+0]
     40          
     41            /* Enable all interrupts                                                    */
     42            EnableInterrupts();
   \   0000006E   0xB662             CPSIE i
     43          
     44            /* Writing the 1-st byte (device select byte)                               */
     45            I2C_WrData(I2C1, ui8_data[0]);
   \   00000070   0x....             LDR      R0,??DataTable5_9
   \   00000072   0x7900             LDRB     R0,[R0, #+4]
   \   00000074   0x....             LDR      R1,??DataTable5_10  ;; 0x40068004
   \   00000076   0x7008             STRB     R0,[R1, #+0]
     46          
     47            /* main loop                                                                */
     48            while(1);
   \                     ??main_0: (+1)
   \   00000078   0xE7FE             B        ??main_0
     49          }
     50          
     51          /* i2c callback function definition                                           */

   \                                 In section .text, align 2, keep-with-next
     52          static void i2c_callback (I2C_CALLBACK_SRC module, I2C_CALLBACK_TYPE type)
     53          {
   \                     i2c_callback: (+1)
   \   00000000   0xB470             PUSH     {R4-R6}
     54            uint16 wait=0;
     55          
     56            if (module == I2C1_CALLBACK)
   \   00000002   0x....             LDR      R2,??DataTable5_9
   \   00000004   0x7813             LDRB     R3,[R2, #+0]
   \   00000006   0x2802             CMP      R0,#+2
   \   00000008   0xD12F             BNE      ??i2c_callback_0
     57            {
     58              if (type == I2C_MTX_CALLBACK)
   \   0000000A   0x2901             CMP      R1,#+1
   \   0000000C   0xD119             BNE      ??i2c_callback_1
     59              {
     60                cnt++;
   \   0000000E   0x1C5B             ADDS     R3,R3,#+1
     61                if (cnt == 3)                                /* end of transmitting?    */
   \   00000010   0xB2DB             UXTB     R3,R3
   \   00000012   0x2B03             CMP      R3,#+3
   \   00000014   0xD104             BNE      ??i2c_callback_2
     62                {
     63                  I2C_SetRxMode(I2C1);                       /* set to the RX mode      */
   \   00000016   0x20EF             MOVS     R0,#+239
   \   00000018   0x....             LDR      R1,??DataTable5_11  ;; 0x44068002
   \   0000001A   0x7008             STRB     R0,[R1, #+0]
     64                  cnt--;                                     /* will be dummy reading   */
   \   0000001C   0x1E5B             SUBS     R3,R3,#+1
   \   0000001E   0xE024             B        ??i2c_callback_0
     65                }
     66                else
     67                {
     68                  if (cnt == 2)
   \                     ??i2c_callback_2: (+1)
   \   00000020   0x....             LDR      R1,??DataTable5_12  ;; 0x40068003
   \   00000022   0x2B02             CMP      R3,#+2
   \   00000024   0xD109             BNE      ??i2c_callback_3
     69                  {
     70                    I2C_RepeatStartSignal(I2C1);             /* generate repeat start   */
   \   00000026   0x2404             MOVS     R4,#+4
   \   00000028   0x....             LDR      R5,??DataTable5_8  ;; 0x48068002
   \   0000002A   0x702C             STRB     R4,[R5, #+0]
   \   0000002C   0x03A4             LSLS     R4,R4,#+14
   \   0000002E   0x2580             MOVS     R5,#+128
     71                    while(I2C_GetTcFlag(I2C1) && (++wait));  /* bus releasing           */
   \                     ??i2c_callback_4: (+1)
   \   00000030   0x780E             LDRB     R6,[R1, #+0]
   \   00000032   0x422E             TST      R6,R5
   \   00000034   0xD001             BEQ      ??i2c_callback_3
   \   00000036   0x1E64             SUBS     R4,R4,#+1
   \   00000038   0xD1FA             BNE      ??i2c_callback_4
     72                  }
     73                  I2C_WrData(I2C1, ui8_data[cnt]);           /* writing the n-th byte   */
   \                     ??i2c_callback_3: (+1)
   \   0000003A   0x18D0             ADDS     R0,R2,R3
   \   0000003C   0x7900             LDRB     R0,[R0, #+4]
   \   0000003E   0x7048             STRB     R0,[R1, #+1]
   \   00000040   0xE013             B        ??i2c_callback_0
     74                }
     75              }
     76              else if (type == I2C_MRX_CALLBACK)
   \                     ??i2c_callback_1: (+1)
   \   00000042   0x2902             CMP      R1,#+2
   \   00000044   0xD111             BNE      ??i2c_callback_0
     77              {
     78                if (cnt == (READBYTES+2))
   \   00000046   0x2B07             CMP      R3,#+7
   \   00000048   0xD105             BNE      ??i2c_callback_5
     79                {
     80                  I2C_StopSignal(I2C1);                      /* end of data reading     */
   \   0000004A   0x....             LDR      R1,??DataTable5_11  ;; 0x44068002
   \   0000004C   0x24DF             MOVS     R4,#+223
   \   0000004E   0x700C             STRB     R4,[R1, #+0]
     81                  I2C_ClrNackMode(I2C1);                     /* enables acknowledge     */
   \   00000050   0x24F7             MOVS     R4,#+247
   \   00000052   0x700C             STRB     R4,[R1, #+0]
   \   00000054   0xE004             B        ??i2c_callback_6
     82                }
     83                else if (cnt == (READBYTES+1))
   \                     ??i2c_callback_5: (+1)
   \   00000056   0x2B06             CMP      R3,#+6
   \   00000058   0xD102             BNE      ??i2c_callback_6
     84                {
     85                  I2C_SetNackMode(I2C1);                     /* no acknowledge needed   */
   \   0000005A   0x2108             MOVS     R1,#+8
   \   0000005C   0x....             LDR      R4,??DataTable5_8  ;; 0x48068002
   \   0000005E   0x7021             STRB     R1,[R4, #+0]
     86                }
     87                ui8_data[cnt++] = I2C_RdData(I2C1);          /* reading the n-th byte   */
   \                     ??i2c_callback_6: (+1)
   \   00000060   0x....             LDR      R1,??DataTable5_12  ;; 0x40068003
   \   00000062   0x7849             LDRB     R1,[R1, #+1]
   \   00000064   0x18D0             ADDS     R0,R2,R3
   \   00000066   0x7101             STRB     R1,[R0, #+4]
   \   00000068   0x1C5B             ADDS     R3,R3,#+1
   \                     ??i2c_callback_0: (+1)
   \   0000006A   0x7013             STRB     R3,[R2, #+0]
     88              }
     89            }
     90          }
   \   0000006C   0xBC70             POP      {R4-R6}
   \   0000006E   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x4003E000         DC32     0x4003e000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x4003F004         DC32     0x4003f004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x786CBDF2         DC32     0x786cbdf2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x07AB7FC8         DC32     0x7ab7fc8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0xD0116A1F         DC32     0xd0116a1f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x5D83F044         DC32     0x5d83f044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x5E1BF044         DC32     0x5e1bf044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x........         DC32     i2c_callback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0x48068002         DC32     0x48068002

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   0x........         DC32     cnt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_10:
   \   00000000   0x40068004         DC32     0x40068004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_11:
   \   00000000   0x44068002         DC32     0x44068002

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_12:
   \   00000000   0x40068003         DC32     0x40068003

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x00 0x80          DC8 0, 128, 160, 8, 2, 1, 128, 0
   \              0xA0 0x08    
   \              0x02 0x01    
   \              0x80 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x00000200         DC32 512, 0
   \              0x00000000   

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x00000200         DC32 512, 0
   \              0x00000000   

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x00 0x1F          DC8 0, 31, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0xC0 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      12   i2c_callback
       8   main
         8   -> FLL_Init
         8   -> I2C1_Init
         8   -> I2C_InstallCallback
         8   -> PORTF_Init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_11
       4  ??DataTable5_12
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
       8  ?_0
       8  ?_1
       8  ?_2
      12  ?_3
      12  cnt
          ui8_data
     112  i2c_callback
     122  main

 
  12 bytes in section .data
 322 bytes in section .text
 
 322 bytes of CODE memory
  12 bytes of DATA memory

Errors: none
Warnings: none
