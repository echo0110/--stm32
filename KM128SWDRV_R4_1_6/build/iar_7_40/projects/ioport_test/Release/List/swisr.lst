###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        07/Feb/2017  17:56:26
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\swisr\swisr.c
#    Command line =  
#        C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\swisr\swisr.c
#        --no_size_constraints -D NDEBUG -lCN
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\ioport_test\Release\List\
#        -o
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\ioport_test\Release\Obj\
#        --no_unroll --debug --endian=little --cpu=Cortex-M0+ --no_mem_idioms
#        -e --fpu=None --dlib_config
#        D:\IAR7.4anzhuang\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\ioport_test\..\..\..\..\src\common\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\ioport_test\..\..\..\..\src\drivers\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\ioport_test\..\..\..\..\src\freemaster\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\ioport_test\..\..\..\..\src\projects\ioport_test\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\ioport_test\..\..\..\..\src\toolchain\iar\
#        -Ohs --require_prototypes
#    List file    =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\ioport_test\Release\List\swisr.lst
#    Object file  =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\ioport_test\Release\Obj\swisr.o
#
###############################################################################

C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\swisr\swisr.c
      1          /******************************************************************************
      2           * (c) Copyright 2010-2015, Freescale Semiconductor Inc.
      3           * ALL RIGHTS RESERVED.
      4           ***************************************************************************//*!
      5           * @file      swisr.c
      6           * @version   1.0.3.0
      7           * @date      Apr-21-2015
      8           * @brief     Software Interrupt (SWISR) driver source code.
      9           ******************************************************************************/
     10          #include "common.h"
     11          #include "swisr.h"
     12          
     13          #if !defined(MCU_MKM34ZA5)
     14            #error "The swisr.c module is specific to the MKMxxZxxACxx5 microcontrollers."
     15          #endif
     16          
     17          
     18          /******************************************************************************
     19           * public data type definitions                                               *
     20           ******************************************************************************/

   \                                 In section .bss, align 4
     21          uint16 swisrcnt[] = {0,0,0};
   \                     swisrcnt:
   \   00000000                      DS8 8
     22          
     23          /******************************************************************************
     24           * data type definitions                                                      *
     25           ******************************************************************************/

   \                                 In section .bss, align 4
     26          static SWISR_CALLBACK pCallback0;
   \                     pCallback0:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     27          static SWISR_CALLBACK pCallback1;
   \                     pCallback1:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     28          static SWISR_CALLBACK pCallback2;
   \                     pCallback2:
   \   00000000                      DS8 4
     29          
     30          /******************************************************************************
     31           * public function definitions                                                *
     32           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     33          void SWISR0_HandlerInit  (uint16 ip, SWISR_CALLBACK pCallback)
     34          {
     35            if (pCallback) { pCallback0 = pCallback; NVIC_SetIsr(SWISR_VECTOR_0,ip); }
   \                     SWISR0_HandlerInit: (+1)
   \   00000000   0x000A             MOVS     R2,R1
   \   00000002   0xD010             BEQ      ??SWISR0_HandlerInit_0
   \   00000004   0x....             LDR      R2,??DataTable5
   \   00000006   0x6011             STR      R1,[R2, #+0]
   \   00000008   0x2180             MOVS     R1,#+128
   \   0000000A   0x0209             LSLS     R1,R1,#+8        ;; #+32768
   \   0000000C   0x....             LDR      R2,??DataTable5_1  ;; 0xe000e280
   \   0000000E   0x6813             LDR      R3,[R2, #+0]
   \   00000010   0x430B             ORRS     R3,R3,R1
   \   00000012   0x6013             STR      R3,[R2, #+0]
   \   00000014   0x....             LDR      R2,??DataTable5_2  ;; 0xe000e100
   \   00000016   0x6813             LDR      R3,[R2, #+0]
   \   00000018   0x4319             ORRS     R1,R1,R3
   \   0000001A   0x6011             STR      R1,[R2, #+0]
   \   0000001C   0x....             LDR      R1,??DataTable5_3  ;; 0xe000e40c
   \   0000001E   0x680A             LDR      R2,[R1, #+0]
   \   00000020   0x0780             LSLS     R0,R0,#+30
   \   00000022   0x4310             ORRS     R0,R0,R2
   \   00000024   0x6008             STR      R0,[R1, #+0]
     36          }
   \                     ??SWISR0_HandlerInit_0: (+1)
   \   00000026   0x4770             BX       LR               ;; return
     37          

   \                                 In section .text, align 2, keep-with-next
     38          void SWISR1_HandlerInit  (uint16 ip, SWISR_CALLBACK pCallback)
     39          {
     40            if (pCallback) { pCallback1 = pCallback; NVIC_SetIsr(SWISR_VECTOR_1,ip); }
   \                     SWISR1_HandlerInit: (+1)
   \   00000000   0x000A             MOVS     R2,R1
   \   00000002   0xD010             BEQ      ??SWISR1_HandlerInit_0
   \   00000004   0x....             LDR      R2,??DataTable5_4
   \   00000006   0x6011             STR      R1,[R2, #+0]
   \   00000008   0x2180             MOVS     R1,#+128
   \   0000000A   0x0509             LSLS     R1,R1,#+20       ;; #+134217728
   \   0000000C   0x....             LDR      R2,??DataTable5_1  ;; 0xe000e280
   \   0000000E   0x6813             LDR      R3,[R2, #+0]
   \   00000010   0x430B             ORRS     R3,R3,R1
   \   00000012   0x6013             STR      R3,[R2, #+0]
   \   00000014   0x....             LDR      R2,??DataTable5_2  ;; 0xe000e100
   \   00000016   0x6813             LDR      R3,[R2, #+0]
   \   00000018   0x4319             ORRS     R1,R1,R3
   \   0000001A   0x6011             STR      R1,[R2, #+0]
   \   0000001C   0x....             LDR      R1,??DataTable5_5  ;; 0xe000e418
   \   0000001E   0x680A             LDR      R2,[R1, #+0]
   \   00000020   0x0780             LSLS     R0,R0,#+30
   \   00000022   0x4310             ORRS     R0,R0,R2
   \   00000024   0x6008             STR      R0,[R1, #+0]
     41          }
   \                     ??SWISR1_HandlerInit_0: (+1)
   \   00000026   0x4770             BX       LR               ;; return
     42          

   \                                 In section .text, align 2, keep-with-next
     43          void SWISR2_HandlerInit  (uint16 ip, SWISR_CALLBACK pCallback)
     44          {
     45            if (pCallback) { pCallback2 = pCallback; NVIC_SetIsr(SWISR_VECTOR_2,ip); }
   \                     SWISR2_HandlerInit: (+1)
   \   00000000   0x000A             MOVS     R2,R1
   \   00000002   0xD010             BEQ      ??SWISR2_HandlerInit_0
   \   00000004   0x....             LDR      R2,??DataTable5_6
   \   00000006   0x6011             STR      R1,[R2, #+0]
   \   00000008   0x2180             MOVS     R1,#+128
   \   0000000A   0x0549             LSLS     R1,R1,#+21       ;; #+268435456
   \   0000000C   0x....             LDR      R2,??DataTable5_1  ;; 0xe000e280
   \   0000000E   0x6813             LDR      R3,[R2, #+0]
   \   00000010   0x430B             ORRS     R3,R3,R1
   \   00000012   0x6013             STR      R3,[R2, #+0]
   \   00000014   0x....             LDR      R2,??DataTable5_2  ;; 0xe000e100
   \   00000016   0x6813             LDR      R3,[R2, #+0]
   \   00000018   0x4319             ORRS     R1,R1,R3
   \   0000001A   0x6011             STR      R1,[R2, #+0]
   \   0000001C   0x....             LDR      R1,??DataTable5_7  ;; 0xe000e41c
   \   0000001E   0x680A             LDR      R2,[R1, #+0]
   \   00000020   0x0180             LSLS     R0,R0,#+6
   \   00000022   0x4310             ORRS     R0,R0,R2
   \   00000024   0x6008             STR      R0,[R1, #+0]
     46          }
   \                     ??SWISR2_HandlerInit_0: (+1)
   \   00000026   0x4770             BX       LR               ;; return
     47          
     48          /******************************************************************************
     49           * interrupt function definitions                                             *
     50           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     51          void slcd_isr (void) { pCallback0(); }
   \                     slcd_isr: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
   \   00000004   0x....             LDR      R0,??DataTable5
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x4780             BLX      R0
   \   0000000A   0xB001             ADD      SP,SP,#+4
   \   0000000C   0xBD00             POP      {PC}             ;; return

   \                                 In section .text, align 2, keep-with-next
     52          void ewm_isr  (void) { pCallback1(); }
   \                     ewm_isr: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
   \   00000004   0x....             LDR      R0,??DataTable5_4
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x4780             BLX      R0
   \   0000000A   0xB001             ADD      SP,SP,#+4
   \   0000000C   0xBD00             POP      {PC}             ;; return

   \                                 In section .text, align 2, keep-with-next
     53          void mcg_isr  (void) { pCallback2(); }
   \                     mcg_isr: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
   \   00000004   0x....             LDR      R0,??DataTable5_6
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x4780             BLX      R0
   \   0000000A   0xB001             ADD      SP,SP,#+4
   \   0000000C   0xBD00             POP      {PC}             ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     pCallback0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0xE000E280         DC32     0xe000e280

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0xE000E40C         DC32     0xe000e40c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x........         DC32     pCallback1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0xE000E418         DC32     0xe000e418

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x........         DC32     pCallback2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0xE000E41C         DC32     0xe000e41c
     54          /******************************************************************************
     55           * End of module                                                              *
     56           ******************************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   SWISR0_HandlerInit
       0   SWISR1_HandlerInit
       0   SWISR2_HandlerInit
       8   ewm_isr
         8   -- Indirect call
       8   mcg_isr
         8   -- Indirect call
       8   slcd_isr
         8   -- Indirect call


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
      40  SWISR0_HandlerInit
      40  SWISR1_HandlerInit
      40  SWISR2_HandlerInit
      14  ewm_isr
      14  mcg_isr
       4  pCallback0
       4  pCallback1
       4  pCallback2
      14  slcd_isr
       8  swisrcnt

 
  20 bytes in section .bss
 194 bytes in section .text
 
 194 bytes of CODE memory
  20 bytes of DATA memory

Errors: none
Warnings: none
