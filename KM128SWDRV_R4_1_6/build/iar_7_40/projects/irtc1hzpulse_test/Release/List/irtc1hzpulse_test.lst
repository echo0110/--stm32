###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        15/Mar/2017  13:16:53
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Freescale\KM128SWDRV_R4_1_6\src\projects\irtc1hzpulse_test\irtc1hzpulse_test.c
#    Command line =  
#        C:\Freescale\KM128SWDRV_R4_1_6\src\projects\irtc1hzpulse_test\irtc1hzpulse_test.c
#        --no_size_constraints -D NDEBUG -lCN
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\irtc1hzpulse_test\Release\List\
#        -o
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\irtc1hzpulse_test\Release\Obj\
#        --no_unroll --debug --endian=little --cpu=Cortex-M0+ --no_mem_idioms
#        -e --fpu=None --dlib_config
#        D:\IAR7.4anzhuang\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\irtc1hzpulse_test\..\..\..\..\src\common\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\irtc1hzpulse_test\..\..\..\..\src\drivers\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\irtc1hzpulse_test\..\..\..\..\src\freemaster\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\irtc1hzpulse_test\..\..\..\..\src\projects\irtc1hzpulse_test\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\irtc1hzpulse_test\..\..\..\..\src\toolchain\iar\
#        -Ohs --require_prototypes
#    List file    =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\irtc1hzpulse_test\Release\List\irtc1hzpulse_test.lst
#    Object file  =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\irtc1hzpulse_test\Release\Obj\irtc1hzpulse_test.o
#
###############################################################################

C:\Freescale\KM128SWDRV_R4_1_6\src\projects\irtc1hzpulse_test\irtc1hzpulse_test.c
      1          /******************************************************************************
      2           * (c) Copyright 2010-2015, Freescale Semiconductor Inc.
      3           * ALL RIGHTS RESERVED.
      4           ******************************************************************************
      5           * irtc1hzpulse_test.c
      6           ******************************************************************************/
      7          #include "drivers.h"
      8          #include "freemaster.h"
      9          

   \                                 In section .data, align 1
     10          static int8  int_comp_val = -5;
     11          static uint8 fra_comp_val = 11;
   \                     fra_comp_val:
   \   00000000   0x0B               DC8 11
   \                     int_comp_val:
   \   00000001   0xFB               DC8 -5
     12          
     13          /* FreeMASTER TSA table                                                       */

   \                                 In section .text, align 4, keep-with-next
     14          FMSTR_TSA_TABLE_BEGIN(first_table)
     15              FMSTR_TSA_RW_VAR(int_comp_val, FMSTR_TSA_SINT8)
     16              FMSTR_TSA_RW_VAR(fra_comp_val, FMSTR_TSA_UINT8)
     17          FMSTR_TSA_TABLE_END()
   \                     FMSTR_TsaGetTable_first_table: (+1)
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xD001             BEQ      ??FMSTR_TsaGetTable_first_table_0
   \   00000004   0x2120             MOVS     R1,#+32
   \   00000006   0x8001             STRH     R1,[R0, #+0]
   \                     ??FMSTR_TsaGetTable_first_table_0: (+1)
   \   00000008   0x....             ADR.N    R0,??fmstr_tsatable
   \   0000000A   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \   __absolute struct <unnamed> const FMSTR_TsaGetTable_first_table::fmstr_tsatable[2]
   \                     ??fmstr_tsatable:
   \   00000000   0x........         DC32 ?_0, ?_1, int_comp_val, 7H, ?_2, ?_3, fra_comp_val, 7H
   \              0x........   
   \              0x........   
   \              0x00000007   
   \              0x........   
   \              0x........   
   \              0x........   
   \              0x00000007   
     18          

   \                                 In section .text, align 4, keep-with-next
     19          FMSTR_TSA_TABLE_LIST_BEGIN()
     20              FMSTR_TSA_TABLE(first_table)
   \                     FMSTR_TsaGetTable: (+1)
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xD105             BNE      ??FMSTR_TsaGetTable_0
   \   00000004   0x2900             CMP      R1,#+0
   \   00000006   0xD001             BEQ      ??FMSTR_TsaGetTable_1
   \   00000008   0x2020             MOVS     R0,#+32
   \   0000000A   0x8008             STRH     R0,[R1, #+0]
   \                     ??FMSTR_TsaGetTable_1: (+1)
   \   0000000C   0x....             ADR.N    R0,??fmstr_tsatable
   \   0000000E   0x4770             BX       LR
     21          FMSTR_TSA_TABLE_LIST_END()
   \                     ??FMSTR_TsaGetTable_0: (+1)
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x4770             BX       LR               ;; return
     22          /* End of FreeMASTER TSA table                                                */
     23          

   \                                 In section .text, align 4, keep-with-next
     24          void main (void)
     25          {
   \                     main: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
     26            /* initialize SIM module and enable MCGIRCLK for use by peripherals         */
     27            SIM_Init  (SIM_MODULE_ALL_PERIPH_ON_CONFIG);
   \   00000004   0x....             LDR      R0,??DataTable12  ;; 0x4003e000
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x6001             STR      R1,[R0, #+0]
   \   0000000A   0x6041             STR      R1,[R0, #+4]
   \   0000000C   0x....             LDR      R0,??DataTable12_1  ;; 0x4003f004
   \   0000000E   0x2101             MOVS     R1,#+1
   \   00000010   0x6001             STR      R1,[R0, #+0]
   \   00000012   0x....             LDR      R1,??DataTable12_2  ;; 0x786cbdf2
   \   00000014   0x6301             STR      R1,[R0, #+48]
   \   00000016   0x....             LDR      R1,??DataTable12_3  ;; 0x7ab7fc8
   \   00000018   0x6341             STR      R1,[R0, #+52]
   \   0000001A   0x....             LDR      R1,??DataTable12_4  ;; 0xd0116a1f
   \   0000001C   0x6381             STR      R1,[R0, #+56]
   \   0000001E   0x2103             MOVS     R1,#+3
   \   00000020   0x63C1             STR      R1,[R0, #+60]
   \   00000022   0x2180             MOVS     R1,#+128
   \   00000024   0x0509             LSLS     R1,R1,#+20       ;; #+134217728
   \   00000026   0x6401             STR      R1,[R0, #+64]
   \   00000028   0x2100             MOVS     R1,#+0
   \   0000002A   0x6481             STR      R1,[R0, #+72]
   \   0000002C   0x6681             STR      R1,[R0, #+104]
   \   0000002E   0x2002             MOVS     R0,#+2
   \   00000030   0x....             LDR      R1,??DataTable12_5  ;; 0x50864000
   \   00000032   0x7008             STRB     R0,[R1, #+0]
     28          
     29            /* enable MCGIRCLK for use by peripherals and change MCGIRCLK clock         */
     30            /* frequency from 2.097 MHz to 4.192 MHz                                    */
     31            FLL_CtrlIRCLKEN (TRUE);
     32            FLL_SetFastClkDiv(FIRC_DIV1);
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x....             LDR      R1,??DataTable12_6  ;; 0x50964008
   \   00000038   0x7008             STRB     R0,[R1, #+0]
     33          
     34            /* initialize IRTC with 1 Hz fine pulse output (routed to PTF2)             */
     35            IRTC_Init (IRTC_MODULE_COMP_FINE_CONFIG(LFSR_CLK_2HZ,0,int_comp_val,fra_comp_val),
   \   0000003A   0xBF00             Nop      
   \   0000003C   0x....             ADR.N    R0,?_10
   \   0000003E   0xC803             LDM      R0,{R0,R1}
   \   00000040   0xAA02             ADD      R2,SP,#+8
   \   00000042   0xC203             STM      R2!,{R0,R1}
   \   00000044   0x....             LDR      R0,??DataTable12_7
   \   00000046   0x2101             MOVS     R1,#+1
   \   00000048   0x5640             LDRSB    R0,[R0, R1]
   \   0000004A   0x0300             LSLS     R0,R0,#+12
   \   0000004C   0x....             LDR      R1,??DataTable12_7
   \   0000004E   0x7809             LDRB     R1,[R1, #+0]
   \   00000050   0x4308             ORRS     R0,R0,R1
   \   00000052   0xA902             ADD      R1,SP,#+8
   \   00000054   0x8048             STRH     R0,[R1, #+2]
   \   00000056   0x2000             MOVS     R0,#+0
   \   00000058   0x9001             STR      R0,[SP, #+4]
   \   0000005A   0xBF00             Nop      
   \   0000005C   0x....             ADR.N    R0,?_6
   \   0000005E   0x6800             LDR      R0,[R0, #+0]
   \   00000060   0x9000             STR      R0,[SP, #+0]
   \   00000062   0xBF00             Nop      
   \   00000064   0x....             ADR.N    R0,?_5
   \   00000066   0x6803             LDR      R3,[R0, #+0]
   \   00000068   0x....             ADR.N    R0,?_4
   \   0000006A   0x6802             LDR      R2,[R0, #+0]
   \   0000006C   0xA802             ADD      R0,SP,#+8
   \   0000006E   0xC803             LDM      R0,{R0,R1}
     36                       IRTC_TAMPER_PIN_DI_CONFIG,
     37                       IRTC_TAMPER_PIN_DI_CONFIG,
     38                       IRTC_TAMPER_PIN_DI_CONFIG,
     39                       0);
   \   00000070   0x.... 0x....      BL       IRTC_Init
   \   00000074   0x2680             MOVS     R6,#+128
   \   00000076   0x....             LDR      R4,??DataTable12_8  ;; 0x40050012
   \   00000078   0xE000             B        ??main_0
     40            IRTC_SelRtcClkout (RTCCLKOUT_SRC1);
   \                     ??main_1: (+1)
   \   0000007A   0x7026             STRB     R6,[R4, #+0]
   \                     ??main_0: (+1)
   \   0000007C   0x8820             LDRH     R0,[R4, #+0]
   \   0000007E   0x0780             LSLS     R0,R0,#+30
   \   00000080   0xD5FB             BPL      ??main_1
   \                     ??main_2: (+1)
   \   00000082   0x8820             LDRH     R0,[R4, #+0]
   \   00000084   0x0780             LSLS     R0,R0,#+30
   \   00000086   0xD507             BPL      ??main_3
   \   00000088   0x2000             MOVS     R0,#+0
   \   0000008A   0x7020             STRB     R0,[R4, #+0]
   \   0000008C   0x2040             MOVS     R0,#+64
   \   0000008E   0x7020             STRB     R0,[R4, #+0]
   \   00000090   0x20C0             MOVS     R0,#+192
   \   00000092   0x7020             STRB     R0,[R4, #+0]
   \   00000094   0x7026             STRB     R6,[R4, #+0]
   \   00000096   0xE7F4             B        ??main_2
   \                     ??main_3: (+1)
   \   00000098   0x01B0             LSLS     R0,R6,#+6
   \   0000009A   0x....             LDR      R1,??DataTable12_9  ;; 0x568d0010
   \   0000009C   0x8008             STRH     R0,[R1, #+0]
     41            PORT_Init (PORTF, PORT_MODULE_ALT3_MODE, PIN2);
   \   0000009E   0x2204             MOVS     R2,#+4
   \   000000A0   0x....             ADR.N    R0,?_7
   \   000000A2   0xC803             LDM      R0,{R0,R1}
   \   000000A4   0x.... 0x....      BL       PORTF_Init
     42          
     43            /* initialize UART and FreeMASTER                                           */
     44            PORT_Init (PORTI, PORT_MODULE_ALT2_MODE, PIN0|PIN1);
   \   000000A8   0x2203             MOVS     R2,#+3
   \   000000AA   0xBF00             Nop      
   \   000000AC   0x....             ADR.N    R0,?_8
   \   000000AE   0xC803             LDM      R0,{R0,R1}
   \   000000B0   0x.... 0x....      BL       PORTI_Init
     45            UART_Init (UART1, UART_MODULE_POLLMODE_CONFIG(38400,4e6));
   \   000000B4   0x....             ADR.N    R0,?_9
   \   000000B6   0xC807             LDM      R0,{R0-R2}
   \   000000B8   0x.... 0x....      BL       UART1_Init
     46          
     47            FMSTR_Init();
   \   000000BC   0x.... 0x....      BL       FMSTR_Init
   \   000000C0   0x27C0             MOVS     R7,#+192
   \   000000C2   0x2540             MOVS     R5,#+64
   \   000000C4   0xE013             B        ??main_4
     48          
     49            while(1)
     50            {
     51              IRTC_UpdateFineCompVal (int_comp_val,fra_comp_val);
   \                     ??main_5: (+1)
   \   000000C6   0x2000             MOVS     R0,#+0
   \   000000C8   0x7020             STRB     R0,[R4, #+0]
   \   000000CA   0x7025             STRB     R5,[R4, #+0]
   \   000000CC   0x7027             STRB     R7,[R4, #+0]
   \   000000CE   0x7026             STRB     R6,[R4, #+0]
   \                     ??main_6: (+1)
   \   000000D0   0x8820             LDRH     R0,[R4, #+0]
   \   000000D2   0x0780             LSLS     R0,R0,#+30
   \   000000D4   0xD4F7             BMI      ??main_5
   \   000000D6   0x....             LDR      R0,??DataTable12_7
   \   000000D8   0x2101             MOVS     R1,#+1
   \   000000DA   0x5640             LDRSB    R0,[R0, R1]
   \   000000DC   0x0300             LSLS     R0,R0,#+12
   \   000000DE   0x....             LDR      R1,??DataTable12_7
   \   000000E0   0x7809             LDRB     R1,[R1, #+0]
   \   000000E2   0x0649             LSLS     R1,R1,#+25
   \   000000E4   0x0E49             LSRS     R1,R1,#+25
   \   000000E6   0x4301             ORRS     R1,R1,R0
   \   000000E8   0x82E1             STRH     R1,[R4, #+22]
     52              FMSTR_Poll             ();
   \   000000EA   0x.... 0x....      BL       FMSTR_Poll
   \                     ??main_4: (+1)
   \   000000EE   0x8820             LDRH     R0,[R4, #+0]
   \   000000F0   0x0780             LSLS     R0,R0,#+30
   \   000000F2   0xD4ED             BMI      ??main_6
   \   000000F4   0x7026             STRB     R6,[R4, #+0]
   \   000000F6   0xE7FA             B        ??main_4
     53            }
     54          }

   \                                 In section .text, align 4, keep-with-next
   \                     ?_10:
   \   00000000   0x0003 0x0000      DC16 3, 0, 1792
   \              0x0700       
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12:
   \   00000000   0x4003E000         DC32     0x4003e000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_1:
   \   00000000   0x4003F004         DC32     0x4003f004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_2:
   \   00000000   0x786CBDF2         DC32     0x786cbdf2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_3:
   \   00000000   0x07AB7FC8         DC32     0x7ab7fc8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_4:
   \   00000000   0xD0116A1F         DC32     0xd0116a1f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_5:
   \   00000000   0x50864000         DC32     0x50864000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_6:
   \   00000000   0x50964008         DC32     0x50964008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_7:
   \   00000000   0x........         DC32     fra_comp_val

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_8:
   \   00000000   0x40050012         DC32     0x40050012

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable12_9:
   \   00000000   0x568D0010         DC32     0x568d0010

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x69 0x6E          DC8 "int_comp_val"
   \              0x74 0x5F    
   \              0x63 0x6F    
   \              0x6D 0x70    
   \              0x5F 0x76    
   \              0x61 0x6C    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 2, keep-with-next
   \                     ?_1:
   \   00000000   0xF0 0x00          DC8 "\360"

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x66 0x72          DC8 "fra_comp_val"
   \              0x61 0x5F    
   \              0x63 0x6F    
   \              0x6D 0x70    
   \              0x5F 0x76    
   \              0x61 0x6C    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 2, keep-with-next
   \                     ?_3:
   \   00000000   0xE0 0x00          DC8 "\340"

   \                                 In section .text, align 4, keep-with-next
   \                     ?_4:
   \   00000000   0x0000 0x0000      DC16 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_5:
   \   00000000   0x0000 0x0000      DC16 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_6:
   \   00000000   0x0000 0x0000      DC16 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_7:
   \   00000000   0x00000300         DC32 768, 0
   \              0x00000000   

   \                                 In section .text, align 4, keep-with-next
   \                     ?_8:
   \   00000000   0x00000200         DC32 512, 0
   \              0x00000000   

   \                                 In section .text, align 4, keep-with-next
   \                     ?_9:
   \   00000000   0x00 0x06          DC8 0, 6, 0, 12, 0, 0, 0, 0, 16, 0, 0, 0
   \              0x00 0x0C    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x10 0x00    
   \              0x00 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   FMSTR_TsaGetTable
       0   FMSTR_TsaGetTable_first_table
      40   main
        40   -> FMSTR_Init
        40   -> FMSTR_Poll
        40   -> IRTC_Init
        40   -> PORTF_Init
        40   -> PORTI_Init
        40   -> UART1_Init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable12
       4  ??DataTable12_1
       4  ??DataTable12_2
       4  ??DataTable12_3
       4  ??DataTable12_4
       4  ??DataTable12_5
       4  ??DataTable12_6
       4  ??DataTable12_7
       4  ??DataTable12_8
       4  ??DataTable12_9
      16  ?_0
       2  ?_1
       8  ?_10
      16  ?_2
       2  ?_3
       4  ?_4
       4  ?_5
       4  ?_6
       8  ?_7
       8  ?_8
      12  ?_9
      20  FMSTR_TsaGetTable
      12  FMSTR_TsaGetTable_first_table
      32  fmstr_tsatable
       2  fra_comp_val
          int_comp_val
     248  main

 
   2 bytes in section .data
  36 bytes in section .rodata
 400 bytes in section .text
 
 400 bytes of CODE  memory
  36 bytes of CONST memory
   2 bytes of DATA  memory

Errors: none
Warnings: none
