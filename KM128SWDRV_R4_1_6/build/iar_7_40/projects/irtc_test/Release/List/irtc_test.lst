###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        15/Mar/2017  13:54:26
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Freescale\KM128SWDRV_R4_1_6\src\projects\irtc_test\irtc_test.c
#    Command line =  
#        C:\Freescale\KM128SWDRV_R4_1_6\src\projects\irtc_test\irtc_test.c
#        --no_size_constraints -D NDEBUG -lCN
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\irtc_test\Release\List\
#        -o
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\irtc_test\Release\Obj\
#        --no_unroll --debug --endian=little --cpu=Cortex-M0+ --no_mem_idioms
#        -e --fpu=None --dlib_config
#        D:\IAR7.4anzhuang\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\irtc_test\..\..\..\..\src\common\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\irtc_test\..\..\..\..\src\drivers\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\irtc_test\..\..\..\..\src\freemaster\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\irtc_test\..\..\..\..\src\projects\irtc_test\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\irtc_test\..\..\..\..\src\toolchain\iar\
#        -Ohs --require_prototypes
#    List file    =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\irtc_test\Release\List\irtc_test.lst
#    Object file  =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\irtc_test\Release\Obj\irtc_test.o
#
###############################################################################

C:\Freescale\KM128SWDRV_R4_1_6\src\projects\irtc_test\irtc_test.c
      1          /******************************************************************************
      2           * (c) Copyright 2010-2015, Freescale Semiconductor Inc.
      3           * ALL RIGHTS RESERVED.
      4           ******************************************************************************
      5           * irtc_test.c
      6           ******************************************************************************/
      7          #include <string.h>
      8          #include "drivers.h"
      9          #include "stdio.h"
     10          #include <stdlib.h>
     11          #include <string.h>
     12          #include <locale.h>
     13          
     14          /* Initialize time variable for 20.10.2012 Saturday 23:59:58                  */

   \                                 In section .data, align 4
     15          static tTIME  wtime = {0,54,13,15,WEDNESDAY,MARCH ,2017}, rtime;
   \                     wtime:
   \   00000000   0x00 0x36          DC8 0, 54, 13, 15, 3, 3
   \              0x0D 0x0F    
   \              0x03 0x03    
   \   00000006   0x07E1             DC16 2017
   \   00000008   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000010   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
     16          static tALARM atime = {35, 0, 0,21,OCTOBER,2012};
     17          static tTAMPER_LOG log;
     18          static void irtc_callback (IRTC_CALLBACK_TYPE type, void *data);

   \                                 In section .bss, align 1
     19          uint8 miao;
   \                     miao:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     20          uint8 fen;
   \                     fen:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
     21          int i=0;
   \                     i:
   \   00000000                      DS8 4

   \                                 In section .data, align 4
     22          int b=2;
   \                     `b`:
   \   00000000   0x00000002         DC32 2
     23          
     24          
     25          
     26          

   \                                 In section .bss, align 4
     27          uint8 a[10]={0};
   \                     a:
   \   00000000                      DS8 12
     28          
     29          //volatile unsigned long *reg=(volatile unsigned long*)(RTC_BASE_PTR->SECONDS);

   \                                 In section .text, align 4, keep-with-next
     30          void main (void)
     31          {
   \                     main: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
     32            /* initialize SIM module                                                    */
     33            SIM_Init  (SIM_MODULE_ALL_PERIPH_ON_CONFIG);
   \   00000004   0x....             LDR      R1,??DataTable9  ;; 0x4003e000
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x6008             STR      R0,[R1, #+0]
   \   0000000A   0x6048             STR      R0,[R1, #+4]
   \   0000000C   0x....             LDR      R1,??DataTable9_1  ;; 0x4003f004
   \   0000000E   0x2201             MOVS     R2,#+1
   \   00000010   0x600A             STR      R2,[R1, #+0]
   \   00000012   0x....             LDR      R2,??DataTable9_2  ;; 0x786cbdf2
   \   00000014   0x630A             STR      R2,[R1, #+48]
   \   00000016   0x....             LDR      R2,??DataTable9_3  ;; 0x7ab7fc8
   \   00000018   0x634A             STR      R2,[R1, #+52]
   \   0000001A   0x....             LDR      R2,??DataTable9_4  ;; 0xd0116a1f
   \   0000001C   0x638A             STR      R2,[R1, #+56]
   \   0000001E   0x2203             MOVS     R2,#+3
   \   00000020   0x63CA             STR      R2,[R1, #+60]
   \   00000022   0x2280             MOVS     R2,#+128
   \   00000024   0x0512             LSLS     R2,R2,#+20       ;; #+134217728
   \   00000026   0x640A             STR      R2,[R1, #+64]
   \   00000028   0x6488             STR      R0,[R1, #+72]
   \   0000002A   0x6688             STR      R0,[R1, #+104]
     34            SIM_SetClkMode (SYSCLK_MODE1);
   \   0000002C   0x....             LDR      R1,??DataTable9_5  ;; 0x5d83f044
   \   0000002E   0x600A             STR      R2,[R1, #+0]
     35            SIM_SetClkDiv  (SYSCLK_DIV1);
   \   00000030   0x....             LDR      R1,??DataTable9_6  ;; 0x5e1bf044
   \   00000032   0x6008             STR      R0,[R1, #+0]
     36            SIM_EnableModule(PORTF);
   \   00000034   0x0C10             LSRS     R0,R2,#+16
   \   00000036   0x....             LDR      R1,??DataTable9_7  ;; 0x4803f038
   \   00000038   0x6008             STR      R0,[R1, #+0]
     37            FLL_Init(FLL_MODULE_FEE_48MHZ_CONFIG);
   \   0000003A   0xBF00             Nop      
   \   0000003C   0x....             ADR.N    R0,?_0
   \   0000003E   0xC803             LDM      R0,{R0,R1}
   \   00000040   0x.... 0x....      BL       FLL_Init
     38            
     39            IRTC_Init(IRTC_MODULE_COMP_OFF_CONFIG(LFSR_CLK_64HZ,10),
     40                       IRTC_TAMPER_PIN_DI_CONFIG,
     41                       IRTC_TAMPER_PIN_PASSIVE_POL_HIGH_CONFIG(LFSR_CLK_64HZ,10),
     42                       IRTC_TAMPER_PIN_DI_CONFIG,
     43                       IRTC_TAMPER1_MASK|IRTC_ALM_MASK|IRTC_1HZ_MASK);
   \   00000044   0x2089             MOVS     R0,#+137
   \   00000046   0x0040             LSLS     R0,R0,#+1        ;; #+274
   \   00000048   0x9001             STR      R0,[SP, #+4]
   \   0000004A   0xBF00             Nop      
   \   0000004C   0x....             ADR.N    R0,?_4
   \   0000004E   0x6800             LDR      R0,[R0, #+0]
   \   00000050   0x9000             STR      R0,[SP, #+0]
   \   00000052   0xBF00             Nop      
   \   00000054   0x....             ADR.N    R0,?_3
   \   00000056   0x6803             LDR      R3,[R0, #+0]
   \   00000058   0x....             ADR.N    R0,?_2
   \   0000005A   0x6802             LDR      R2,[R0, #+0]
   \   0000005C   0x....             ADR.N    R0,?_1
   \   0000005E   0xC803             LDM      R0,{R0,R1}
   \   00000060   0x.... 0x....      BL       IRTC_Init
     44             /* UART0 init 9600bd                                                        */
     45              PORT_Init (PORTF, PORT_MODULE_ALT4_MODE, PIN3|PIN4);
   \   00000064   0x2218             MOVS     R2,#+24
   \   00000066   0xBF00             Nop      
   \   00000068   0x....             ADR.N    R0,?_5
   \   0000006A   0xC803             LDM      R0,{R0,R1}
   \   0000006C   0x.... 0x....      BL       PORTF_Init
     46              UART_Init (UART0, UART_MODULE_POLLMODE_CONFIG(9600,24e6));
   \   00000070   0x....             ADR.N    R0,?_6
   \   00000072   0xC807             LDM      R0,{R0-R2}
   \   00000074   0x.... 0x....      BL       UART0_Init
     47                //  PTD4初始化用于拉高485 
     48              PORT_Init (PORTD, PORT_MODULE_LED_MODE, PIN4);
   \   00000078   0x2210             MOVS     R2,#+16
   \   0000007A   0xBF00             Nop      
   \   0000007C   0x....             ADR.N    R0,?_7
   \   0000007E   0xC803             LDM      R0,{R0,R1}
   \   00000080   0x.... 0x....      BL       PORTD_Init
     49              GPIO_Init (GPIOD, GPIO_OUT_LOGIC0_MODE, PIN4);
   \   00000084   0x....             LDR      R0,??DataTable9_8  ;; 0x400ff003
   \   00000086   0x7801             LDRB     R1,[R0, #+0]
   \   00000088   0x22EF             MOVS     R2,#+239
   \   0000008A   0x400A             ANDS     R2,R2,R1
   \   0000008C   0x7002             STRB     R2,[R0, #+0]
   \   0000008E   0x2110             MOVS     R1,#+16
   \   00000090   0x7D02             LDRB     R2,[R0, #+20]
   \   00000092   0x430A             ORRS     R2,R2,R1
   \   00000094   0x7502             STRB     R2,[R0, #+20]
     50              GPIO_Set(GPIOD,PIN4);//拉高485引脚
   \   00000096   0x7802             LDRB     R2,[R0, #+0]
   \   00000098   0x4311             ORRS     R1,R1,R2
   \   0000009A   0x7001             STRB     R1,[R0, #+0]
     51             
     52            //IRTC_GetClock (tTIME *ptr);
     53            //RTC_SECONDS = RTC_SECONDS_SEC_CNT(ptr->sec);
     54             
     55           
     56              IRTC_InstallCallback (PRI_LVL3,irtc_callback);
   \   0000009C   0x....             LDR      R1,??DataTable9_9
   \   0000009E   0x2003             MOVS     R0,#+3
   \   000000A0   0x.... 0x....      BL       IRTC_InstallCallback
     57              IRTC_SetClock (&wtime);
   \   000000A4   0x....             LDR      R4,??DataTable9_10
   \   000000A6   0x0020             MOVS     R0,R4
   \   000000A8   0x.... 0x....      BL       IRTC_SetClock
     58              IRTC_GetClock(&rtime);
   \   000000AC   0x3408             ADDS     R4,R4,#+8
   \   000000AE   0x0020             MOVS     R0,R4
   \   000000B0   0x.... 0x....      BL       IRTC_GetClock
     59             // IRTC_GetClock (&tTIME);
     60            // IRTC_SetDST(14,14,MARCH,3,28,OCTOBER);
     61          //  IRTC_SetAlarm(ALM_MATCH_SMH,&atime);
     62              EnableInterrupts();
   \   000000B4   0xB662             CPSIE i
     63              
     64          
     65           // RTC_BASE_PTR->SECONDS;
     66            //RTC_SECONDS;
     67           
     68            // RTC_SECONDS=0;//秒
     69            // RTC_HOURMIN=0;  //分
     70             // for(i=0;i<sizeof(rtime);i++)
     71          //    rtime.sec=0;
     72          //    rtime.min=0;
     73            
     74             while(1);
   \                     ??main_0: (+1)
   \   000000B6   0xE7FE             B        ??main_0
     75            // {
     76               
     77               // UART_PutChar(UART0, hs);
     78          //     for(i=0;i<sizeof(rtime);i++)
     79          //     UART_PutChar (UART0,*(uint8*)&rtime+i);
     80               
     81           //   IRTC_RdRam((uint8*)&rtime, sizeof(rtime));
     82             //  UART0_BASE_PTR->D=rtime.sec;
     83              // a[0]=UART0_BASE_PTR->D;
     84              //UART_PutStr (UART0,‘当前时间’);
     85          //    //arch_delay(9000);
     86           // UART_PutChar(UART0, 2); 
     87           // printf("0x01");
     88           //  UART_PutChar(UART0, rtime.min);
     89               
     90             // printf("(int)20");
     91               
     92            // }
     93           // {
     94              
     95            
     96          //   if(RTC_SECONDS==59)
     97          //   fen=1;//分钟
     98          //   if(RTC_HOURMIN==59)
     99          //     //hour=hour+1;
    100          //  
    101          //   UART_PutChar(UART0, fen);
    102           // UART_PutChar(UART0,rtime.sec);
    103            // }
    104          }
    105          

   \                                 In section .text, align 2, keep-with-next
    106          static void irtc_callback (IRTC_CALLBACK_TYPE type, void *data)
    107          {
   \                     irtc_callback: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
    108            
    109            if(type == IRTC_1HZ_CALLBACK    ) { memcpy (&rtime,data,sizeof(tTIME));     }
   \   00000004   0x2280             MOVS     R2,#+128
   \   00000006   0x0052             LSLS     R2,R2,#+1        ;; #+256
   \   00000008   0x4290             CMP      R0,R2
   \   0000000A   0xD102             BNE      ??irtc_callback_0
   \   0000000C   0x2208             MOVS     R2,#+8
   \   0000000E   0x....             LDR      R0,??DataTable9_11
   \   00000010   0xE009             B        ??irtc_callback_1
    110            if(type == IRTC_ALM_CALLBACK    ) { IRTC_SetClock(&wtime);                  }
   \                     ??irtc_callback_0: (+1)
   \   00000012   0x2810             CMP      R0,#+16
   \   00000014   0xD103             BNE      ??irtc_callback_2
   \   00000016   0x....             LDR      R0,??DataTable9_10
   \   00000018   0x.... 0x....      BL       IRTC_SetClock
   \   0000001C   0xE005             B        ??irtc_callback_3
    111            if(type == IRTC_TAMPER1_CALLBACK) { memcpy (&log,data,sizeof(tTAMPER_LOG)); }
   \                     ??irtc_callback_2: (+1)
   \   0000001E   0x2802             CMP      R0,#+2
   \   00000020   0xD103             BNE      ??irtc_callback_3
   \   00000022   0x220A             MOVS     R2,#+10
   \   00000024   0x....             LDR      R0,??DataTable9_12
   \                     ??irtc_callback_1: (+1)
   \   00000026   0x.... 0x....      BL       __aeabi_memcpy
    112          }
   \                     ??irtc_callback_3: (+1)
   \   0000002A   0xB001             ADD      SP,SP,#+4
   \   0000002C   0xBD00             POP      {PC}             ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9:
   \   00000000   0x4003E000         DC32     0x4003e000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_1:
   \   00000000   0x4003F004         DC32     0x4003f004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_2:
   \   00000000   0x786CBDF2         DC32     0x786cbdf2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_3:
   \   00000000   0x07AB7FC8         DC32     0x7ab7fc8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_4:
   \   00000000   0xD0116A1F         DC32     0xd0116a1f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_5:
   \   00000000   0x5D83F044         DC32     0x5d83f044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_6:
   \   00000000   0x5E1BF044         DC32     0x5e1bf044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_7:
   \   00000000   0x4803F038         DC32     0x4803f038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_8:
   \   00000000   0x400FF003         DC32     0x400ff003

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_9:
   \   00000000   0x........         DC32     irtc_callback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_10:
   \   00000000   0x........         DC32     wtime

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_11:
   \   00000000   0x........         DC32     wtime+0x8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable9_12:
   \   00000000   0x........         DC32     wtime+0x10

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x00 0x80          DC8 0, 128, 160, 8, 2, 1, 128, 0
   \              0xA0 0x08    
   \              0x02 0x01    
   \              0x80 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x0000 0x0000      DC16 0, 0, 41728
   \              0xA300       
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x0000 0x0000      DC16 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x0000 0x003A      DC16 0, 58

   \                                 In section .text, align 4, keep-with-next
   \                     ?_4:
   \   00000000   0x0000 0x0000      DC16 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_5:
   \   00000000   0x00000400         DC32 1024, 0
   \              0x00000000   

   \                                 In section .text, align 4, keep-with-next
   \                     ?_6:
   \   00000000   0x00 0x9C          DC8 0, 156, 0, 12, 0, 0, 0, 0, 8, 0, 0, 0
   \              0x00 0x0C    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x08 0x00    
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_7:
   \   00000000   0x00000104         DC32 260, 0
   \              0x00000000   
    113          
    114          
    115          
    116          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   irtc_callback
         8   -> IRTC_SetClock
         8   -> __aeabi_memcpy
      16   main
        16   -> FLL_Init
        16   -> IRTC_GetClock
        16   -> IRTC_Init
        16   -> IRTC_InstallCallback
        16   -> IRTC_SetClock
        16   -> PORTD_Init
        16   -> PORTF_Init
        16   -> UART0_Init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_10
       4  ??DataTable9_11
       4  ??DataTable9_12
       4  ??DataTable9_2
       4  ??DataTable9_3
       4  ??DataTable9_4
       4  ??DataTable9_5
       4  ??DataTable9_6
       4  ??DataTable9_7
       4  ??DataTable9_8
       4  ??DataTable9_9
       8  ?_0
       8  ?_1
       4  ?_2
       4  ?_3
       4  ?_4
       8  ?_5
      12  ?_6
       8  ?_7
      12  a
       4  b
       1  fen
       4  i
      46  irtc_callback
     184  main
       1  miao
      28  wtime
          rtime
          log

 
  18 bytes in section .bss
  32 bytes in section .data
 338 bytes in section .text
 
 338 bytes of CODE memory
  50 bytes of DATA memory

Errors: none
Warnings: 1
