###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        07/Mar/2017  09:14:21
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\ftfa\ftfa.c
#    Command line =  
#        C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\ftfa\ftfa.c
#        --no_size_constraints -D NDEBUG -lCN
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\irtcram_test\Release\List\
#        -o
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\irtcram_test\Release\Obj\
#        --no_unroll --debug --endian=little --cpu=Cortex-M0+ --no_mem_idioms
#        -e --fpu=None --dlib_config
#        D:\IAR7.4anzhuang\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\irtcram_test\..\..\..\..\src\common\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\irtcram_test\..\..\..\..\src\drivers\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\irtcram_test\..\..\..\..\src\freemaster\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\irtcram_test\..\..\..\..\src\projects\irtcram_test\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\irtcram_test\..\..\..\..\src\toolchain\iar\
#        -Ohs --require_prototypes
#    List file    =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\irtcram_test\Release\List\ftfa.lst
#    Object file  =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\irtcram_test\Release\Obj\ftfa.o
#
###############################################################################

C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\ftfa\ftfa.c
      1          /******************************************************************************
      2           * (c) Copyright 2010-2015, Freescale Semiconductor Inc.
      3           * ALL RIGHTS RESERVED.
      4           ***************************************************************************//*!
      5           * @file      ftfa.c
      6           * @version   1.0.5.0
      7           * @date      August-18-2015
      8           * @brief     Flash Memory Module (FTFA) driver source code.
      9           ******************************************************************************/
     10          #include "common.h"
     11          #include "ftfa.h"
     12          
     13          /******************************************************************************
     14           * static function prototypes                                                 *
     15           ******************************************************************************/
     16          #if defined (__ICCARM__)
     17            static __ramfunc void _FTFA_ExecCmd (void);
     18          #elif defined(__GNUC__) || defined(__CC_ARM)
     19            static void _FTFA_ExecCmd (void) __attribute__((long_call, section(".fast")));
     20          #endif
     21          
     22          /******************************************************************************
     23           * static function definitions                                                *
     24           ******************************************************************************/
     25          #if defined (__ICCARM__)

   \                                 In section .textrw, align 4, keep-with-next
     26            static __ramfunc void _FTFA_ExecCmd (void)
     27          #elif defined(__GNUC__) || defined(__CC_ARM)
     28            static void _FTFA_ExecCmd (void)
     29          #endif
     30          {
     31            FTFA_FSTAT = FTFA_FSTAT_CCIF_MASK;
   \                     _FTFA_ExecCmd: (+1)
   \   00000000   0x4803             LDR      R0,??_FTFA_ExecCmd_0  ;; 0x40020000
   \   00000002   0x2180             MOVS     R1,#+128
   \   00000004   0x7001             STRB     R1,[R0, #+0]
     32            while (!(FTFA_FSTAT & FTFA_FSTAT_CCIF_MASK));
   \                     ??_FTFA_ExecCmd_1: (+1)
   \   00000006   0x7802             LDRB     R2,[R0, #+0]
   \   00000008   0x420A             TST      R2,R1
   \   0000000A   0xD0FC             BEQ      ??_FTFA_ExecCmd_1
     33          }
   \   0000000C   0x4770             BX       LR               ;; return
   \   0000000E   0xBF00             Nop      
   \                     ??_FTFA_ExecCmd_0:
   \   00000010   0x40020000         DC32     0x40020000
     34          
     35          /******************************************************************************
     36           * public function definitions                                                *
     37           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     38          int _FTFA_WriteArray (const void *pDst, void *pSrc, int size)
     39          {
   \                     _FTFA_WriteArray: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
     40            register int n = 0;
   \   00000004   0x2400             MOVS     R4,#+0
     41            register uint32 *pUlongDst = (uint32*)pDst;
   \   00000006   0x0005             MOVS     R5,R0
     42            register uint32 *pUlongSrc = (uint32*)pSrc;
   \   00000008   0x9100             STR      R1,[SP, #+0]
   \   0000000A   0x2A01             CMP      R2,#+1
   \   0000000C   0xDB20             BLT      ??_FTFA_WriteArray_0
   \   0000000E   0x0017             MOVS     R7,R2
   \   00000010   0x....             LDR      R6,??DataTable3  ;; 0x40020000
     43          
     44            while ((size-n) > 0) { n+=_FTFA_WriteW32 (pUlongDst++, *(pUlongSrc++)); }
   \                     ??_FTFA_WriteArray_1: (+1)
   \   00000012   0x9800             LDR      R0,[SP, #+0]
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0x7831             LDRB     R1,[R6, #+0]
   \   00000018   0x2270             MOVS     R2,#+112
   \   0000001A   0x4211             TST      R1,R2
   \   0000001C   0xD000             BEQ      ??_FTFA_WriteArray_2
   \   0000001E   0x7032             STRB     R2,[R6, #+0]
   \                     ??_FTFA_WriteArray_2: (+1)
   \   00000020   0x2106             MOVS     R1,#+6
   \   00000022   0x71F1             STRB     R1,[R6, #+7]
   \   00000024   0x0C29             LSRS     R1,R5,#+16
   \   00000026   0x71B1             STRB     R1,[R6, #+6]
   \   00000028   0x0A29             LSRS     R1,R5,#+8
   \   0000002A   0x7171             STRB     R1,[R6, #+5]
   \   0000002C   0x7135             STRB     R5,[R6, #+4]
   \   0000002E   0x0E01             LSRS     R1,R0,#+24
   \   00000030   0x72F1             STRB     R1,[R6, #+11]
   \   00000032   0x0C01             LSRS     R1,R0,#+16
   \   00000034   0x72B1             STRB     R1,[R6, #+10]
   \   00000036   0x0A01             LSRS     R1,R0,#+8
   \   00000038   0x7271             STRB     R1,[R6, #+9]
   \   0000003A   0x7230             STRB     R0,[R6, #+8]
   \   0000003C   0x.... 0x....      BL       _FTFA_ExecCmd
   \   00000040   0x9800             LDR      R0,[SP, #+0]
   \   00000042   0x1D00             ADDS     R0,R0,#+4
   \   00000044   0x9000             STR      R0,[SP, #+0]
   \   00000046   0x1D2D             ADDS     R5,R5,#+4
   \   00000048   0x1D24             ADDS     R4,R4,#+4
   \   0000004A   0x1F3F             SUBS     R7,R7,#+4
   \   0000004C   0x2F01             CMP      R7,#+1
   \   0000004E   0xDAE0             BGE      ??_FTFA_WriteArray_1
     45          
     46            return n;
   \                     ??_FTFA_WriteArray_0: (+1)
   \   00000050   0x0020             MOVS     R0,R4
   \   00000052   0xB001             ADD      SP,SP,#+4
   \   00000054   0xBDF0             POP      {R4-R7,PC}       ;; return
     47          }
     48          

   \                                 In section .text, align 2, keep-with-next
     49          int _FTFA_ReadArray (void *pSrc, void *pDst, int size)
     50          {
   \                     _FTFA_ReadArray: (+1)
   \   00000000   0xB410             PUSH     {R4}
     51            register uint8 *src = (uint8*)pSrc;
     52            register uint8 *dst = (uint8*)pDst;
     53            register int n = size;
   \   00000002   0x2A00             CMP      R2,#+0
   \   00000004   0xD006             BEQ      ??_FTFA_ReadArray_0
   \   00000006   0x0013             MOVS     R3,R2
     54          
     55            while (n--) { *dst++ = *src++; }
   \                     ??_FTFA_ReadArray_1: (+1)
   \   00000008   0x7804             LDRB     R4,[R0, #+0]
   \   0000000A   0x700C             STRB     R4,[R1, #+0]
   \   0000000C   0x1C40             ADDS     R0,R0,#+1
   \   0000000E   0x1C49             ADDS     R1,R1,#+1
   \   00000010   0x1E5B             SUBS     R3,R3,#+1
   \   00000012   0xD1F9             BNE      ??_FTFA_ReadArray_1
     56          
     57            return size;
   \                     ??_FTFA_ReadArray_0: (+1)
   \   00000014   0x0010             MOVS     R0,R2
   \   00000016   0xBC10             POP      {R4}
   \   00000018   0x4770             BX       LR               ;; return
     58          }
     59          

   \                                 In section .text, align 2, keep-with-next
     60          int _FTFA_WriteW32 (const uint32 *pDst, uint32 val)
     61          {
   \                     _FTFA_WriteW32: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     62            if (FTFA_FSTAT &
     63               (FTFA_FSTAT_FPVIOL_MASK|FTFA_FSTAT_ACCERR_MASK|FTFA_FSTAT_RDCOLERR_MASK))
   \   00000002   0x2370             MOVS     R3,#+112
   \   00000004   0x....             LDR      R2,??DataTable3  ;; 0x40020000
   \   00000006   0x7814             LDRB     R4,[R2, #+0]
   \   00000008   0x421C             TST      R4,R3
   \   0000000A   0xD000             BEQ      ??_FTFA_WriteW32_0
     64            {
     65              FTFA_FSTAT = FTFA_FSTAT_FPVIOL_MASK|FTFA_FSTAT_ACCERR_MASK|FTFA_FSTAT_RDCOLERR_MASK;
   \   0000000C   0x7013             STRB     R3,[R2, #+0]
     66            }
     67            FTFA_FCCOB0 = 0x06;
   \                     ??_FTFA_WriteW32_0: (+1)
   \   0000000E   0x2306             MOVS     R3,#+6
   \   00000010   0x71D3             STRB     R3,[R2, #+7]
     68            FTFA_FCCOB1 = (uint8)((uint32)pDst>> 16);
   \   00000012   0x0C03             LSRS     R3,R0,#+16
   \   00000014   0x7193             STRB     R3,[R2, #+6]
     69            FTFA_FCCOB2 = (uint8)((uint32)pDst>>  8);
   \   00000016   0x0A03             LSRS     R3,R0,#+8
   \   00000018   0x7153             STRB     R3,[R2, #+5]
     70            FTFA_FCCOB3 = (uint8)((uint32)pDst>>  0);
   \   0000001A   0x7110             STRB     R0,[R2, #+4]
     71            FTFA_FCCOB4 = (uint8)(val >> 24);
   \   0000001C   0x0E08             LSRS     R0,R1,#+24
   \   0000001E   0x72D0             STRB     R0,[R2, #+11]
     72            FTFA_FCCOB5 = (uint8)(val >> 16);
   \   00000020   0x0C08             LSRS     R0,R1,#+16
   \   00000022   0x7290             STRB     R0,[R2, #+10]
     73            FTFA_FCCOB6 = (uint8)(val >>  8);
   \   00000024   0x0A08             LSRS     R0,R1,#+8
   \   00000026   0x7250             STRB     R0,[R2, #+9]
     74            FTFA_FCCOB7 = (uint8)(val >>  0);
   \   00000028   0x7211             STRB     R1,[R2, #+8]
     75            _FTFA_ExecCmd ();
   \   0000002A   0x.... 0x....      BL       _FTFA_ExecCmd
     76          
     77            return sizeof(uint32);
   \   0000002E   0x2004             MOVS     R0,#+4
   \   00000030   0xBD10             POP      {R4,PC}          ;; return
     78          }
     79          

   \                                 In section .text, align 2, keep-with-next
     80          void _FTFA_EraseSector (const void *pDst)
     81          {
   \                     _FTFA_EraseSector: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
     82            if (FTFA_FSTAT &
     83               (FTFA_FSTAT_FPVIOL_MASK|FTFA_FSTAT_ACCERR_MASK|FTFA_FSTAT_RDCOLERR_MASK))
   \   00000004   0x2170             MOVS     R1,#+112
   \   00000006   0x....             LDR      R2,??DataTable3  ;; 0x40020000
   \   00000008   0x7813             LDRB     R3,[R2, #+0]
   \   0000000A   0x420B             TST      R3,R1
   \   0000000C   0xD000             BEQ      ??_FTFA_EraseSector_0
     84            {
     85              FTFA_FSTAT = FTFA_FSTAT_FPVIOL_MASK|FTFA_FSTAT_ACCERR_MASK|FTFA_FSTAT_RDCOLERR_MASK;
   \   0000000E   0x7011             STRB     R1,[R2, #+0]
     86            }
     87            FTFA_FCCOB0 = 0x09;
   \                     ??_FTFA_EraseSector_0: (+1)
   \   00000010   0x2109             MOVS     R1,#+9
   \   00000012   0x71D1             STRB     R1,[R2, #+7]
     88            FTFA_FCCOB1 = (uint8)((uint32)pDst>> 16);
   \   00000014   0x0C01             LSRS     R1,R0,#+16
   \   00000016   0x7191             STRB     R1,[R2, #+6]
     89            FTFA_FCCOB2 = (uint8)((uint32)pDst>>  8);
   \   00000018   0x0A01             LSRS     R1,R0,#+8
   \   0000001A   0x7151             STRB     R1,[R2, #+5]
     90            FTFA_FCCOB3 = (uint8)((uint32)pDst>>  0);
   \   0000001C   0x7110             STRB     R0,[R2, #+4]
     91            _FTFA_ExecCmd ();
   \   0000001E   0x.... 0x....      BL       _FTFA_ExecCmd
     92          }
   \   00000022   0xB001             ADD      SP,SP,#+4
   \   00000024   0xBD00             POP      {PC}             ;; return
     93          

   \                                 In section .text, align 2, keep-with-next
     94          uint32 _FTFA_ReadIFR (uint8 addr)
     95          {
   \                     _FTFA_ReadIFR: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     96            if (FTFA_FSTAT &
     97               (FTFA_FSTAT_FPVIOL_MASK|FTFA_FSTAT_ACCERR_MASK|FTFA_FSTAT_RDCOLERR_MASK))
   \   00000002   0x2170             MOVS     R1,#+112
   \   00000004   0x....             LDR      R4,??DataTable3  ;; 0x40020000
   \   00000006   0x7822             LDRB     R2,[R4, #+0]
   \   00000008   0x420A             TST      R2,R1
   \   0000000A   0xD000             BEQ      ??_FTFA_ReadIFR_0
     98            {
     99              FTFA_FSTAT = FTFA_FSTAT_FPVIOL_MASK|FTFA_FSTAT_ACCERR_MASK|FTFA_FSTAT_RDCOLERR_MASK;
   \   0000000C   0x7021             STRB     R1,[R4, #+0]
    100            }
    101            FTFA_FCCOB0 = 0x03;
   \                     ??_FTFA_ReadIFR_0: (+1)
   \   0000000E   0x2103             MOVS     R1,#+3
   \   00000010   0x71E1             STRB     R1,[R4, #+7]
    102            FTFA_FCCOB1 = 0x00;
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x71A1             STRB     R1,[R4, #+6]
    103            FTFA_FCCOB2 = 0x00;
   \   00000016   0x7161             STRB     R1,[R4, #+5]
    104            FTFA_FCCOB3 = (addr&(~0x03)); /* force longword alignment of the address    */
   \   00000018   0x22FC             MOVS     R2,#+252
   \   0000001A   0x4002             ANDS     R2,R2,R0
   \   0000001C   0x7122             STRB     R2,[R4, #+4]
    105            FTFA_FCCOB8 = 0x00;
   \   0000001E   0x73E1             STRB     R1,[R4, #+15]
    106            _FTFA_ExecCmd ();
   \   00000020   0x.... 0x....      BL       _FTFA_ExecCmd
    107          
    108            return *((uint32*)&FTFA_FCCOB7);
   \   00000024   0x68A0             LDR      R0,[R4, #+8]
   \   00000026   0xBD10             POP      {R4,PC}          ;; return
    109          }
    110          
    111          /******************************************************************************
    112           * interrupt function definitions                                             *
    113           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    114          weak void ftfa_isr (void) { for (;;) {} }
   \                     ftfa_isr: (+1)
   \                     ??ftfa_isr_0: (+1)
   \   00000000   0xE7FE             B        ??ftfa_isr_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x40020000         DC32     0x40020000
    115          /******************************************************************************
    116           * End of module                                                              *
    117           ******************************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   _FTFA_EraseSector
         8   -> _FTFA_ExecCmd
       0   _FTFA_ExecCmd
       4   _FTFA_ReadArray
       8   _FTFA_ReadIFR
         8   -> _FTFA_ExecCmd
      24   _FTFA_WriteArray
        24   -> _FTFA_ExecCmd
       8   _FTFA_WriteW32
         8   -> _FTFA_ExecCmd
       0   ftfa_isr


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
      38  _FTFA_EraseSector
      20  _FTFA_ExecCmd
      26  _FTFA_ReadArray
      40  _FTFA_ReadIFR
      86  _FTFA_WriteArray
      50  _FTFA_WriteW32
       2  ftfa_isr

 
 246 bytes in section .text
  20 bytes in section .textrw
 
 266 bytes of CODE memory

Errors: none
Warnings: none
