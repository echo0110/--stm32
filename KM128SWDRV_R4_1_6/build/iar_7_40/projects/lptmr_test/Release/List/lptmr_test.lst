###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        21/Apr/2017  16:30:47
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Freescale\KM128SWDRV_R4_1_6\src\projects\lptmr_test\lptmr_test.c
#    Command line =  
#        C:\Freescale\KM128SWDRV_R4_1_6\src\projects\lptmr_test\lptmr_test.c
#        --no_size_constraints -D NDEBUG -lCN
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\lptmr_test\Release\List\
#        -o
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\lptmr_test\Release\Obj\
#        --no_unroll --debug --endian=little --cpu=Cortex-M0+ --no_mem_idioms
#        -e --fpu=None --dlib_config
#        D:\IAR7.4anzhuang\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\lptmr_test\..\..\..\..\src\common\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\lptmr_test\..\..\..\..\src\drivers\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\lptmr_test\..\..\..\..\src\freemaster\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\lptmr_test\..\..\..\..\src\projects\lptmr_test\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\lptmr_test\..\..\..\..\src\toolchain\iar\
#        -Ohs --require_prototypes
#    List file    =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\lptmr_test\Release\List\lptmr_test.lst
#    Object file  =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\lptmr_test\Release\Obj\lptmr_test.o
#
###############################################################################

C:\Freescale\KM128SWDRV_R4_1_6\src\projects\lptmr_test\lptmr_test.c
      1          /******************************************************************************
      2           * (c) Copyright 2010-2015, Freescale Semiconductor Inc.
      3           * ALL RIGHTS RESERVED.
      4           ******************************************************************************
      5           * lptmr_test.c
      6           ******************************************************************************/
      7          #include "drivers.h"

   \                                 In section .bss, align 4
      8          int t=0;
   \                     t:
   \   00000000                      DS8 4

   \                                 In section .bss, align 2
      9          static volatile uint16 counter;
   \                     counter:
   \   00000000                      DS8 2
     10          /* PIT callback declarations                                                  */
     11          void pit_callback (PIT_CALLBACK_TYPE type);
     12          

   \                                 In section .text, align 4, keep-with-next
     13          void main (void)
     14          {
   \                     main: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     15            /* enable clocks to all on chip peripherals                                 */
     16            SIM_Init(SIM_MODULE_ALL_PERIPH_ON_CONFIG);
   \   00000002   0x....             LDR      R1,??DataTable3  ;; 0x4003e000
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x6008             STR      R0,[R1, #+0]
   \   00000008   0x2204             MOVS     R2,#+4
   \   0000000A   0x604A             STR      R2,[R1, #+4]
   \   0000000C   0x....             LDR      R1,??DataTable3_1  ;; 0x4003f004
   \   0000000E   0x2401             MOVS     R4,#+1
   \   00000010   0x600C             STR      R4,[R1, #+0]
   \   00000012   0x....             LDR      R2,??DataTable3_2  ;; 0x786cbdf2
   \   00000014   0x630A             STR      R2,[R1, #+48]
   \   00000016   0x....             LDR      R2,??DataTable3_3  ;; 0x7ab7fc8
   \   00000018   0x634A             STR      R2,[R1, #+52]
   \   0000001A   0x....             LDR      R2,??DataTable3_4  ;; 0xd0116a1f
   \   0000001C   0x638A             STR      R2,[R1, #+56]
   \   0000001E   0x2203             MOVS     R2,#+3
   \   00000020   0x63CA             STR      R2,[R1, #+60]
   \   00000022   0x06E2             LSLS     R2,R4,#+27
   \   00000024   0x640A             STR      R2,[R1, #+64]
   \   00000026   0x6488             STR      R0,[R1, #+72]
   \   00000028   0x6688             STR      R0,[R1, #+104]
     17          
     18            /* initialize LPTMR in freerun Timer mode                                   */
     19            LPTMR_Init(LPTMR_MODULE_TMR_FREERUN_MODE_CONFIG(0,LPTMR_LPOCLK),0);
   \   0000002A   0x2200             MOVS     R2,#+0
   \   0000002C   0x....             ADR.N    R0,?_0
   \   0000002E   0xC803             LDM      R0,{R0,R1}
   \   00000030   0x.... 0x....      BL       LPTMR_Init
     20            LPTMR_Enable();
   \   00000034   0x....             LDR      R0,??DataTable3_5  ;; 0x4803c000
   \   00000036   0x6004             STR      R4,[R0, #+0]
     21            PIT_InstallCallback (PRI_LVL1,pit_callback);
   \   00000038   0x....             LDR      R1,??DataTable3_6
   \   0000003A   0x2001             MOVS     R0,#+1
   \   0000003C   0x.... 0x....      BL       PIT_InstallCallback
     22            PIT_Init(PIT0, CH0, PIT_CH_TMR_EN_CONFIG,25000);//1ms
   \   00000040   0x....             LDR      R1,??DataTable3_7  ;; 0x61a8
   \   00000042   0xBF00             Nop      
   \   00000044   0x....             ADR.N    R0,?_1
   \   00000046   0x6800             LDR      R0,[R0, #+0]
   \   00000048   0x.... 0x....      BL       PIT0_CH0_Init
     23           // LPTMR_CNR=100;
     24            EnableInterrupts();//是不是引脚接的不对
   \   0000004C   0xB662             CPSIE i
     25            while (1)
   \                     ??main_0: (+1)
   \   0000004E   0xE7FE             B        ??main_0
     26            {
     27              //counter = LPTMR_CNR;//LPTMR_ReadCnt();
     28              //LPTMR_CNR=0;
     29              //LPTMR_BASE_PTR->CSR&=~(1<<0);//清计数器复位
     30              
     31            }
     32          }
     33          /* PIT callback definition                                                    */

   \                                 In section .text, align 2, keep-with-next
     34          void pit_callback (PIT_CALLBACK_TYPE type)
     35          {
     36            
     37              counter = LPTMR_ReadCnt();//读之前要先写
   \                     pit_callback: (+1)
   \   00000000   0x....             LDR      R0,??DataTable3_8  ;; 0x4003c000
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x60C1             STR      R1,[R0, #+12]
   \   00000006   0x68C1             LDR      R1,[R0, #+12]
   \   00000008   0x....             LDR      R2,??DataTable3_9
   \   0000000A   0x8011             STRH     R1,[R2, #+0]
     38              LPTMR_BASE_PTR->CSR&=~LPTMR_CSR_TEN_MASK;//清计数器复位
   \   0000000C   0x6801             LDR      R1,[R0, #+0]
   \   0000000E   0x2201             MOVS     R2,#+1
   \   00000010   0x4391             BICS     R1,R1,R2
   \   00000012   0x6001             STR      R1,[R0, #+0]
     39              LPTMR_BASE_PTR->CSR|=LPTMR_CSR_TEN_MASK;
   \   00000014   0x6801             LDR      R1,[R0, #+0]
   \   00000016   0x430A             ORRS     R2,R2,R1
   \   00000018   0x6002             STR      R2,[R0, #+0]
     40              
     41          //  if (type == PIT0CH0_CALLBACK)
     42          //  { 
     43          //    if(t<20)
     44          //    {
     45          //   counter = LPTMR_ReadCnt();
     46          //   //LPTMR_CNR=0;
     47          //    t++;
     48          //    }
     49          //    if(t==20)
     50          //    {
     51          //     t=0;
     52          //     
     53          //    }
     54          //  }
     55          }
   \   0000001A   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x4003E000         DC32     0x4003e000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x4003F004         DC32     0x4003f004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x786CBDF2         DC32     0x786cbdf2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x07AB7FC8         DC32     0x7ab7fc8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0xD0116A1F         DC32     0xd0116a1f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x4803C000         DC32     0x4803c000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x........         DC32     pit_callback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x000061A8         DC32     0x61a8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x4003C000         DC32     0x4003c000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \   00000000   0x........         DC32     counter

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x00000046         DC32 70, 1
   \              0x00000001   

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x00000003         DC32 3

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   main
         8   -> LPTMR_Init
         8   -> PIT0_CH0_Init
         8   -> PIT_InstallCallback
       0   pit_callback


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
       8  ?_0
       4  ?_1
       2  counter
      80  main
      28  pit_callback
       4  t

 
   6 bytes in section .bss
 160 bytes in section .text
 
 160 bytes of CODE memory
   6 bytes of DATA memory

Errors: none
Warnings: none
