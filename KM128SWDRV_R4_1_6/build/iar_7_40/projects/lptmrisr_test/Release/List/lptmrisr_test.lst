###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        20/Apr/2017  19:57:54
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Freescale\KM128SWDRV_R4_1_6\src\projects\lptmrisr_test\lptmrisr_test.c
#    Command line =  
#        C:\Freescale\KM128SWDRV_R4_1_6\src\projects\lptmrisr_test\lptmrisr_test.c
#        --no_size_constraints -D NDEBUG -lCN
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\lptmrisr_test\Release\List\
#        -o
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\lptmrisr_test\Release\Obj\
#        --no_unroll --debug --endian=little --cpu=Cortex-M0+ --no_mem_idioms
#        -e --fpu=None --dlib_config
#        D:\IAR7.4anzhuang\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\lptmrisr_test\..\..\..\..\src\common\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\lptmrisr_test\..\..\..\..\src\drivers\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\lptmrisr_test\..\..\..\..\src\freemaster\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\lptmrisr_test\..\..\..\..\src\projects\lptmrisr_test\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\lptmrisr_test\..\..\..\..\src\toolchain\iar\
#        -Ohs --require_prototypes
#    List file    =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\lptmrisr_test\Release\List\lptmrisr_test.lst
#    Object file  =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\lptmrisr_test\Release\Obj\lptmrisr_test.o
#
###############################################################################

C:\Freescale\KM128SWDRV_R4_1_6\src\projects\lptmrisr_test\lptmrisr_test.c
      1          /******************************************************************************
      2           * (c) Copyright 2010-2015, Freescale Semiconductor Inc.
      3           * ALL RIGHTS RESERVED.
      4           ******************************************************************************
      5           * lptmrisr_test.c
      6           ******************************************************************************/
      7          #include "drivers.h"
      8          
      9          /* LPTMR callback function declaration                                        */
     10          static void lptmr_callback (void);
     11          
     12          /* static data definition                                                     */

   \                                 In section .bss, align 2
     13          static volatile uint16 counter;
   \                     counter:
   \   00000000                      DS8 2
     14          

   \                                 In section .text, align 4, keep-with-next
     15          void main (void)
     16          {
   \                     main: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
     17            /* core, bus and flash clock = 1000 KHz                                     */
     18            SIM_SetClkMode (SYSCLK_MODE0);
   \   00000004   0x2500             MOVS     R5,#+0
   \   00000006   0x....             LDR      R0,??DataTable5  ;; 0x5d83f044
   \   00000008   0x6005             STR      R5,[R0, #+0]
     19            SIM_SetClkDiv  (SYSCLK_DIV2);
   \   0000000A   0x2080             MOVS     R0,#+128
   \   0000000C   0x0540             LSLS     R0,R0,#+21       ;; #+268435456
   \   0000000E   0x....             LDR      R1,??DataTable5_1  ;; 0x5e1bf044
   \   00000010   0x6008             STR      R0,[R1, #+0]
     20          
     21            /* enable clock to LPTMR on-chip peripheral                                 */
     22            SIM_EnableModule (LPTMR);
   \   00000012   0x....             LDR      R1,??DataTable5_2  ;; 0x4803f03c
   \   00000014   0x6008             STR      R0,[R1, #+0]
     23          
     24            /* enable low voltage reset detection (1.6V), disable interrupts and bandgap*/
     25            PMC_Init (PMC_MODULE_LVDRE_ON_LVDINT_OFF_LVWINT_OFF_CONFIG(PMC_LVDL,PMC_LVW1),
     26                      PMC_INTREG_BGEN_OFF_BGBE_OFF_CONFIG, PRI_LVL0, (PMC_CALLBACK)NULL);
   \   00000016   0x2300             MOVS     R3,#+0
   \   00000018   0x2200             MOVS     R2,#+0
   \   0000001A   0xBF00             Nop      
   \   0000001C   0x....             ADR.N    R0,?_1
   \   0000001E   0x6801             LDR      R1,[R0, #+0]
   \   00000020   0x....             ADR.N    R0,?_0
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0x.... 0x....      BL       PMC_Init
     27          
     28            /* enable transitions for VLPR and VLPS mode                                */
     29            SMC_Init (SMC_MODULE_VLPS_ON_VLLS_OFF_CONFIG);
   \   00000028   0x....             ADR.N    R0,?_2
   \   0000002A   0x6800             LDR      R0,[R0, #+0]
   \   0000002C   0x9000             STR      R0,[SP, #+0]
   \   0000002E   0x4668             MOV      R0,SP
   \   00000030   0x7800             LDRB     R0,[R0, #+0]
   \   00000032   0x....             LDR      R1,??DataTable5_3  ;; 0x4007e000
   \   00000034   0x7008             STRB     R0,[R1, #+0]
   \   00000036   0x2180             MOVS     R1,#+128
   \   00000038   0x2702             MOVS     R7,#+2
   \   0000003A   0x....             LDR      R0,??DataTable5_4  ;; 0x40050012
   \   0000003C   0xE000             B        ??main_0
     30            OSC32K_Disable ();      /* disable OSC32K oscillator                        */
   \                     ??main_1: (+1)
   \   0000003E   0x7001             STRB     R1,[R0, #+0]
   \                     ??main_0: (+1)
   \   00000040   0x8802             LDRH     R2,[R0, #+0]
   \   00000042   0x423A             TST      R2,R7
   \   00000044   0xD0FB             BEQ      ??main_1
   \                     ??main_2: (+1)
   \   00000046   0x2440             MOVS     R4,#+64
   \   00000048   0x8801             LDRH     R1,[R0, #+0]
   \   0000004A   0x4239             TST      R1,R7
   \   0000004C   0xD006             BEQ      ??main_3
   \   0000004E   0x7005             STRB     R5,[R0, #+0]
   \   00000050   0x7004             STRB     R4,[R0, #+0]
   \   00000052   0x21C0             MOVS     R1,#+192
   \   00000054   0x7001             STRB     R1,[R0, #+0]
   \   00000056   0x2180             MOVS     R1,#+128
   \   00000058   0x7001             STRB     R1,[R0, #+0]
   \   0000005A   0xE7F4             B        ??main_2
   \                     ??main_3: (+1)
   \   0000005C   0x7B81             LDRB     R1,[R0, #+14]
   \   0000005E   0x2201             MOVS     R2,#+1
   \   00000060   0x430A             ORRS     R2,R2,R1
   \   00000062   0x7382             STRB     R2,[R0, #+14]
   \   00000064   0x....             LDR      R0,??DataTable5_5  ;; 0x528fe001
   \   00000066   0x7004             STRB     R4,[R0, #+0]
   \   00000068   0x....             LDR      R6,??DataTable5_6  ;; 0x4007d002
   \   0000006A   0x2504             MOVS     R5,#+4
   \   0000006C   0x2104             MOVS     R1,#+4
     31            SMC_SetMode(VLPR);      /* enter VLPR mode to minimize current consumption  */
   \                     ??main_4: (+1)
   \   0000006E   0x7830             LDRB     R0,[R6, #+0]
   \   00000070   0x4208             TST      R0,R1
   \   00000072   0xD1FC             BNE      ??main_4
     32          
     33            /* initialize LPTMR in counter reset mode                                   */
     34            LPTMR_Init(LPTMR_MODULE_TMR_CNT_RST_ONTCF_MODE_CONFIG(0,LPTMR_LPOCLK),3999);
   \   00000074   0x....             LDR      R2,??DataTable5_7  ;; 0xf9f
   \   00000076   0xBF00             Nop      
   \   00000078   0x....             ADR.N    R0,?_3
   \   0000007A   0xC803             LDM      R0,{R0,R1}
   \   0000007C   0x.... 0x....      BL       LPTMR_Init
     35            LPTMR_InstallCallback (PRI_LVL1, lptmr_callback);
   \   00000080   0x....             LDR      R1,??DataTable5_8
   \   00000082   0x2001             MOVS     R0,#+1
   \   00000084   0x.... 0x....      BL       LPTMR_InstallCallback
     36            EnableInterrupts();     /* enable interrupts on global level                */
   \   00000088   0xB662             CPSIE i
     37            LPTMR_Enable();         /* enable LPTMR (8000ms interrupt)                  */
   \   0000008A   0x2001             MOVS     R0,#+1
   \   0000008C   0x....             LDR      R1,??DataTable5_9  ;; 0x4803c000
   \   0000008E   0x6008             STR      R0,[R1, #+0]
   \   00000090   0x2004             MOVS     R0,#+4
   \   00000092   0x43C0             MVNS     R0,R0            ;; #-5
   \   00000094   0x....             LDR      R1,??DataTable5_10  ;; 0xe000ed10
     38          
     39            while (1)
     40            {
     41              SMC_SetMode(VLPW);    /* keep staying in VLPW mode; IDD+IDDA+IBAT=130.0uA */
   \                     ??main_5: (+1)
   \   00000096   0x....             LDR      R2,??DataTable5_5  ;; 0x528fe001
   \   00000098   0x7014             STRB     R4,[R2, #+0]
   \                     ??main_6: (+1)
   \   0000009A   0x7833             LDRB     R3,[R6, #+0]
   \   0000009C   0x422B             TST      R3,R5
   \   0000009E   0xD1FC             BNE      ??main_6
   \   000000A0   0x680A             LDR      R2,[R1, #+0]
   \   000000A2   0x4002             ANDS     R2,R2,R0
   \   000000A4   0x600A             STR      R2,[R1, #+0]
   \   000000A6   0xBF30             WFI
     42              SMC_SetMode(VLPS);    /* keep staying in VLPS mode; IDD+IDDA+IBAT=4.5uA   */
   \   000000A8   0x....             LDR      R2,??DataTable5_11  ;; 0x5017e001
   \   000000AA   0x7017             STRB     R7,[R2, #+0]
   \   000000AC   0x680A             LDR      R2,[R1, #+0]
   \   000000AE   0x432A             ORRS     R2,R2,R5
   \   000000B0   0x600A             STR      R2,[R1, #+0]
   \   000000B2   0xBF30             WFI
   \   000000B4   0xE7EF             B        ??main_5
     43            }
     44          }
     45          
     46          /* LPTMR interrupt - called every 8000 ms                                     */

   \                                 In section .text, align 2, keep-with-next
     47          static void lptmr_callback (void)
     48          {
   \                     lptmr_callback: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
     49              counter++;            /* increment variable; IDD+IDDA+IBAT=177uA          */
   \   00000004   0x....             LDR      R0,??DataTable5_12
   \   00000006   0x8801             LDRH     R1,[R0, #+0]
   \   00000008   0x1C49             ADDS     R1,R1,#+1
   \   0000000A   0x8001             STRH     R1,[R0, #+0]
     50              arch_delay(4000000);  /* wait for 4000 ms                                 */
   \   0000000C   0x....             LDR      R0,??DataTable5_13  ;; 0x3d0900
   \   0000000E   0x.... 0x....      BL       arch_delay
     51          }
   \   00000012   0xB001             ADD      SP,SP,#+4
   \   00000014   0xBD00             POP      {PC}             ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x5D83F044         DC32     0x5d83f044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x5E1BF044         DC32     0x5e1bf044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x4803F03C         DC32     0x4803f03c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x4007E000         DC32     0x4007e000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x40050012         DC32     0x40050012

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x528FE001         DC32     0x528fe001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x4007D002         DC32     0x4007d002

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x00000F9F         DC32     0xf9f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0x........         DC32     lptmr_callback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   0x4803C000         DC32     0x4803c000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_10:
   \   00000000   0xE000ED10         DC32     0xe000ed10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_11:
   \   00000000   0x5017E001         DC32     0x5017e001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_12:
   \   00000000   0x........         DC32     counter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_13:
   \   00000000   0x003D0900         DC32     0x3d0900

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x50 0x40          DC8 80, 64, 0, 0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x20 0x00          DC8 32, 0, 0, 0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x00000040         DC32 64, 1
   \              0x00000001   

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   lptmr_callback
         8   -> arch_delay
      24   main
        24   -> LPTMR_Init
        24   -> LPTMR_InstallCallback
        24   -> PMC_Init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_11
       4  ??DataTable5_12
       4  ??DataTable5_13
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
       4  ?_0
       4  ?_1
       4  ?_2
       8  ?_3
       2  counter
      22  lptmr_callback
     182  main

 
   2 bytes in section .bss
 280 bytes in section .text
 
 280 bytes of CODE memory
   2 bytes of DATA memory

Errors: none
Warnings: none
