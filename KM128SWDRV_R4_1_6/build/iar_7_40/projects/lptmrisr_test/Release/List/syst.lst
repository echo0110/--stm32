###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        19/Apr/2017  10:43:06
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\syst\syst.c
#    Command line =  
#        C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\syst\syst.c
#        --no_size_constraints -D NDEBUG -lCN
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\lptmrisr_test\Release\List\
#        -o
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\lptmrisr_test\Release\Obj\
#        --no_unroll --debug --endian=little --cpu=Cortex-M0+ --no_mem_idioms
#        -e --fpu=None --dlib_config
#        D:\IAR7.4anzhuang\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\lptmrisr_test\..\..\..\..\src\common\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\lptmrisr_test\..\..\..\..\src\drivers\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\lptmrisr_test\..\..\..\..\src\freemaster\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\lptmrisr_test\..\..\..\..\src\projects\lptmrisr_test\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\lptmrisr_test\..\..\..\..\src\toolchain\iar\
#        -Ohs --require_prototypes
#    List file    =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\lptmrisr_test\Release\List\syst.lst
#    Object file  =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\lptmrisr_test\Release\Obj\syst.o
#
###############################################################################

C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\syst\syst.c
      1          /******************************************************************************
      2           * (c) Copyright 2010-2015, Freescale Semiconductor Inc.
      3           * ALL RIGHTS RESERVED.
      4           ***************************************************************************//*!
      5           * @file      syst.c
      6           * @version   1.0.1.0
      7           * @date      May-14-2012
      8           * @brief     System Timer (SYST) driver source code.
      9           ******************************************************************************/
     10          #include "common.h"
     11          #include "syst.h"
     12          
     13          /******************************************************************************
     14           * data type definitions                                                      *
     15           ******************************************************************************/

   \                                 In section .bss, align 4
     16          static SYST_CALLBACK pCallbackSYST;
   \                     pCallbackSYST:
   \   00000000                      DS8 4
     17          
     18          /******************************************************************************
     19           * public function definitions                                                *
     20           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     21          void SYST_Init (tSYST syst, uint8 ip, SYST_CALLBACK pCallback)
     22          {
   \                     SYST_Init: (+1)
   \   00000000   0xB410             PUSH     {R4}
     23            if (pCallback)
   \   00000002   0x001C             MOVS     R4,R3
   \   00000004   0xD00A             BEQ      ??SYST_Init_0
     24            {
     25              syst.CSR |= SysTick_CSR_TICKINT_MASK; /* enables system Timer exception   */
   \   00000006   0x2402             MOVS     R4,#+2
   \   00000008   0x4304             ORRS     R4,R4,R0
   \   0000000A   0x0020             MOVS     R0,R4
     26              pCallbackSYST = pCallback;
   \   0000000C   0x....             LDR      R4,??DataTable1
   \   0000000E   0x6023             STR      R3,[R4, #+0]
     27              FAULT_SetIsr (INT_SysTick,ip);
   \   00000010   0x....             LDR      R3,??DataTable1_1  ;; 0xe000ed20
   \   00000012   0x681C             LDR      R4,[R3, #+0]
   \   00000014   0xB2D2             UXTB     R2,R2
   \   00000016   0x0792             LSLS     R2,R2,#+30
   \   00000018   0x4322             ORRS     R2,R2,R4
   \   0000001A   0x601A             STR      R2,[R3, #+0]
     28            }
     29            SYST_RVR = syst.RVR;
   \                     ??SYST_Init_0: (+1)
   \   0000001C   0x....             LDR      R2,??DataTable1_2  ;; 0xe000e010
   \   0000001E   0x6051             STR      R1,[R2, #+4]
     30            SYST_CVR = 0l;
   \   00000020   0x2300             MOVS     R3,#+0
   \   00000022   0x6093             STR      R3,[R2, #+8]
     31            SYST_CSR = syst.CSR;
   \   00000024   0x6010             STR      R0,[R2, #+0]
     32          }
   \   00000026   0xBC10             POP      {R4}
   \   00000028   0x4770             BX       LR               ;; return
     33          
     34          /******************************************************************************
     35           * interrupt function definitions                                             *
     36           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     37          weak void syst_isr (void) { pCallbackSYST (); }
   \                     syst_isr: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
   \   00000004   0x....             LDR      R0,??DataTable1
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x4780             BLX      R0
   \   0000000A   0xB001             ADD      SP,SP,#+4
   \   0000000C   0xBD00             POP      {PC}             ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     pCallbackSYST

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0xE000ED20         DC32     0xe000ed20

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0xE000E010         DC32     0xe000e010
     38          /******************************************************************************
     39           * End of module                                                              *
     40           ******************************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       4   SYST_Init
       8   syst_isr
         8   -- Indirect call


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
      42  SYST_Init
       4  pCallbackSYST
      14  syst_isr

 
  4 bytes in section .bss
 68 bytes in section .text
 
 68 bytes of CODE memory
  4 bytes of DATA memory

Errors: none
Warnings: none
