###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        06/Feb/2017  13:08:31
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\fll\fll.c
#    Command line =  
#        C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\fll\fll.c
#        --no_size_constraints -D NDEBUG -lCN
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\osc_test\Release\List\
#        -o
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\osc_test\Release\Obj\
#        --no_unroll --debug --endian=little --cpu=Cortex-M0+ --no_mem_idioms
#        -e --fpu=None --dlib_config
#        D:\IAR7.4anzhuang\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\osc_test\..\..\..\..\src\common\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\osc_test\..\..\..\..\src\drivers\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\osc_test\..\..\..\..\src\freemaster\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\osc_test\..\..\..\..\src\projects\osc_test\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\osc_test\..\..\..\..\src\toolchain\iar\
#        -Ohs --require_prototypes
#    List file    =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\osc_test\Release\List\fll.lst
#    Object file  =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\osc_test\Release\Obj\fll.o
#
###############################################################################

C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\fll\fll.c
      1          /******************************************************************************
      2           * (c) Copyright 2010-2015, Freescale Semiconductor Inc.
      3           * ALL RIGHTS RESERVED.
      4           ***************************************************************************//*!
      5           * @file      fll.c
      6           * @version   1.0.2.0
      7           * @date      May-14-2012
      8           * @brief     Frequency-Locked Loop (FLL) driver source code.
      9           ******************************************************************************/
     10          #include "common.h"
     11          #include "fll.h"
     12          
     13          /******************************************************************************
     14           * macro definitions                                                          *
     15           ******************************************************************************/
     16          #define WAIT_FOR_FLAG(reg,name1,name2)                                        \
     17          {   /*MCG_S=0x16; MCG_C1=0x83;   */                                                                      \
     18            while (((MCG_S&MCG_S_##name2##_MASK)>>MCG_S_##name2##_SHIFT)!=              \
     19                  ((reg&reg##_##name1##_MASK)>>reg##_##name1##_SHIFT));                 \
     20          }
     21          
     22          /******************************************************************************
     23           * public function definitions                                                *
     24           ******************************************************************************/
     25          #if defined(__ICCARM__)
     26            #pragma diag_suppress=Pa082
     27            #pragma diag_suppress=Pg004
     28          #endif

   \                                 In section .text, align 4, keep-with-next
     29          void FLL_Init (tFLL fll)
     30          {
   \                     FLL_Init: (+1)
   \   00000000   0xB413             PUSH     {R0,R1,R4}
     31            MCG_SC = fll.SC;  /* Setup FCRDIV and trimming                              */
   \   00000002   0x4826             LDR      R0,??FLL_Init_0  ;; 0x40064000
   \   00000004   0x4669             MOV      R1,SP
   \   00000006   0x7909             LDRB     R1,[R1, #+4]
   \   00000008   0x7201             STRB     R1,[R0, #+8]
     32            MCG_C8 = fll.C8;
   \   0000000A   0x4669             MOV      R1,SP
   \   0000000C   0x7989             LDRB     R1,[R1, #+6]
   \   0000000E   0x7341             STRB     R1,[R0, #+13]
     33            MCG_C7 = fll.C7;  /* Select MCG FLL external reference clock                */
   \   00000010   0x4669             MOV      R1,SP
   \   00000012   0x7949             LDRB     R1,[R1, #+5]
   \   00000014   0x7301             STRB     R1,[R0, #+12]
     34            MCG_C2 = fll.C2;  /* Low Power and clock select                             */
   \   00000016   0x4669             MOV      R1,SP
   \   00000018   0x7849             LDRB     R1,[R1, #+1]
   \   0000001A   0x7041             STRB     R1,[R0, #+1]
     35            /* Wait for oscillator initialization if External Reference Clock Selected  */
     36            if (MCG_C2 & MCG_C2_EREFS0_MASK) 
   \   0000001C   0x2104             MOVS     R1,#+4
   \   0000001E   0x7842             LDRB     R2,[R0, #+1]
   \   00000020   0x420A             TST      R2,R1
   \   00000022   0xD008             BEQ      ??FLL_Init_1
     37            { WAIT_FOR_FLAG (MCG_C2, EREFS0, OSCINIT0); }
   \                     ??FLL_Init_2: (+1)
   \   00000024   0x7983             LDRB     R3,[R0, #+6]
   \   00000026   0x2201             MOVS     R2,#+1
   \   00000028   0x085B             LSRS     R3,R3,#+1
   \   0000002A   0x4013             ANDS     R3,R3,R2
   \   0000002C   0x7844             LDRB     R4,[R0, #+1]
   \   0000002E   0x08A4             LSRS     R4,R4,#+2
   \   00000030   0x4022             ANDS     R2,R2,R4
   \   00000032   0x4293             CMP      R3,R2
   \   00000034   0xD1F6             BNE      ??FLL_Init_2
     38            /* Setup C1 register keeping MCGOUTCLK clocked in either FBI or FBE mode    */
     39            if ((fll.C1 & MCG_C1_IREFS_MASK))
   \                     ??FLL_Init_1: (+1)
   \   00000036   0x466A             MOV      R2,SP
   \   00000038   0x7812             LDRB     R2,[R2, #+0]
   \   0000003A   0x420A             TST      R2,R1
   \   0000003C   0xD005             BEQ      ??FLL_Init_3
     40              MCG_C1 = (fll.C1 & ~MCG_C1_CLKS_MASK) | MCG_C1_CLKS(1);     /* FBI mode   */
   \   0000003E   0x0691             LSLS     R1,R2,#+26
   \   00000040   0x0E89             LSRS     R1,R1,#+26
   \   00000042   0x2240             MOVS     R2,#+64
   \   00000044   0x430A             ORRS     R2,R2,R1
   \   00000046   0x7002             STRB     R2,[R0, #+0]
   \   00000048   0xE006             B        ??FLL_Init_4
     41            else
     42            //  MCG_C1 = (fll.C1 & ~MCG_C1_CLKS_MASK) | MCG_C1_CLKS(2);     /* FBE mode   */
     43             WAIT_FOR_FLAG (MCG_C1, CLKS, CLKST);
   \                     ??FLL_Init_3: (+1)
   \   0000004A   0x7981             LDRB     R1,[R0, #+6]
   \   0000004C   0x0709             LSLS     R1,R1,#+28
   \   0000004E   0x0F89             LSRS     R1,R1,#+30
   \   00000050   0x7802             LDRB     R2,[R0, #+0]
   \   00000052   0x0992             LSRS     R2,R2,#+6
   \   00000054   0x4291             CMP      R1,R2
   \   00000056   0xD1F8             BNE      ??FLL_Init_3
     44            /* Setup FLL frequency                                                      */
     45            MCG_C4 = (MCG_C4 & (MCG_C4_FCTRIM_MASK|MCG_C4_SCFTRIM_MASK)) | fll.C4;
   \                     ??FLL_Init_4: (+1)
   \   00000058   0x4669             MOV      R1,SP
   \   0000005A   0x7889             LDRB     R1,[R1, #+2]
   \   0000005C   0x78C2             LDRB     R2,[R0, #+3]
   \   0000005E   0x06D2             LSLS     R2,R2,#+27
   \   00000060   0x0ED2             LSRS     R2,R2,#+27
   \   00000062   0x430A             ORRS     R2,R2,R1
   \   00000064   0x70C2             STRB     R2,[R0, #+3]
   \   00000066   0x2260             MOVS     R2,#+96
     46            /* Wait until FLL frequency settles                                         */
     47            while ((MCG_C4 & MCG_C4_DRST_DRS_MASK) != (fll.C4 & MCG_C4_DRST_DRS_MASK));
   \                     ??FLL_Init_5: (+1)
   \   00000068   0x78C3             LDRB     R3,[R0, #+3]
   \   0000006A   0x4013             ANDS     R3,R3,R2
   \   0000006C   0x2460             MOVS     R4,#+96
   \   0000006E   0x400C             ANDS     R4,R4,R1
   \   00000070   0x42A3             CMP      R3,R4
   \   00000072   0xD1F9             BNE      ??FLL_Init_5
     48            MCG_C6 = fll.C6;  /* Choose FLL as MCG source                               */
   \   00000074   0x4669             MOV      R1,SP
   \   00000076   0x78C9             LDRB     R1,[R1, #+3]
   \   00000078   0x7141             STRB     R1,[R0, #+5]
     49            MCG_C1 = fll.C1;  /* Switch MCGOUTCLK clock source                          */
   \   0000007A   0x4669             MOV      R1,SP
   \   0000007C   0x7809             LDRB     R1,[R1, #+0]
   \   0000007E   0x7001             STRB     R1,[R0, #+0]
     50            //WAIT_FOR_FLAG (MCG_C1, CLKS, CLKST);
     51            if (MCG_C1 & MCG_C1_IRCLKEN_MASK) { WAIT_FOR_FLAG (MCG_C2, IRCS, IRCST); }
   \   00000080   0x7801             LDRB     R1,[R0, #+0]
   \   00000082   0x0789             LSLS     R1,R1,#+30
   \   00000084   0xD506             BPL      ??FLL_Init_6
   \                     ??FLL_Init_7: (+1)
   \   00000086   0x7981             LDRB     R1,[R0, #+6]
   \   00000088   0x2201             MOVS     R2,#+1
   \   0000008A   0x4011             ANDS     R1,R1,R2
   \   0000008C   0x7843             LDRB     R3,[R0, #+1]
   \   0000008E   0x401A             ANDS     R2,R2,R3
   \   00000090   0x4291             CMP      R1,R2
   \   00000092   0xD1F8             BNE      ??FLL_Init_7
     52          }
   \                     ??FLL_Init_6: (+1)
   \   00000094   0xB002             ADD      SP,SP,#+8
   \   00000096   0xBC10             POP      {R4}
   \   00000098   0x4770             BX       LR               ;; return
   \   0000009A   0xBF00             Nop      
   \                     ??FLL_Init_0:
   \   0000009C   0x40064000         DC32     0x40064000
     53          /******************************************************************************
     54           * End of module                                                              *
     55           ******************************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      12   FLL_Init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     160  FLL_Init

 
 160 bytes in section .text
 
 160 bytes of CODE memory

Errors: none
Warnings: 1
