###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        26/Dec/2016  16:29:59
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\llwu\llwu.c
#    Command line =  
#        C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\llwu\llwu.c
#        --no_size_constraints -D NDEBUG -lCN
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\oscafe_test\Release\List\
#        -o
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\oscafe_test\Release\Obj\
#        --no_unroll --debug --endian=little --cpu=Cortex-M0+ --no_mem_idioms
#        -e --fpu=None --dlib_config
#        D:\IAR7.4anzhuang\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\oscafe_test\..\..\..\..\src\common\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\oscafe_test\..\..\..\..\src\drivers\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\oscafe_test\..\..\..\..\src\freemaster\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\oscafe_test\..\..\..\..\src\projects\oscafe_test\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\oscafe_test\..\..\..\..\src\toolchain\iar\
#        -Ohs --require_prototypes
#    List file    =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\oscafe_test\Release\List\llwu.lst
#    Object file  =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\oscafe_test\Release\Obj\llwu.o
#
###############################################################################

C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\llwu\llwu.c
      1          /******************************************************************************
      2           * (c) Copyright 2010-2015, Freescale Semiconductor Inc.
      3           * ALL RIGHTS RESERVED.
      4           ***************************************************************************//*!
      5           * @file      llwu.c
      6           * @version   1.0.5.0
      7           * @date      Jun-03-2015
      8           * @brief     Low-Leakage Wakeup Unit (LLWU) driver source code.
      9           ******************************************************************************/
     10          #include "common.h"
     11          #include "llwu.h"
     12          
     13          #if !defined(MCU_MKM34ZA5)
     14            #error "The llwu.c module is specific to the MKMxxZxxACxx5 microcontrollers."
     15          #endif
     16          /******************************************************************************
     17           * data type definitions                                                      *
     18           ******************************************************************************/

   \                                 In section .bss, align 4
     19          static LLWU_CALLBACK pCallbackLLWU;
   \                     pCallbackLLWU:
   \   00000000                      DS8 4
     20          
     21          /******************************************************************************
     22           * public function definitions                                                *
     23           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     24          void LLWU_Init (tLLWU llwu, uint8 ip, LLWU_CALLBACK pCallback)
     25          {
   \                     LLWU_Init: (+1)
   \   00000000   0xB403             PUSH     {R0,R1}
     26            if (pCallback) { pCallbackLLWU = pCallback; NVIC_SetIsr(INT_LLWU,ip); }
   \   00000002   0x0018             MOVS     R0,R3
   \   00000004   0xD011             BEQ      ??LLWU_Init_0
   \   00000006   0x....             LDR      R0,??DataTable1
   \   00000008   0x6003             STR      R3,[R0, #+0]
   \   0000000A   0x2080             MOVS     R0,#+128
   \   0000000C   0x0140             LSLS     R0,R0,#+5        ;; #+4096
   \   0000000E   0x....             LDR      R1,??DataTable1_1  ;; 0xe000e280
   \   00000010   0x680B             LDR      R3,[R1, #+0]
   \   00000012   0x4303             ORRS     R3,R3,R0
   \   00000014   0x600B             STR      R3,[R1, #+0]
   \   00000016   0x....             LDR      R1,??DataTable1_2  ;; 0xe000e100
   \   00000018   0x680B             LDR      R3,[R1, #+0]
   \   0000001A   0x4318             ORRS     R0,R0,R3
   \   0000001C   0x6008             STR      R0,[R1, #+0]
   \   0000001E   0x....             LDR      R0,??DataTable1_3  ;; 0xe000e40c
   \   00000020   0x6801             LDR      R1,[R0, #+0]
   \   00000022   0x0612             LSLS     R2,R2,#+24
   \   00000024   0x0C92             LSRS     R2,R2,#+18
   \   00000026   0x430A             ORRS     R2,R2,R1
   \   00000028   0x6002             STR      R2,[R0, #+0]
     27            LLWU_PE1    = llwu.PE1;
   \                     ??LLWU_Init_0: (+1)
   \   0000002A   0x....             LDR      R0,??DataTable1_4  ;; 0x4007c000
   \   0000002C   0x4669             MOV      R1,SP
   \   0000002E   0x7809             LDRB     R1,[R1, #+0]
   \   00000030   0x7001             STRB     R1,[R0, #+0]
     28            LLWU_PE2    = llwu.PE2;
   \   00000032   0x4669             MOV      R1,SP
   \   00000034   0x7849             LDRB     R1,[R1, #+1]
   \   00000036   0x7041             STRB     R1,[R0, #+1]
     29            LLWU_PE3    = llwu.PE3;
   \   00000038   0x4669             MOV      R1,SP
   \   0000003A   0x7889             LDRB     R1,[R1, #+2]
   \   0000003C   0x7081             STRB     R1,[R0, #+2]
     30            LLWU_PE4    = llwu.PE4;
   \   0000003E   0x4669             MOV      R1,SP
   \   00000040   0x78C9             LDRB     R1,[R1, #+3]
   \   00000042   0x70C1             STRB     R1,[R0, #+3]
     31            LLWU_ME     = llwu.ME;
   \   00000044   0x4669             MOV      R1,SP
   \   00000046   0x7909             LDRB     R1,[R1, #+4]
   \   00000048   0x7101             STRB     R1,[R0, #+4]
     32            LLWU_FILT1  = llwu.FILT1;
   \   0000004A   0x4669             MOV      R1,SP
   \   0000004C   0x7949             LDRB     R1,[R1, #+5]
   \   0000004E   0x7201             STRB     R1,[R0, #+8]
     33            LLWU_FILT2  = llwu.FILT2;
   \   00000050   0x4669             MOV      R1,SP
   \   00000052   0x7989             LDRB     R1,[R1, #+6]
   \   00000054   0x7241             STRB     R1,[R0, #+9]
     34          
     35            /* clear flags                                                              */
     36            LLWU_ClrFlags(LLWU_ALL);
   \   00000056   0x21FF             MOVS     R1,#+255
   \   00000058   0x7141             STRB     R1,[R0, #+5]
   \   0000005A   0x7181             STRB     R1,[R0, #+6]
   \   0000005C   0x7A02             LDRB     R2,[R0, #+8]
   \   0000005E   0x7201             STRB     R1,[R0, #+8]
   \   00000060   0x7A42             LDRB     R2,[R0, #+9]
   \   00000062   0x7241             STRB     R1,[R0, #+9]
     37          }
   \   00000064   0xB002             ADD      SP,SP,#+8
   \   00000066   0x4770             BX       LR               ;; return
     38          
     39          /******************************************************************************
     40           * interrupt function definitions                                             *
     41           ******************************************************************************/
     42          #if defined(__ICCARM__)
     43            #pragma diag_suppress=Pa082
     44          #endif

   \                                 In section .text, align 2, keep-with-next
     45          weak void llwu_isr (void)
     46          {
   \                     llwu_isr: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
     47            register uint32 tmp = LLWU_GetFlags();
   \   00000004   0x....             LDR      R5,??DataTable1_5  ;; 0x4007c005
   \   00000006   0x7929             LDRB     R1,[R5, #+4]
   \   00000008   0x78EA             LDRB     R2,[R5, #+3]
   \   0000000A   0x78AB             LDRB     R3,[R5, #+2]
   \   0000000C   0x786C             LDRB     R4,[R5, #+1]
   \   0000000E   0x7828             LDRB     R0,[R5, #+0]
     48          
     49            /* clear flags                                                              */
     50            LLWU_ClrFlags (LLWU_ALL);
   \   00000010   0x26FF             MOVS     R6,#+255
   \   00000012   0x702E             STRB     R6,[R5, #+0]
   \   00000014   0x706E             STRB     R6,[R5, #+1]
   \   00000016   0x78EF             LDRB     R7,[R5, #+3]
   \   00000018   0x70EE             STRB     R6,[R5, #+3]
   \   0000001A   0x792F             LDRB     R7,[R5, #+4]
   \   0000001C   0x712E             STRB     R6,[R5, #+4]
     51          
     52            /* call callback function                                                   */
     53            pCallbackLLWU (tmp);
   \   0000001E   0x2580             MOVS     R5,#+128
   \   00000020   0x4029             ANDS     R1,R1,R5
   \   00000022   0x05C9             LSLS     R1,R1,#+23
   \   00000024   0x4015             ANDS     R5,R5,R2
   \   00000026   0x05AA             LSLS     R2,R5,#+22
   \   00000028   0x430A             ORRS     R2,R2,R1
   \   0000002A   0x0419             LSLS     R1,R3,#+16
   \   0000002C   0x4311             ORRS     R1,R1,R2
   \   0000002E   0x0222             LSLS     R2,R4,#+8
   \   00000030   0x430A             ORRS     R2,R2,R1
   \   00000032   0x4310             ORRS     R0,R0,R2
   \   00000034   0x....             LDR      R1,??DataTable1
   \   00000036   0x6809             LDR      R1,[R1, #+0]
   \   00000038   0x4788             BLX      R1
     54          }
   \   0000003A   0xB001             ADD      SP,SP,#+4
   \   0000003C   0xBDF0             POP      {R4-R7,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     pCallbackLLWU

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0xE000E280         DC32     0xe000e280

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0xE000E40C         DC32     0xe000e40c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x4007C000         DC32     0x4007c000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x4007C005         DC32     0x4007c005
     55          /******************************************************************************
     56           * End of module                                                              *
     57           ******************************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   LLWU_Init
      24   llwu_isr
        24   -- Indirect call


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
     104  LLWU_Init
      62  llwu_isr
       4  pCallbackLLWU

 
   4 bytes in section .bss
 190 bytes in section .text
 
 190 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none
