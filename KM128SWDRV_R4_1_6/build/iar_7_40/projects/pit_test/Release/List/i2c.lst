###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        21/Mar/2017  14:13:02
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\i2c\i2c.c
#    Command line =  
#        C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\i2c\i2c.c -D NDEBUG -lCN
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\pit_test\Release\List\
#        -o
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\pit_test\Release\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ --no_mem_idioms -e --fpu=None --dlib_config
#        D:\IAR7.4anzhuang\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\pit_test\..\..\..\..\src\common\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\pit_test\..\..\..\..\src\drivers\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\pit_test\..\..\..\..\src\freemaster\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\pit_test\..\..\..\..\src\projects\pit_test\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\pit_test\..\..\..\..\src\toolchain\iar\
#        -On
#    List file    =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\pit_test\Release\List\i2c.lst
#    Object file  =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\pit_test\Release\Obj\i2c.o
#
###############################################################################

C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\i2c\i2c.c
      1          /******************************************************************************
      2           * (c) Copyright 2010-2015, Freescale Semiconductor Inc.
      3           * ALL RIGHTS RESERVED.
      4           ***************************************************************************//*!
      5           * @file      i2c.c
      6           * @version   1.0.4.0
      7           * @date      Apr-20-2014
      8           * @brief     I2C bus controller (I2C) driver source code.
      9          ******************************************************************************/
     10          #include "common.h"
     11          #include "i2c.h"
     12          
     13          #if !defined(MCU_MKM34ZA5)
     14            #error "The i2c.c module is specific to the MKMxxZxxACxx5 microcontrollers."
     15          #endif
     16          
     17          /******************************************************************************
     18           * data type definitions                                                      *
     19           ******************************************************************************/

   \                                 In section .bss, align 4
     20          static I2C_CALLBACK pCallbackI2Cx;
   \                     pCallbackI2Cx:
   \   00000000                      DS8 4
     21          
     22          /******************************************************************************
     23           * public function definitions                                                *
     24           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     25          void I2C_InstallCallback (uint8 ip, I2C_CALLBACK pCallback)
     26          {
   \                     I2C_InstallCallback: (+1)
   \   00000000   0xB500             PUSH     {LR}
     27            if (pCallback) { pCallbackI2Cx = pCallback; NVIC_SetIsr(INT_I2C0_I2C1,ip); }
   \   00000002   0x000A             MOVS     R2,R1
   \   00000004   0x2A00             CMP      R2,#+0
   \   00000006   0xD016             BEQ      ??I2C_InstallCallback_0
   \   00000008   0x....             LDR      R2,??DataTable2
   \   0000000A   0x6011             STR      R1,[R2, #+0]
   \   0000000C   0x....             LDR      R2,??DataTable2_1  ;; 0xe000e280
   \   0000000E   0x6812             LDR      R2,[R2, #+0]
   \   00000010   0x2380             MOVS     R3,#+128
   \   00000012   0x04DB             LSLS     R3,R3,#+19       ;; #+67108864
   \   00000014   0x4313             ORRS     R3,R3,R2
   \   00000016   0x....             LDR      R2,??DataTable2_1  ;; 0xe000e280
   \   00000018   0x6013             STR      R3,[R2, #+0]
   \   0000001A   0x....             LDR      R2,??DataTable2_2  ;; 0xe000e100
   \   0000001C   0x6812             LDR      R2,[R2, #+0]
   \   0000001E   0x2380             MOVS     R3,#+128
   \   00000020   0x04DB             LSLS     R3,R3,#+19       ;; #+67108864
   \   00000022   0x4313             ORRS     R3,R3,R2
   \   00000024   0x....             LDR      R2,??DataTable2_2  ;; 0xe000e100
   \   00000026   0x6013             STR      R3,[R2, #+0]
   \   00000028   0x....             LDR      R2,??DataTable3  ;; 0xe000e418
   \   0000002A   0x6812             LDR      R2,[R2, #+0]
   \   0000002C   0xB2C0             UXTB     R0,R0
   \   0000002E   0x0583             LSLS     R3,R0,#+22
   \   00000030   0x4313             ORRS     R3,R3,R2
   \   00000032   0x....             LDR      R2,??DataTable3  ;; 0xe000e418
   \   00000034   0x6013             STR      R3,[R2, #+0]
     28          }
   \                     ??I2C_InstallCallback_0: (+1)
   \   00000036   0xBD00             POP      {PC}             ;; return
     29          

   \                                 In section .text, align 2, keep-with-next
     30          void I2C0_Init (tI2C i2c)
     31          {
   \                     I2C0_Init: (+1)
   \   00000000   0xB407             PUSH     {R0-R2}
     32            I2C0_A1    = i2c.A1;
   \   00000002   0x4668             MOV      R0,SP
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x....             LDR      R1,??DataTable3_1  ;; 0x40067000
   \   00000008   0x7008             STRB     R0,[R1, #+0]
     33            I2C0_F     = i2c.F;
   \   0000000A   0x4668             MOV      R0,SP
   \   0000000C   0x7840             LDRB     R0,[R0, #+1]
   \   0000000E   0x....             LDR      R1,??DataTable3_2  ;; 0x40067001
   \   00000010   0x7008             STRB     R0,[R1, #+0]
     34            I2C0_C1    = i2c.C1;
   \   00000012   0x4668             MOV      R0,SP
   \   00000014   0x7880             LDRB     R0,[R0, #+2]
   \   00000016   0x....             LDR      R1,??DataTable3_3  ;; 0x40067002
   \   00000018   0x7008             STRB     R0,[R1, #+0]
     35            I2C0_C2    = i2c.C2;
   \   0000001A   0x4668             MOV      R0,SP
   \   0000001C   0x78C0             LDRB     R0,[R0, #+3]
   \   0000001E   0x....             LDR      R1,??DataTable3_4  ;; 0x40067005
   \   00000020   0x7008             STRB     R0,[R1, #+0]
     36            I2C0_FLT   = i2c.FLT;
   \   00000022   0x4668             MOV      R0,SP
   \   00000024   0x7900             LDRB     R0,[R0, #+4]
   \   00000026   0x....             LDR      R1,??DataTable3_5  ;; 0x40067006
   \   00000028   0x7008             STRB     R0,[R1, #+0]
     37            I2C0_RA    = i2c.RA;
   \   0000002A   0x4668             MOV      R0,SP
   \   0000002C   0x7940             LDRB     R0,[R0, #+5]
   \   0000002E   0x....             LDR      R1,??DataTable3_6  ;; 0x40067007
   \   00000030   0x7008             STRB     R0,[R1, #+0]
     38            I2C0_SMB   = i2c.SMB;
   \   00000032   0x4668             MOV      R0,SP
   \   00000034   0x7980             LDRB     R0,[R0, #+6]
   \   00000036   0x....             LDR      R1,??DataTable3_7  ;; 0x40067008
   \   00000038   0x7008             STRB     R0,[R1, #+0]
     39            I2C0_A2    = i2c.A2;
   \   0000003A   0x4668             MOV      R0,SP
   \   0000003C   0x79C0             LDRB     R0,[R0, #+7]
   \   0000003E   0x....             LDR      R1,??DataTable3_8  ;; 0x40067009
   \   00000040   0x7008             STRB     R0,[R1, #+0]
     40            I2C0_SLTH  = i2c.SLTH;
   \   00000042   0x4668             MOV      R0,SP
   \   00000044   0x7A00             LDRB     R0,[R0, #+8]
   \   00000046   0x....             LDR      R1,??DataTable3_9  ;; 0x4006700a
   \   00000048   0x7008             STRB     R0,[R1, #+0]
     41            I2C0_SLTL  = i2c.SLTL;
   \   0000004A   0x4668             MOV      R0,SP
   \   0000004C   0x7A40             LDRB     R0,[R0, #+9]
   \   0000004E   0x....             LDR      R1,??DataTable3_10  ;; 0x4006700b
   \   00000050   0x7008             STRB     R0,[R1, #+0]
     42          }
   \   00000052   0xB003             ADD      SP,SP,#+12
   \   00000054   0x4770             BX       LR               ;; return
     43          

   \                                 In section .text, align 2, keep-with-next
     44          void I2C1_Init (tI2C i2c)
     45          {
   \                     I2C1_Init: (+1)
   \   00000000   0xB407             PUSH     {R0-R2}
     46            I2C1_A1    = i2c.A1;
   \   00000002   0x4668             MOV      R0,SP
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x....             LDR      R1,??DataTable3_11  ;; 0x40068000
   \   00000008   0x7008             STRB     R0,[R1, #+0]
     47            I2C1_F     = i2c.F;
   \   0000000A   0x4668             MOV      R0,SP
   \   0000000C   0x7840             LDRB     R0,[R0, #+1]
   \   0000000E   0x....             LDR      R1,??DataTable3_12  ;; 0x40068001
   \   00000010   0x7008             STRB     R0,[R1, #+0]
     48            I2C1_C1    = i2c.C1;
   \   00000012   0x4668             MOV      R0,SP
   \   00000014   0x7880             LDRB     R0,[R0, #+2]
   \   00000016   0x....             LDR      R1,??DataTable3_13  ;; 0x40068002
   \   00000018   0x7008             STRB     R0,[R1, #+0]
     49            I2C1_C2    = i2c.C2;
   \   0000001A   0x4668             MOV      R0,SP
   \   0000001C   0x78C0             LDRB     R0,[R0, #+3]
   \   0000001E   0x....             LDR      R1,??DataTable3_14  ;; 0x40068005
   \   00000020   0x7008             STRB     R0,[R1, #+0]
     50            I2C1_FLT   = i2c.FLT;
   \   00000022   0x4668             MOV      R0,SP
   \   00000024   0x7900             LDRB     R0,[R0, #+4]
   \   00000026   0x....             LDR      R1,??DataTable3_15  ;; 0x40068006
   \   00000028   0x7008             STRB     R0,[R1, #+0]
     51            I2C1_RA    = i2c.RA;
   \   0000002A   0x4668             MOV      R0,SP
   \   0000002C   0x7940             LDRB     R0,[R0, #+5]
   \   0000002E   0x....             LDR      R1,??DataTable3_16  ;; 0x40068007
   \   00000030   0x7008             STRB     R0,[R1, #+0]
     52            I2C1_SMB   = i2c.SMB;
   \   00000032   0x4668             MOV      R0,SP
   \   00000034   0x7980             LDRB     R0,[R0, #+6]
   \   00000036   0x....             LDR      R1,??DataTable3_17  ;; 0x40068008
   \   00000038   0x7008             STRB     R0,[R1, #+0]
     53            I2C1_A2    = i2c.A2;
   \   0000003A   0x4668             MOV      R0,SP
   \   0000003C   0x79C0             LDRB     R0,[R0, #+7]
   \   0000003E   0x....             LDR      R1,??DataTable3_18  ;; 0x40068009
   \   00000040   0x7008             STRB     R0,[R1, #+0]
     54            I2C1_SLTH  = i2c.SLTH;
   \   00000042   0x4668             MOV      R0,SP
   \   00000044   0x7A00             LDRB     R0,[R0, #+8]
   \   00000046   0x....             LDR      R1,??DataTable3_19  ;; 0x4006800a
   \   00000048   0x7008             STRB     R0,[R1, #+0]
     55            I2C1_SLTL  = i2c.SLTL;
   \   0000004A   0x4668             MOV      R0,SP
   \   0000004C   0x7A40             LDRB     R0,[R0, #+9]
   \   0000004E   0x....             LDR      R1,??DataTable3_20  ;; 0x4006800b
   \   00000050   0x7008             STRB     R0,[R1, #+0]
     56          }
   \   00000052   0xB003             ADD      SP,SP,#+12
   \   00000054   0x4770             BX       LR               ;; return
     57          
     58          /******************************************************************************
     59           * interrupt function definitions                                             *
     60           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     61          weak void i2cx_isr (void)
     62          {
   \                     i2cx_isr: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     63            register uint8 arbitration_lost = FALSE;
   \   00000002   0x2400             MOVS     R4,#+0
     64          
     65            /* process I2C0 interrupt                                                   */
     66            if (SIM_SCGC4 & SIM_SCGC4_I2C0_MASK)
   \   00000004   0x....             LDR      R0,??DataTable3_21  ;; 0x4003f034
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x0600             LSLS     R0,R0,#+24
   \   0000000A   0xD560             BPL      ??i2cx_isr_0
     67            {
     68              if (I2C_GetIsrFlag(I2C0) && (I2C0_C1 & I2C_C1_IICIE_MASK))
   \   0000000C   0x....             LDR      R0,??DataTable3_22  ;; 0x40067003
   \   0000000E   0x7800             LDRB     R0,[R0, #+0]
   \   00000010   0x0780             LSLS     R0,R0,#+30
   \   00000012   0xD55C             BPL      ??i2cx_isr_0
   \   00000014   0x....             LDR      R0,??DataTable3_3  ;; 0x40067002
   \   00000016   0x7800             LDRB     R0,[R0, #+0]
   \   00000018   0x0640             LSLS     R0,R0,#+25
   \   0000001A   0xD558             BPL      ??i2cx_isr_0
     69              {
     70                /* Arbitration testing                                                  */
     71                if (I2C0_S & I2C_S_ARBL_MASK) { arbitration_lost = TRUE; }
   \   0000001C   0x....             LDR      R0,??DataTable3_22  ;; 0x40067003
   \   0000001E   0x7800             LDRB     R0,[R0, #+0]
   \   00000020   0x06C0             LSLS     R0,R0,#+27
   \   00000022   0xD501             BPL      ??i2cx_isr_1
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0x0004             MOVS     R4,R0
     72          
     73                I2C_ClrIsrFlag(I2C0);
   \                     ??i2cx_isr_1: (+1)
   \   00000028   0x....             LDR      R0,??DataTable3_22  ;; 0x40067003
   \   0000002A   0x7800             LDRB     R0,[R0, #+0]
   \   0000002C   0x21EF             MOVS     R1,#+239
   \   0000002E   0x4001             ANDS     R1,R1,R0
   \   00000030   0x2002             MOVS     R0,#+2
   \   00000032   0x4308             ORRS     R0,R0,R1
   \   00000034   0x....             LDR      R1,??DataTable3_22  ;; 0x40067003
   \   00000036   0x7008             STRB     R0,[R1, #+0]
     74          
     75                /* Master part                                                          */
     76                if ( (I2C0_C1 & I2C_C1_TX_MASK) && (I2C0_C1 & I2C_C1_MST_MASK))
   \   00000038   0x....             LDR      R0,??DataTable3_3  ;; 0x40067002
   \   0000003A   0x7800             LDRB     R0,[R0, #+0]
   \   0000003C   0x06C0             LSLS     R0,R0,#+27
   \   0000003E   0xD508             BPL      ??i2cx_isr_2
   \   00000040   0x....             LDR      R0,??DataTable3_3  ;; 0x40067002
   \   00000042   0x7800             LDRB     R0,[R0, #+0]
   \   00000044   0x0680             LSLS     R0,R0,#+26
   \   00000046   0xD504             BPL      ??i2cx_isr_2
     77                {
     78                   pCallbackI2Cx (I2C0_CALLBACK, I2C_MTX_CALLBACK);
   \   00000048   0x2101             MOVS     R1,#+1
   \   0000004A   0x2001             MOVS     R0,#+1
   \   0000004C   0x....             LDR      R2,??DataTable3_23
   \   0000004E   0x6812             LDR      R2,[R2, #+0]
   \   00000050   0x4790             BLX      R2
     79                }
     80                if (!(I2C0_C1 & I2C_C1_TX_MASK) && (I2C0_C1 & I2C_C1_MST_MASK))
   \                     ??i2cx_isr_2: (+1)
   \   00000052   0x....             LDR      R0,??DataTable3_3  ;; 0x40067002
   \   00000054   0x7800             LDRB     R0,[R0, #+0]
   \   00000056   0x06C0             LSLS     R0,R0,#+27
   \   00000058   0xD408             BMI      ??i2cx_isr_3
   \   0000005A   0x....             LDR      R0,??DataTable3_3  ;; 0x40067002
   \   0000005C   0x7800             LDRB     R0,[R0, #+0]
   \   0000005E   0x0680             LSLS     R0,R0,#+26
   \   00000060   0xD504             BPL      ??i2cx_isr_3
     81                {
     82                   pCallbackI2Cx (I2C0_CALLBACK, I2C_MRX_CALLBACK);
   \   00000062   0x2102             MOVS     R1,#+2
   \   00000064   0x2001             MOVS     R0,#+1
   \   00000066   0x....             LDR      R2,??DataTable3_23
   \   00000068   0x6812             LDR      R2,[R2, #+0]
   \   0000006A   0x4790             BLX      R2
     83                }
     84          
     85                /* Slave part                                                           */
     86                if (I2C0_S & I2C_S_IAAS_MASK)   /* if addressed as a slave              */
   \                     ??i2cx_isr_3: (+1)
   \   0000006C   0x....             LDR      R0,??DataTable3_22  ;; 0x40067003
   \   0000006E   0x7800             LDRB     R0,[R0, #+0]
   \   00000070   0x0640             LSLS     R0,R0,#+25
   \   00000072   0xD50F             BPL      ??i2cx_isr_4
     87                {
     88                  if (I2C0_S & I2C_S_SRW_MASK)
   \   00000074   0x....             LDR      R0,??DataTable3_22  ;; 0x40067003
   \   00000076   0x7800             LDRB     R0,[R0, #+0]
   \   00000078   0x0740             LSLS     R0,R0,#+29
   \   0000007A   0xD505             BPL      ??i2cx_isr_5
     89                  {
     90                    pCallbackI2Cx (I2C0_CALLBACK, I2C_SIAAS_TX_CALLBACK);
   \   0000007C   0x2120             MOVS     R1,#+32
   \   0000007E   0x2001             MOVS     R0,#+1
   \   00000080   0x....             LDR      R2,??DataTable3_23
   \   00000082   0x6812             LDR      R2,[R2, #+0]
   \   00000084   0x4790             BLX      R2
   \   00000086   0xE022             B        ??i2cx_isr_0
     91                  }
     92                  else
     93                  {
     94                    pCallbackI2Cx (I2C0_CALLBACK, I2C_SIAAS_RX_CALLBACK);
   \                     ??i2cx_isr_5: (+1)
   \   00000088   0x2110             MOVS     R1,#+16
   \   0000008A   0x2001             MOVS     R0,#+1
   \   0000008C   0x....             LDR      R2,??DataTable3_23
   \   0000008E   0x6812             LDR      R2,[R2, #+0]
   \   00000090   0x4790             BLX      R2
   \   00000092   0xE01C             B        ??i2cx_isr_0
     95                  }
     96                }
     97                else
     98                {
     99                  if (arbitration_lost == FALSE)/* if master didn't lost arbitration    */
   \                     ??i2cx_isr_4: (+1)
   \   00000094   0xB2E4             UXTB     R4,R4
   \   00000096   0x2C00             CMP      R4,#+0
   \   00000098   0xD119             BNE      ??i2cx_isr_0
    100                  {
    101                    if (!(I2C0_C1 & I2C_C1_MST_MASK) &&  (I2C0_C1 & I2C_C1_TX_MASK))
   \   0000009A   0x....             LDR      R0,??DataTable3_3  ;; 0x40067002
   \   0000009C   0x7800             LDRB     R0,[R0, #+0]
   \   0000009E   0x0680             LSLS     R0,R0,#+26
   \   000000A0   0xD408             BMI      ??i2cx_isr_6
   \   000000A2   0x....             LDR      R0,??DataTable3_3  ;; 0x40067002
   \   000000A4   0x7800             LDRB     R0,[R0, #+0]
   \   000000A6   0x06C0             LSLS     R0,R0,#+27
   \   000000A8   0xD504             BPL      ??i2cx_isr_6
    102                    {
    103                       pCallbackI2Cx (I2C0_CALLBACK, I2C_STX_CALLBACK);
   \   000000AA   0x2104             MOVS     R1,#+4
   \   000000AC   0x2001             MOVS     R0,#+1
   \   000000AE   0x....             LDR      R2,??DataTable3_23
   \   000000B0   0x6812             LDR      R2,[R2, #+0]
   \   000000B2   0x4790             BLX      R2
    104                    }
    105                    if (!(I2C0_C1 & I2C_C1_MST_MASK) && !(I2C0_C1 & I2C_C1_TX_MASK))
   \                     ??i2cx_isr_6: (+1)
   \   000000B4   0x....             LDR      R0,??DataTable3_3  ;; 0x40067002
   \   000000B6   0x7800             LDRB     R0,[R0, #+0]
   \   000000B8   0x0680             LSLS     R0,R0,#+26
   \   000000BA   0xD408             BMI      ??i2cx_isr_0
   \   000000BC   0x....             LDR      R0,??DataTable3_3  ;; 0x40067002
   \   000000BE   0x7800             LDRB     R0,[R0, #+0]
   \   000000C0   0x06C0             LSLS     R0,R0,#+27
   \   000000C2   0xD404             BMI      ??i2cx_isr_0
    106                    {
    107                       pCallbackI2Cx (I2C0_CALLBACK, I2C_SRX_CALLBACK);
   \   000000C4   0x2108             MOVS     R1,#+8
   \   000000C6   0x2001             MOVS     R0,#+1
   \   000000C8   0x....             LDR      R2,??DataTable3_23
   \   000000CA   0x6812             LDR      R2,[R2, #+0]
   \   000000CC   0x4790             BLX      R2
    108                    }
    109                  }
    110                }
    111              }
    112            }
    113          
    114            /* process I2C1 interrupt                                                   */
    115            if (SIM_SCGC4 & SIM_SCGC4_I2C1_MASK)
   \                     ??i2cx_isr_0: (+1)
   \   000000CE   0x....             LDR      R0,??DataTable3_21  ;; 0x4003f034
   \   000000D0   0x6800             LDR      R0,[R0, #+0]
   \   000000D2   0x05C0             LSLS     R0,R0,#+23
   \   000000D4   0xD560             BPL      ??i2cx_isr_7
    116            {
    117              if (I2C_GetIsrFlag(I2C1) && (I2C1_C1 & I2C_C1_IICIE_MASK))
   \   000000D6   0x....             LDR      R0,??DataTable3_24  ;; 0x40068003
   \   000000D8   0x7800             LDRB     R0,[R0, #+0]
   \   000000DA   0x0780             LSLS     R0,R0,#+30
   \   000000DC   0xD55C             BPL      ??i2cx_isr_7
   \   000000DE   0x....             LDR      R0,??DataTable3_13  ;; 0x40068002
   \   000000E0   0x7800             LDRB     R0,[R0, #+0]
   \   000000E2   0x0640             LSLS     R0,R0,#+25
   \   000000E4   0xD558             BPL      ??i2cx_isr_7
    118              {
    119                /* Arbitration testing                                                  */
    120                if (I2C1_S & I2C_S_ARBL_MASK) { arbitration_lost = TRUE; }
   \   000000E6   0x....             LDR      R0,??DataTable3_24  ;; 0x40068003
   \   000000E8   0x7800             LDRB     R0,[R0, #+0]
   \   000000EA   0x06C0             LSLS     R0,R0,#+27
   \   000000EC   0xD501             BPL      ??i2cx_isr_8
   \   000000EE   0x2001             MOVS     R0,#+1
   \   000000F0   0x0004             MOVS     R4,R0
    121          
    122                I2C_ClrIsrFlag(I2C1);
   \                     ??i2cx_isr_8: (+1)
   \   000000F2   0x....             LDR      R0,??DataTable3_24  ;; 0x40068003
   \   000000F4   0x7800             LDRB     R0,[R0, #+0]
   \   000000F6   0x21EF             MOVS     R1,#+239
   \   000000F8   0x4001             ANDS     R1,R1,R0
   \   000000FA   0x2002             MOVS     R0,#+2
   \   000000FC   0x4308             ORRS     R0,R0,R1
   \   000000FE   0x....             LDR      R1,??DataTable3_24  ;; 0x40068003
   \   00000100   0x7008             STRB     R0,[R1, #+0]
    123          
    124                /* Master part                                                          */
    125                if ( (I2C1_C1 & I2C_C1_TX_MASK) && (I2C1_C1 & I2C_C1_MST_MASK))
   \   00000102   0x....             LDR      R0,??DataTable3_13  ;; 0x40068002
   \   00000104   0x7800             LDRB     R0,[R0, #+0]
   \   00000106   0x06C0             LSLS     R0,R0,#+27
   \   00000108   0xD508             BPL      ??i2cx_isr_9
   \   0000010A   0x....             LDR      R0,??DataTable3_13  ;; 0x40068002
   \   0000010C   0x7800             LDRB     R0,[R0, #+0]
   \   0000010E   0x0680             LSLS     R0,R0,#+26
   \   00000110   0xD504             BPL      ??i2cx_isr_9
    126                {
    127                   pCallbackI2Cx (I2C1_CALLBACK, I2C_MTX_CALLBACK);
   \   00000112   0x2101             MOVS     R1,#+1
   \   00000114   0x2002             MOVS     R0,#+2
   \   00000116   0x....             LDR      R2,??DataTable3_23
   \   00000118   0x6812             LDR      R2,[R2, #+0]
   \   0000011A   0x4790             BLX      R2
    128                }
    129                if (!(I2C1_C1 & I2C_C1_TX_MASK) && (I2C1_C1 & I2C_C1_MST_MASK))
   \                     ??i2cx_isr_9: (+1)
   \   0000011C   0x....             LDR      R0,??DataTable3_13  ;; 0x40068002
   \   0000011E   0x7800             LDRB     R0,[R0, #+0]
   \   00000120   0x06C0             LSLS     R0,R0,#+27
   \   00000122   0xD408             BMI      ??i2cx_isr_10
   \   00000124   0x....             LDR      R0,??DataTable3_13  ;; 0x40068002
   \   00000126   0x7800             LDRB     R0,[R0, #+0]
   \   00000128   0x0680             LSLS     R0,R0,#+26
   \   0000012A   0xD504             BPL      ??i2cx_isr_10
    130                {
    131                   pCallbackI2Cx (I2C1_CALLBACK, I2C_MRX_CALLBACK);
   \   0000012C   0x2102             MOVS     R1,#+2
   \   0000012E   0x2002             MOVS     R0,#+2
   \   00000130   0x....             LDR      R2,??DataTable3_23
   \   00000132   0x6812             LDR      R2,[R2, #+0]
   \   00000134   0x4790             BLX      R2
    132                }
    133          
    134                /* Slave part                                                           */
    135                if (I2C1_S & I2C_S_IAAS_MASK)   /* if addressed as a slave              */
   \                     ??i2cx_isr_10: (+1)
   \   00000136   0x....             LDR      R0,??DataTable3_24  ;; 0x40068003
   \   00000138   0x7800             LDRB     R0,[R0, #+0]
   \   0000013A   0x0640             LSLS     R0,R0,#+25
   \   0000013C   0xD50F             BPL      ??i2cx_isr_11
    136                {
    137                  if (I2C1_S & I2C_S_SRW_MASK)
   \   0000013E   0x....             LDR      R0,??DataTable3_24  ;; 0x40068003
   \   00000140   0x7800             LDRB     R0,[R0, #+0]
   \   00000142   0x0740             LSLS     R0,R0,#+29
   \   00000144   0xD505             BPL      ??i2cx_isr_12
    138                  {
    139                    pCallbackI2Cx (I2C1_CALLBACK, I2C_SIAAS_TX_CALLBACK);
   \   00000146   0x2120             MOVS     R1,#+32
   \   00000148   0x2002             MOVS     R0,#+2
   \   0000014A   0x....             LDR      R2,??DataTable3_23
   \   0000014C   0x6812             LDR      R2,[R2, #+0]
   \   0000014E   0x4790             BLX      R2
   \   00000150   0xE022             B        ??i2cx_isr_7
    140                  }
    141                  else
    142                  {
    143                    pCallbackI2Cx (I2C1_CALLBACK, I2C_SIAAS_RX_CALLBACK);
   \                     ??i2cx_isr_12: (+1)
   \   00000152   0x2110             MOVS     R1,#+16
   \   00000154   0x2002             MOVS     R0,#+2
   \   00000156   0x....             LDR      R2,??DataTable3_23
   \   00000158   0x6812             LDR      R2,[R2, #+0]
   \   0000015A   0x4790             BLX      R2
   \   0000015C   0xE01C             B        ??i2cx_isr_7
    144                  }
    145                }
    146                else
    147                {
    148                  if (arbitration_lost == FALSE)/* if master didn't lost arbitration    */
   \                     ??i2cx_isr_11: (+1)
   \   0000015E   0xB2E4             UXTB     R4,R4
   \   00000160   0x2C00             CMP      R4,#+0
   \   00000162   0xD119             BNE      ??i2cx_isr_7
    149                  {
    150                    if (!(I2C1_C1 & I2C_C1_MST_MASK) &&  (I2C1_C1 & I2C_C1_TX_MASK))
   \   00000164   0x....             LDR      R0,??DataTable3_13  ;; 0x40068002
   \   00000166   0x7800             LDRB     R0,[R0, #+0]
   \   00000168   0x0680             LSLS     R0,R0,#+26
   \   0000016A   0xD408             BMI      ??i2cx_isr_13
   \   0000016C   0x....             LDR      R0,??DataTable3_13  ;; 0x40068002
   \   0000016E   0x7800             LDRB     R0,[R0, #+0]
   \   00000170   0x06C0             LSLS     R0,R0,#+27
   \   00000172   0xD504             BPL      ??i2cx_isr_13
    151                    {
    152                       pCallbackI2Cx (I2C1_CALLBACK, I2C_STX_CALLBACK);
   \   00000174   0x2104             MOVS     R1,#+4
   \   00000176   0x2002             MOVS     R0,#+2
   \   00000178   0x....             LDR      R2,??DataTable3_23
   \   0000017A   0x6812             LDR      R2,[R2, #+0]
   \   0000017C   0x4790             BLX      R2
    153                    }
    154                    if (!(I2C1_C1 & I2C_C1_MST_MASK) && !(I2C1_C1 & I2C_C1_TX_MASK))
   \                     ??i2cx_isr_13: (+1)
   \   0000017E   0x....             LDR      R0,??DataTable3_13  ;; 0x40068002
   \   00000180   0x7800             LDRB     R0,[R0, #+0]
   \   00000182   0x0680             LSLS     R0,R0,#+26
   \   00000184   0xD408             BMI      ??i2cx_isr_7
   \   00000186   0x....             LDR      R0,??DataTable3_13  ;; 0x40068002
   \   00000188   0x7800             LDRB     R0,[R0, #+0]
   \   0000018A   0x06C0             LSLS     R0,R0,#+27
   \   0000018C   0xD404             BMI      ??i2cx_isr_7
    155                    {
    156                       pCallbackI2Cx (I2C1_CALLBACK, I2C_SRX_CALLBACK);
   \   0000018E   0x2108             MOVS     R1,#+8
   \   00000190   0x2002             MOVS     R0,#+2
   \   00000192   0x....             LDR      R2,??DataTable3_23
   \   00000194   0x6812             LDR      R2,[R2, #+0]
   \   00000196   0x4790             BLX      R2
    157                    }
    158                  }
    159                }
    160              }
    161            }
    162          }
   \                     ??i2cx_isr_7: (+1)
   \   00000198   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     pCallbackI2Cx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0xE000E280         DC32     0xe000e280

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0xE000E418         DC32     0xe000e418

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x40067000         DC32     0x40067000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x40067001         DC32     0x40067001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x40067002         DC32     0x40067002

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x40067005         DC32     0x40067005

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x40067006         DC32     0x40067006

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x40067007         DC32     0x40067007

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x40067008         DC32     0x40067008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x40067009         DC32     0x40067009

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \   00000000   0x4006700A         DC32     0x4006700a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \   00000000   0x4006700B         DC32     0x4006700b

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_11:
   \   00000000   0x40068000         DC32     0x40068000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_12:
   \   00000000   0x40068001         DC32     0x40068001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_13:
   \   00000000   0x40068002         DC32     0x40068002

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_14:
   \   00000000   0x40068005         DC32     0x40068005

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_15:
   \   00000000   0x40068006         DC32     0x40068006

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_16:
   \   00000000   0x40068007         DC32     0x40068007

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_17:
   \   00000000   0x40068008         DC32     0x40068008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_18:
   \   00000000   0x40068009         DC32     0x40068009

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_19:
   \   00000000   0x4006800A         DC32     0x4006800a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_20:
   \   00000000   0x4006800B         DC32     0x4006800b

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_21:
   \   00000000   0x4003F034         DC32     0x4003f034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_22:
   \   00000000   0x40067003         DC32     0x40067003

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_23:
   \   00000000   0x........         DC32     pCallbackI2Cx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_24:
   \   00000000   0x40068003         DC32     0x40068003
    163          /******************************************************************************
    164           * End of module                                                              *
    165           ******************************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      12   I2C0_Init
      12   I2C1_Init
       4   I2C_InstallCallback
       8   i2cx_isr
         8   -- Indirect call


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_11
       4  ??DataTable3_12
       4  ??DataTable3_13
       4  ??DataTable3_14
       4  ??DataTable3_15
       4  ??DataTable3_16
       4  ??DataTable3_17
       4  ??DataTable3_18
       4  ??DataTable3_19
       4  ??DataTable3_2
       4  ??DataTable3_20
       4  ??DataTable3_21
       4  ??DataTable3_22
       4  ??DataTable3_23
       4  ??DataTable3_24
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
      86  I2C0_Init
      86  I2C1_Init
      56  I2C_InstallCallback
     410  i2cx_isr
       4  pCallbackI2Cx

 
   4 bytes in section .bss
 750 bytes in section .text
 
 750 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none
