###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        23/Oct/2018  09:42:15
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        G:\存放桌面文件\离职程序\计量模块-基于MKM33Z128芯片\Freescale\KM128SWDRV_R4_1_6\src\drivers\i2c\modbus.c
#    Command line =  
#        G:\存放桌面文件\离职程序\计量模块-基于MKM33Z128芯片\Freescale\KM128SWDRV_R4_1_6\src\drivers\i2c\modbus.c
#        -D NDEBUG -lCN
#        G:\存放桌面文件\离职程序\计量模块-基于MKM33Z128芯片\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\pit_test\Release\List\
#        -o
#        G:\存放桌面文件\离职程序\计量模块-基于MKM33Z128芯片\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\pit_test\Release\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ --no_mem_idioms -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.2\arm\INC\c\DLib_Config_Normal.h" -I
#        G:\存放桌面文件\离职程序\计量模块-基于MKM33Z128芯片\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\pit_test\..\..\..\..\src\common\
#        -I
#        G:\存放桌面文件\离职程序\计量模块-基于MKM33Z128芯片\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\pit_test\..\..\..\..\src\drivers\
#        -I
#        G:\存放桌面文件\离职程序\计量模块-基于MKM33Z128芯片\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\pit_test\..\..\..\..\src\freemaster\
#        -I
#        G:\存放桌面文件\离职程序\计量模块-基于MKM33Z128芯片\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\pit_test\..\..\..\..\src\projects\pit_test\
#        -I
#        G:\存放桌面文件\离职程序\计量模块-基于MKM33Z128芯片\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\pit_test\..\..\..\..\src\toolchain\iar\
#        -On
#    List file    =  
#        G:\存放桌面文件\离职程序\计量模块-基于MKM33Z128芯片\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\pit_test\Release\List\modbus.lst
#    Object file  =  
#        G:\存放桌面文件\离职程序\计量模块-基于MKM33Z128芯片\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\pit_test\Release\Obj\modbus.o
#
###############################################################################

G:\存放桌面文件\离职程序\计量模块-基于MKM33Z128芯片\Freescale\KM128SWDRV_R4_1_6\src\drivers\i2c\modbus.c
      1          /*
      2           * modbus.c从机服务程序
      3           *
      4           */ 
      5          #include "types.h"
      6          #include "modbus.h"
      7          #include "common.h"
      8          #include "gpio/gpio.h"
      9          #include "drivers.h"
     10          #include "headers/MKM34ZA5.h" 
     11          

   \                                 In section .bss, align 4
     12          uint8 receBuf[32]; //可能这个接收的数据 有问题 不是16位
   \                     receBuf:
   \   00000000                      DS8 32

   \                                 In section .bss, align 1
     13          uint8 checkoutError;
   \                     checkoutError:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     14          uint8 rececount;
   \                     rececount:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     15          uint8 receCount;
   \                     receCount:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
     16          uint8 sendBuf[120];
   \                     sendBuf:
   \   00000000                      DS8 120

   \                                 In section .bss, align 1
     17          uint8 sendCount;
   \                     sendCount:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     18          uint8 sendPosi;
   \                     sendPosi:
   \   00000000                      DS8 1

   \                                 In section .data, align 2
     19          uint16 voltage=0x0034;
   \                     voltage:
   \   00000000   0x0034             DC16 52
     20          uint16  getRegisterVal(uint16 Addr,uint16 *tempData); 
     21          union Data
     22          {
     23          char c[4];
     24          float f;

   \                                 In section .bss, align 4
     25          }y;
   \                     y:
   \   00000000                      DS8 4
     26           
     27          //#include "usart.h"

   \                                 In section .data, align 1
     28          uint8 localAddr=1;	
   \                     localAddr:
   \   00000000   0x01               DC8 1

   \                                 In section .bss, align 1
     29          uint8 testCoil; 
   \                     testCoil:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
     30          uint16 testRegister; 
   \                     testRegister:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
     31          uint8 byteCount;
   \                     byteCount:
   \   00000000                      DS8 1
     32          

   \                                 In section .bss, align 4
     33          uint16 adcval[120];//={0x4048,0xf5c3};//={0.123,0.134};
   \                     adcval:
   \   00000000                      DS8 240
     34          
     35          extern uint8 ad_pos[120];
     36          

   \                                 In section .rodata, align 4
     37          const uint8 auchCRCHi[] = { 
   \                     auchCRCHi:
   \   00000000   0x00 0xC1          DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \   00000010   0x01 0xC0          DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \   00000020   0x01 0xC0          DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \   00000030   0x00 0xC1          DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \   00000040   0x01 0xC0          DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \   00000050   0x00 0xC1          DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \   00000060   0x00 0xC1          DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \   00000070   0x01 0xC0          DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \   00000080   0x01 0xC0          DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \   00000090   0x00 0xC1          DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \   000000A0   0x00 0xC1          DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \   000000B0   0x01 0xC0          DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \   000000C0   0x00 0xC1          DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \   000000D0   0x01 0xC0          DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \   000000E0   0x01 0xC0          DC8 1, 192, 128, 65, 0, 193, 129, 64, 0, 193, 129, 64, 1, 192, 128, 65
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x00 0xC1    
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \   000000F0   0x00 0xC1          DC8 0, 193, 129, 64, 1, 192, 128, 65, 1, 192, 128, 65, 0, 193, 129, 64
   \              0x81 0x40    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x01 0xC0    
   \              0x80 0x41    
   \              0x00 0xC1    
   \              0x81 0x40    
     38          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 
     39          0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 
     40          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 
     41          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 
     42          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 
     43          0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 
     44          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 
     45          0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 
     46          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 
     47          0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 
     48          0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 
     49          0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 
     50          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,0x80, 0x41, 0x00, 0xC1, 0x81, 0x40} ; 
     51          
     52          

   \                                 In section .rodata, align 4
     53          const uint8 auchCRCLo[] = { 
   \                     auchCRCLo:
   \   00000000   0x00 0xC0          DC8 0, 192, 193, 1, 195, 3, 2, 194, 198, 6, 7, 199, 5, 197, 196, 4, 204
   \              0xC1 0x01    
   \              0xC3 0x03    
   \              0x02 0xC2    
   \              0xC6 0x06    
   \              0x07 0xC7    
   \              0x05 0xC5    
   \              0xC4 0x04    
   \              0xCC         
   \   00000011   0x0C 0x0D          DC8 12, 13, 205, 15, 207, 206, 14, 10, 202, 203, 11, 201, 9, 8, 200
   \              0xCD 0x0F    
   \              0xCF 0xCE    
   \              0x0E 0x0A    
   \              0xCA 0xCB    
   \              0x0B 0xC9    
   \              0x09 0x08    
   \              0xC8         
   \   00000020   0xD8 0x18          DC8 216, 24, 25, 217, 27, 219, 218, 26, 30, 222, 223, 31, 221, 29, 28
   \              0x19 0xD9    
   \              0x1B 0xDB    
   \              0xDA 0x1A    
   \              0x1E 0xDE    
   \              0xDF 0x1F    
   \              0xDD 0x1D    
   \              0x1C         
   \   0000002F   0xDC 0x14          DC8 220, 20, 212, 213, 21, 215, 23, 22, 214, 210, 18, 19, 211, 17, 209
   \              0xD4 0xD5    
   \              0x15 0xD7    
   \              0x17 0x16    
   \              0xD6 0xD2    
   \              0x12 0x13    
   \              0xD3 0x11    
   \              0xD1         
   \   0000003E   0xD0 0x10          DC8 208, 16, 240, 48, 49, 241, 51, 243, 242, 50, 54, 246, 247, 55, 245
   \              0xF0 0x30    
   \              0x31 0xF1    
   \              0x33 0xF3    
   \              0xF2 0x32    
   \              0x36 0xF6    
   \              0xF7 0x37    
   \              0xF5         
   \   0000004D   0x35 0x34          DC8 53, 52, 244, 60, 252, 253, 61, 255, 63, 62, 254, 250, 58, 59, 251
   \              0xF4 0x3C    
   \              0xFC 0xFD    
   \              0x3D 0xFF    
   \              0x3F 0x3E    
   \              0xFE 0xFA    
   \              0x3A 0x3B    
   \              0xFB         
   \   0000005C   0x39 0xF9          DC8 57, 249, 248, 56, 40, 232, 233, 41, 235, 43, 42, 234, 238, 46, 47
   \              0xF8 0x38    
   \              0x28 0xE8    
   \              0xE9 0x29    
   \              0xEB 0x2B    
   \              0x2A 0xEA    
   \              0xEE 0x2E    
   \              0x2F         
   \   0000006B   0xEF 0x2D          DC8 239, 45, 237, 236, 44, 228, 36, 37, 229, 39, 231, 230, 38, 34, 226
   \              0xED 0xEC    
   \              0x2C 0xE4    
   \              0x24 0x25    
   \              0xE5 0x27    
   \              0xE7 0xE6    
   \              0x26 0x22    
   \              0xE2         
   \   0000007A   0xE3 0x23          DC8 227, 35, 225, 33, 32, 224, 160, 96, 97, 161, 99, 163, 162, 98, 102
   \              0xE1 0x21    
   \              0x20 0xE0    
   \              0xA0 0x60    
   \              0x61 0xA1    
   \              0x63 0xA3    
   \              0xA2 0x62    
   \              0x66         
   \   00000089   0xA6 0xA7          DC8 166, 167, 103, 165, 101, 100, 164, 108, 172, 173, 109, 175, 111
   \              0x67 0xA5    
   \              0x65 0x64    
   \              0xA4 0x6C    
   \              0xAC 0xAD    
   \              0x6D 0xAF    
   \              0x6F         
   \   00000096   0x6E 0xAE          DC8 110, 174, 170, 106, 107, 171, 105, 169, 168, 104, 120, 184, 185
   \              0xAA 0x6A    
   \              0x6B 0xAB    
   \              0x69 0xA9    
   \              0xA8 0x68    
   \              0x78 0xB8    
   \              0xB9         
   \   000000A3   0x79 0xBB          DC8 121, 187, 123, 122, 186, 190, 126, 127, 191, 125, 189, 188, 124
   \              0x7B 0x7A    
   \              0xBA 0xBE    
   \              0x7E 0x7F    
   \              0xBF 0x7D    
   \              0xBD 0xBC    
   \              0x7C         
   \   000000B0   0xB4 0x74          DC8 180, 116, 117, 181, 119, 183, 182, 118, 114, 178, 179, 115, 177
   \              0x75 0xB5    
   \              0x77 0xB7    
   \              0xB6 0x76    
   \              0x72 0xB2    
   \              0xB3 0x73    
   \              0xB1         
   \   000000BD   0x71 0x70          DC8 113, 112, 176, 80, 144, 145, 81, 147, 83, 82, 146, 150, 86, 87, 151
   \              0xB0 0x50    
   \              0x90 0x91    
   \              0x51 0x93    
   \              0x53 0x52    
   \              0x92 0x96    
   \              0x56 0x57    
   \              0x97         
   \   000000CC   0x55 0x95          DC8 85, 149, 148, 84, 156, 92, 93, 157, 95, 159, 158, 94, 90, 154, 155
   \              0x94 0x54    
   \              0x9C 0x5C    
   \              0x5D 0x9D    
   \              0x5F 0x9F    
   \              0x9E 0x5E    
   \              0x5A 0x9A    
   \              0x9B         
   \   000000DB   0x5B 0x99          DC8 91, 153, 89, 88, 152, 136, 72, 73, 137, 75, 139, 138, 74, 78, 142
   \              0x59 0x58    
   \              0x98 0x88    
   \              0x48 0x49    
   \              0x89 0x4B    
   \              0x8B 0x8A    
   \              0x4A 0x4E    
   \              0x8E         
   \   000000EA   0x8F 0x4F          DC8 143, 79, 141, 77, 76, 140, 68, 132, 133, 69, 135, 71, 70, 134, 130
   \              0x8D 0x4D    
   \              0x4C 0x8C    
   \              0x44 0x84    
   \              0x85 0x45    
   \              0x87 0x47    
   \              0x46 0x86    
   \              0x82         
   \   000000F9   0x42 0x43          DC8 66, 67, 131, 65, 129, 128, 64
   \              0x83 0x41    
   \              0x81 0x80    
   \              0x40         
     54          0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06,0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD, 
     55          0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 
     56          0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC, 0x14, 0xD4,0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3, 
     57          0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3,0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4, 
     58          0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 
     59          0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED,0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26, 
     60          0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60,0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67, 
     61          0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 
     62          0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E,0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5, 
     63          0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71,0x70, 0xB0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92, 
     64          0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 
     65          0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B,0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C, 
     66          0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,0x43, 0x83, 0x41, 0x81, 0x80, 0x40} ;

   \                                 In section .text, align 2, keep-with-next
     67          uint16   crc16(uint8 *puchMsg, uint16 usDataLen) //*puchMsg要进行CRC校验的消息 
     68          {                                               // usDataLen消息中字节数
   \                     crc16: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0x0002             MOVS     R2,R0
     69          	uint8 uchCRCHi = 0xFF ;/*高CRC字节初始化*/ 
   \   00000004   0x20FF             MOVS     R0,#+255
     70                  
     71                  
     72                  
     73          	uint8 uchCRCLo = 0xFF ; /*低CRC初始化*/
   \   00000006   0x24FF             MOVS     R4,#+255
     74          	uint32 uIndex ; 
     75          	while (usDataLen--) 
   \                     ??crc16_0: (+1)
   \   00000008   0x000D             MOVS     R5,R1
   \   0000000A   0x1E69             SUBS     R1,R5,#+1
   \   0000000C   0xB2AD             UXTH     R5,R5
   \   0000000E   0x2D00             CMP      R5,#+0
   \   00000010   0xD00C             BEQ      ??crc16_1
     76          	{ 
     77          		uIndex =uchCRCHi ^ *puchMsg++ ; //16位的CRC寄存器高8位与第一个8位二进制数据 相异或
   \   00000012   0xB2C0             UXTB     R0,R0
   \   00000014   0x7815             LDRB     R5,[R2, #+0]
   \   00000016   0x4045             EORS     R5,R5,R0
   \   00000018   0x002B             MOVS     R3,R5
   \   0000001A   0x1C52             ADDS     R2,R2,#+1
     78          		uchCRCHi = uchCRCLo ^ auchCRCHi[uIndex] ; 
   \   0000001C   0x....             LDR      R5,??DataTable3
   \   0000001E   0x5CED             LDRB     R5,[R5, R3]
   \   00000020   0x4065             EORS     R5,R5,R4
   \   00000022   0x0028             MOVS     R0,R5
     79          		uchCRCLo = auchCRCLo[uIndex] ; 
   \   00000024   0x....             LDR      R5,??DataTable4
   \   00000026   0x5CED             LDRB     R5,[R5, R3]
   \   00000028   0x002C             MOVS     R4,R5
   \   0000002A   0xE7ED             B        ??crc16_0
     80          	} 
     81          	return (uchCRCHi<<8|uchCRCLo) ; 
   \                     ??crc16_1: (+1)
   \   0000002C   0xB2C0             UXTB     R0,R0
   \   0000002E   0x0200             LSLS     R0,R0,#+8
   \   00000030   0xB2E4             UXTB     R4,R4
   \   00000032   0x4320             ORRS     R0,R0,R4
   \   00000034   0xB280             UXTH     R0,R0
   \   00000036   0xBD30             POP      {R4,R5,PC}       ;; return
     82          }//uint16 crc16(uint8 *puchMsg, uint16 usDataLen)
     83          
     84          

   \                                 In section .text, align 2, keep-with-next
     85          void checkComm0Modbus(void)
     86          {
   \                     checkComm0Modbus: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     87          // y.f=3.14;
     88          // adcval[0]=y.c[0];
     89          uint16 crcData;
     90          uint16 tempData;
     91          if(receCount>4)
   \   00000002   0x....             LDR      R0,??DataTable3_1
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x2805             CMP      R0,#+5
   \   00000008   0xDB4E             BLT      ??checkComm0Modbus_0
     92          {
     93            switch(receBuf[1])
   \   0000000A   0x....             LDR      R0,??DataTable3_2
   \   0000000C   0x7840             LDRB     R0,[R0, #+1]
   \   0000000E   0x2803             CMP      R0,#+3
   \   00000010   0xD001             BEQ      ??checkComm0Modbus_1
   \   00000012   0x2805             CMP      R0,#+5
   \   00000014   0xD142             BNE      ??checkComm0Modbus_2
     94            {
     95            //case 1:
     96            case 3:
     97            case 5:
     98              if(receCount>=8)
   \                     ??checkComm0Modbus_1: (+1)
   \   00000016   0x....             LDR      R0,??DataTable3_1
   \   00000018   0x7800             LDRB     R0,[R0, #+0]
   \   0000001A   0x2808             CMP      R0,#+8
   \   0000001C   0xDB3D             BLT      ??checkComm0Modbus_3
     99              {
    100                
    101              UART0_BASE_PTR->C2&=~(1<<2);//关接收
   \   0000001E   0x....             LDR      R0,??DataTable4_1  ;; 0x4006a003
   \   00000020   0x7800             LDRB     R0,[R0, #+0]
   \   00000022   0x21FB             MOVS     R1,#+251
   \   00000024   0x4001             ANDS     R1,R1,R0
   \   00000026   0x....             LDR      R0,??DataTable4_1  ;; 0x4006a003
   \   00000028   0x7001             STRB     R1,[R0, #+0]
    102                //GPIO_Set(GPIOD,PIN4);//拉高发送
    103                receCount=0;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x....             LDR      R1,??DataTable3_1
   \   0000002E   0x7008             STRB     R0,[R1, #+0]
    104                if(receBuf[0]==localAddr && checkoutError==0) //判断是不是本机地址
   \   00000030   0x....             LDR      R0,??DataTable3_2
   \   00000032   0x7800             LDRB     R0,[R0, #+0]
   \   00000034   0x....             LDR      R1,??DataTable4_2
   \   00000036   0x7809             LDRB     R1,[R1, #+0]
   \   00000038   0x4288             CMP      R0,R1
   \   0000003A   0xD108             BNE      ??checkComm0Modbus_4
   \   0000003C   0x....             LDR      R0,??DataTable4_3
   \   0000003E   0x7800             LDRB     R0,[R0, #+0]
   \   00000040   0x2800             CMP      R0,#+0
   \   00000042   0xD104             BNE      ??checkComm0Modbus_4
    105                 crcData=crc16(receBuf,6); //计算校验对不对 // 后来要加上
   \   00000044   0x2106             MOVS     R1,#+6
   \   00000046   0x....             LDR      R0,??DataTable3_2
   \   00000048   0x.... 0x....      BL       crc16
   \   0000004C   0x0004             MOVS     R4,R0
    106                 if(crcData == receBuf[7]+(receBuf[6]<<8)) //校验正确
   \                     ??checkComm0Modbus_4: (+1)
   \   0000004E   0xB2A4             UXTH     R4,R4
   \   00000050   0x....             LDR      R0,??DataTable3_2
   \   00000052   0x79C0             LDRB     R0,[R0, #+7]
   \   00000054   0x....             LDR      R1,??DataTable3_2
   \   00000056   0x7989             LDRB     R1,[R1, #+6]
   \   00000058   0x0209             LSLS     R1,R1,#+8
   \   0000005A   0x1840             ADDS     R0,R0,R1
   \   0000005C   0x4284             CMP      R4,R0
   \   0000005E   0xD10A             BNE      ??checkComm0Modbus_5
    107                   if(receBuf[1]==1) //功能号是 01
   \   00000060   0x....             LDR      R0,??DataTable3_2
   \   00000062   0x7840             LDRB     R0,[R0, #+1]
   \   00000064   0x2801             CMP      R0,#+1
   \   00000066   0xD006             BEQ      ??checkComm0Modbus_5
    108                   {
    109                     // readCoil();//读线圈
    110                   }
    111                 else if(receBuf[1]==3)
   \   00000068   0x....             LDR      R0,??DataTable3_2
   \   0000006A   0x7840             LDRB     R0,[R0, #+1]
   \   0000006C   0x2803             CMP      R0,#+3
   \   0000006E   0xD102             BNE      ??checkComm0Modbus_6
    112                 {
    113                 readRegisrers();//读寄存器  /*读寄存器的过程手被关了*/
   \   00000070   0x.... 0x....      BL       readRegisrers
   \   00000074   0xE7FF             B        ??checkComm0Modbus_5
    114                 }
    115                 else if(receBuf[1]==5)
    116                 {
    117                 // forceSingleCoil();//设置单个线圈 
    118                 }
    119                 rececount=0;
   \                     ??checkComm0Modbus_6: (+1)
   \                     ??checkComm0Modbus_5: (+1)
   \   00000076   0x2000             MOVS     R0,#+0
   \   00000078   0x....             LDR      R1,??DataTable4_4
   \   0000007A   0x7008             STRB     R0,[R1, #+0]
    120                 checkoutError=0;//表示一帧已经结束
   \   0000007C   0x2000             MOVS     R0,#+0
   \   0000007E   0x....             LDR      R1,??DataTable4_3
   \   00000080   0x7008             STRB     R0,[R1, #+0]
    121              UART0_BASE_PTR->C2|=(1<<2);//开接收
   \   00000082   0x....             LDR      R0,??DataTable4_1  ;; 0x4006a003
   \   00000084   0x7800             LDRB     R0,[R0, #+0]
   \   00000086   0x2104             MOVS     R1,#+4
   \   00000088   0x4301             ORRS     R1,R1,R0
   \   0000008A   0x....             LDR      R0,??DataTable4_1  ;; 0x4006a003
   \   0000008C   0x7001             STRB     R1,[R0, #+0]
    122                
    123               //  while(!UART_TxIdle(UART0));
    124                  GPIO_Clr(GPIOD,PIN4);//拉低接收
   \   0000008E   0x....             LDR      R0,??DataTable4_5  ;; 0x400ff003
   \   00000090   0x7800             LDRB     R0,[R0, #+0]
   \   00000092   0x21EF             MOVS     R1,#+239
   \   00000094   0x4001             ANDS     R1,R1,R0
   \   00000096   0x....             LDR      R0,??DataTable4_5  ;; 0x400ff003
   \   00000098   0x7001             STRB     R1,[R0, #+0]
    125              } break;
   \                     ??checkComm0Modbus_3: (+1)
   \   0000009A   0xE005             B        ??checkComm0Modbus_0
    126              default:
    127                receCount = 0;
   \                     ??checkComm0Modbus_2: (+1)
   \   0000009C   0x2000             MOVS     R0,#+0
   \   0000009E   0x....             LDR      R1,??DataTable3_1
   \   000000A0   0x7008             STRB     R0,[R1, #+0]
    128                checkoutError =0 ;
   \   000000A2   0x2000             MOVS     R0,#+0
   \   000000A4   0x....             LDR      R1,??DataTable4_3
   \   000000A6   0x7008             STRB     R0,[R1, #+0]
    129                break;	
    130              
    131          
    132            }
    133          }
    134          }
   \                     ??checkComm0Modbus_0: (+1)
   \   000000A8   0xBD10             POP      {R4,PC}          ;; return
    135          

   \                                 In section .text, align 2, keep-with-next
    136          void readRegisrers(void)
    137          {
   \                     readRegisrers: (+1)
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
    138                y.f=voltage3;
   \   00000002   0x....             LDR      R0,??DataTable4_6
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x....             LDR      R1,??DataTable4_7
   \   00000008   0x6008             STR      R0,[R1, #+0]
    139                adcval[0]=y.c[0]+(y.c[1]<<8);
   \   0000000A   0x....             LDR      R0,??DataTable4_7
   \   0000000C   0x7800             LDRB     R0,[R0, #+0]
   \   0000000E   0x....             LDR      R1,??DataTable4_7
   \   00000010   0x7849             LDRB     R1,[R1, #+1]
   \   00000012   0x0209             LSLS     R1,R1,#+8
   \   00000014   0x1840             ADDS     R0,R0,R1
   \   00000016   0x....             LDR      R1,??DataTable4_8
   \   00000018   0x8008             STRH     R0,[R1, #+0]
    140                adcval[1]=y.c[2]+(y.c[3]<<8);
   \   0000001A   0x....             LDR      R0,??DataTable4_7
   \   0000001C   0x7880             LDRB     R0,[R0, #+2]
   \   0000001E   0x....             LDR      R1,??DataTable4_7
   \   00000020   0x78C9             LDRB     R1,[R1, #+3]
   \   00000022   0x0209             LSLS     R1,R1,#+8
   \   00000024   0x1840             ADDS     R0,R0,R1
   \   00000026   0x....             LDR      R1,??DataTable4_8
   \   00000028   0x8048             STRH     R0,[R1, #+2]
    141          uint8 addr;
    142          uint8 tempAddr;
    143          uint16 crcData;
    144          uint8 readCount;//读到的两个字节数据
    145          uint8 byteCount;//换算成的字节
    146          uint16 i=0;
   \   0000002A   0x2500             MOVS     R5,#+0
    147          uint16 tempData=0;
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x4669             MOV      R1,SP
   \   00000030   0x8048             STRH     R0,[R1, #+2]
    148          //addr=(receBuf[2]<<8)+receBuf[3];
    149          addr=receBuf[3];
   \   00000032   0x4668             MOV      R0,SP
   \   00000034   0x....             LDR      R1,??DataTable3_2
   \   00000036   0x78C9             LDRB     R1,[R1, #+3]
   \   00000038   0x7041             STRB     R1,[R0, #+1]
    150          tempAddr=addr;
   \   0000003A   0x4668             MOV      R0,SP
   \   0000003C   0x7840             LDRB     R0,[R0, #+1]
   \   0000003E   0x0006             MOVS     R6,R0
    151          readCount=receBuf[5];//数据字节数
   \   00000040   0x4668             MOV      R0,SP
   \   00000042   0x....             LDR      R1,??DataTable3_2
   \   00000044   0x7949             LDRB     R1,[R1, #+5]
   \   00000046   0x7001             STRB     R1,[R0, #+0]
    152          //readCount=(receBuf[4]<<8)+receBuf[5];
    153          byteCount=readCount*2;
   \   00000048   0x4668             MOV      R0,SP
   \   0000004A   0x7800             LDRB     R0,[R0, #+0]
   \   0000004C   0x2102             MOVS     R1,#+2
   \   0000004E   0x4348             MULS     R0,R1,R0
   \   00000050   0x0004             MOVS     R4,R0
    154          for(i=0;i<byteCount;i+=2,tempAddr++)//地址加1数据加2
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0x0005             MOVS     R5,R0
   \                     ??readRegisrers_0: (+1)
   \   00000056   0x0020             MOVS     R0,R4
   \   00000058   0xB2C0             UXTB     R0,R0
   \   0000005A   0xB2AD             UXTH     R5,R5
   \   0000005C   0xB280             UXTH     R0,R0
   \   0000005E   0x4285             CMP      R5,R0
   \   00000060   0xD217             BCS      ??readRegisrers_1
    155          {
    156          getRegisterVal(tempAddr, &tempData);
   \   00000062   0xA900             ADD      R1,SP,#+0
   \   00000064   0x1C89             ADDS     R1,R1,#+2
   \   00000066   0xB2F6             UXTB     R6,R6
   \   00000068   0x0030             MOVS     R0,R6
   \   0000006A   0xB280             UXTH     R0,R0
   \   0000006C   0x.... 0x....      BL       getRegisterVal
    157          sendBuf[i+3]=tempData>>8;
   \   00000070   0x4668             MOV      R0,SP
   \   00000072   0x8840             LDRH     R0,[R0, #+2]
   \   00000074   0xB280             UXTH     R0,R0
   \   00000076   0x0A00             LSRS     R0,R0,#+8
   \   00000078   0x....             LDR      R1,??DataTable4_9
   \   0000007A   0xB2AD             UXTH     R5,R5
   \   0000007C   0x1949             ADDS     R1,R1,R5
   \   0000007E   0x70C8             STRB     R0,[R1, #+3]
    158          sendBuf[i+4]=tempData&0xff;
   \   00000080   0x4668             MOV      R0,SP
   \   00000082   0x8840             LDRH     R0,[R0, #+2]
   \   00000084   0x....             LDR      R1,??DataTable4_9
   \   00000086   0xB2AD             UXTH     R5,R5
   \   00000088   0x1949             ADDS     R1,R1,R5
   \   0000008A   0x7108             STRB     R0,[R1, #+4]
    159          }
   \   0000008C   0x1CAD             ADDS     R5,R5,#+2
   \   0000008E   0x1C76             ADDS     R6,R6,#+1
   \   00000090   0xE7E1             B        ??readRegisrers_0
    160          //sendBuf[i+3]=voltage>>8;//发送电压数据 高字节
    161          //sendBuf[i+4]=voltage&0xff;
    162          
    163          sendBuf[0]=localAddr;//从机地址
   \                     ??readRegisrers_1: (+1)
   \   00000092   0x....             LDR      R0,??DataTable4_2
   \   00000094   0x7800             LDRB     R0,[R0, #+0]
   \   00000096   0x....             LDR      R1,??DataTable4_9
   \   00000098   0x7008             STRB     R0,[R1, #+0]
    164          sendBuf[1]=receBuf[1]; //03功能号
   \   0000009A   0x....             LDR      R0,??DataTable3_2
   \   0000009C   0x7840             LDRB     R0,[R0, #+1]
   \   0000009E   0x....             LDR      R1,??DataTable4_9
   \   000000A0   0x7048             STRB     R0,[R1, #+1]
    165          sendBuf[2]=byteCount;//数据字节数
   \   000000A2   0x....             LDR      R0,??DataTable4_9
   \   000000A4   0x7084             STRB     R4,[R0, #+2]
    166          byteCount += 3; //3+4  //招2个数据
   \   000000A6   0x1CE4             ADDS     R4,R4,#+3
    167          crcData=crc16(sendBuf,byteCount);//
   \   000000A8   0xB2E4             UXTB     R4,R4
   \   000000AA   0x0021             MOVS     R1,R4
   \   000000AC   0xB289             UXTH     R1,R1
   \   000000AE   0x....             LDR      R0,??DataTable4_9
   \   000000B0   0x.... 0x....      BL       crc16
   \   000000B4   0x0007             MOVS     R7,R0
    168          sendBuf[byteCount] = crcData >> 8; //高字节
   \   000000B6   0x0038             MOVS     R0,R7
   \   000000B8   0xB280             UXTH     R0,R0
   \   000000BA   0x0A00             LSRS     R0,R0,#+8
   \   000000BC   0x....             LDR      R1,??DataTable4_9
   \   000000BE   0xB2E4             UXTB     R4,R4
   \   000000C0   0x5508             STRB     R0,[R1, R4]
    169          byteCount++;//sendBuf[]
   \   000000C2   0x1C64             ADDS     R4,R4,#+1
    170          sendBuf[byteCount]=crcData&0xff;//低字节
   \   000000C4   0x0038             MOVS     R0,R7
   \   000000C6   0x....             LDR      R1,??DataTable4_9
   \   000000C8   0xB2E4             UXTB     R4,R4
   \   000000CA   0x5508             STRB     R0,[R1, R4]
    171          sendCount=byteCount+2;
   \   000000CC   0x0020             MOVS     R0,R4
   \   000000CE   0x1C80             ADDS     R0,R0,#+2
   \   000000D0   0x....             LDR      R1,??DataTable4_10
   \   000000D2   0x7008             STRB     R0,[R1, #+0]
    172            
    173          beginSend();
   \   000000D4   0x.... 0x....      BL       beginSend
    174          }
   \   000000D8   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    175          

   \                                 In section .text, align 2, keep-with-next
    176          void beginSend(void)
    177          {
   \                     beginSend: (+1)
   \   00000000   0xB500             PUSH     {LR}
    178            GPIO_Set(GPIOD,PIN4);//设为发送
   \   00000002   0x....             LDR      R0,??DataTable4_5  ;; 0x400ff003
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x2110             MOVS     R1,#+16
   \   00000008   0x4301             ORRS     R1,R1,R0
   \   0000000A   0x....             LDR      R0,??DataTable4_5  ;; 0x400ff003
   \   0000000C   0x7001             STRB     R1,[R0, #+0]
    179            sendPosi = 0;//之前的
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x....             LDR      R1,??DataTable4_11
   \   00000012   0x7008             STRB     R0,[R1, #+0]
    180           
    181           do
    182            {
    183             while(!UART_TxIdle(UART0));
   \                     ??beginSend_0: (+1)
   \   00000014   0x....             LDR      R0,??DataTable4_12  ;; 0x4006a004
   \   00000016   0x7800             LDRB     R0,[R0, #+0]
   \   00000018   0x0640             LSLS     R0,R0,#+25
   \   0000001A   0xD5FB             BPL      ??beginSend_0
    184            UART_PutChar(UART0,sendBuf[sendPosi]);
   \   0000001C   0x....             LDR      R0,??DataTable4_9
   \   0000001E   0x....             LDR      R1,??DataTable4_11
   \   00000020   0x7809             LDRB     R1,[R1, #+0]
   \   00000022   0x5C40             LDRB     R0,[R0, R1]
   \   00000024   0x....             LDR      R1,??DataTable4_13  ;; 0x4006a007
   \   00000026   0x7008             STRB     R0,[R1, #+0]
    185            sendPosi++; 
   \   00000028   0x....             LDR      R0,??DataTable4_11
   \   0000002A   0x7800             LDRB     R0,[R0, #+0]
   \   0000002C   0x1C40             ADDS     R0,R0,#+1
   \   0000002E   0x....             LDR      R1,??DataTable4_11
   \   00000030   0x7008             STRB     R0,[R1, #+0]
    186            }while(sendPosi <sendCount);
   \   00000032   0x....             LDR      R0,??DataTable4_11
   \   00000034   0x7800             LDRB     R0,[R0, #+0]
   \   00000036   0x....             LDR      R1,??DataTable4_10
   \   00000038   0x7809             LDRB     R1,[R1, #+0]
   \   0000003A   0x4288             CMP      R0,R1
   \   0000003C   0xD3EA             BCC      ??beginSend_0
    187          //   if(sendCount>1)
    188          //  sendCount--;
    189          //  UART_PutChar(UART0,sendBuf[0]);
    190            
    191          }
   \   0000003E   0xBD00             POP      {PC}             ;; return
    192          

   \                                 In section .text, align 2, keep-with-next
    193          uint16  getRegisterVal(uint16 addr,uint16 *tempData)  //addr数据地址 
    194          {
   \                     getRegisterVal: (+1)
   \   00000000   0xB5FC             PUSH     {R2-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    195           uint16 result=0;
   \   00000006   0x2600             MOVS     R6,#+0
    196           uint16 ge,shi;
    197           ge=addr%10;
   \   00000008   0x4668             MOV      R0,SP
   \   0000000A   0x9000             STR      R0,[SP, #+0]
   \   0000000C   0xB2A4             UXTH     R4,R4
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0x210A             MOVS     R1,#+10
   \   00000012   0x.... 0x....      BL       __aeabi_idivmod
   \   00000016   0x9800             LDR      R0,[SP, #+0]
   \   00000018   0x8081             STRH     R1,[R0, #+4]
    198           shi=addr/10;
   \   0000001A   0xB2A4             UXTH     R4,R4
   \   0000001C   0x0020             MOVS     R0,R4
   \   0000001E   0x210A             MOVS     R1,#+10
   \   00000020   0x.... 0x....      BL       __aeabi_idiv
   \   00000024   0x0007             MOVS     R7,R0
    199           switch(ge&0xff)
   \   00000026   0x4668             MOV      R0,SP
   \   00000028   0x8880             LDRH     R0,[R0, #+4]
   \   0000002A   0xB2C0             UXTB     R0,R0
   \   0000002C   0xB2C0             UXTB     R0,R0
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xD00E             BEQ      ??getRegisterVal_0
   \   00000032   0x2802             CMP      R0,#+2
   \   00000034   0xD01D             BEQ      ??getRegisterVal_1
   \   00000036   0xD312             BCC      ??getRegisterVal_2
   \   00000038   0x2804             CMP      R0,#+4
   \   0000003A   0xD02E             BEQ      ??getRegisterVal_3
   \   0000003C   0xD323             BCC      ??getRegisterVal_4
   \   0000003E   0x2806             CMP      R0,#+6
   \   00000040   0xD03F             BEQ      ??getRegisterVal_5
   \   00000042   0xD334             BCC      ??getRegisterVal_6
   \   00000044   0x2808             CMP      R0,#+8
   \   00000046   0xD050             BEQ      ??getRegisterVal_7
   \   00000048   0xD345             BCC      ??getRegisterVal_8
   \   0000004A   0x2809             CMP      R0,#+9
   \   0000004C   0xD057             BEQ      ??getRegisterVal_9
   \   0000004E   0xE060             B        ??getRegisterVal_10
    200            {
    201           case 0:
    202                  *tempData=adcval[shi*10];
   \                     ??getRegisterVal_0: (+1)
   \   00000050   0x....             LDR      R0,??DataTable4_8
   \   00000052   0xB2BF             UXTH     R7,R7
   \   00000054   0x2114             MOVS     R1,#+20
   \   00000056   0x4379             MULS     R1,R7,R1
   \   00000058   0x5A40             LDRH     R0,[R0, R1]
   \   0000005A   0x8028             STRH     R0,[R5, #+0]
    203                  break;
   \   0000005C   0xE059             B        ??getRegisterVal_11
    204           case 1:
    205                  *tempData=adcval[shi*10+1];
   \                     ??getRegisterVal_2: (+1)
   \   0000005E   0x....             LDR      R0,??DataTable4_8
   \   00000060   0xB2BF             UXTH     R7,R7
   \   00000062   0x210A             MOVS     R1,#+10
   \   00000064   0x4379             MULS     R1,R7,R1
   \   00000066   0x2202             MOVS     R2,#+2
   \   00000068   0x4351             MULS     R1,R2,R1
   \   0000006A   0x1840             ADDS     R0,R0,R1
   \   0000006C   0x8840             LDRH     R0,[R0, #+2]
   \   0000006E   0x8028             STRH     R0,[R5, #+0]
    206                  break;
   \   00000070   0xE04F             B        ??getRegisterVal_11
    207           case 2:
    208                  *tempData=adcval[shi*10+2];
   \                     ??getRegisterVal_1: (+1)
   \   00000072   0x....             LDR      R0,??DataTable4_8
   \   00000074   0xB2BF             UXTH     R7,R7
   \   00000076   0x210A             MOVS     R1,#+10
   \   00000078   0x4379             MULS     R1,R7,R1
   \   0000007A   0x2202             MOVS     R2,#+2
   \   0000007C   0x4351             MULS     R1,R2,R1
   \   0000007E   0x1840             ADDS     R0,R0,R1
   \   00000080   0x8880             LDRH     R0,[R0, #+4]
   \   00000082   0x8028             STRH     R0,[R5, #+0]
    209                  break;
   \   00000084   0xE045             B        ??getRegisterVal_11
    210           case 3: 
    211                  *tempData=adcval[shi*10+3];
   \                     ??getRegisterVal_4: (+1)
   \   00000086   0x....             LDR      R0,??DataTable4_8
   \   00000088   0xB2BF             UXTH     R7,R7
   \   0000008A   0x210A             MOVS     R1,#+10
   \   0000008C   0x4379             MULS     R1,R7,R1
   \   0000008E   0x2202             MOVS     R2,#+2
   \   00000090   0x4351             MULS     R1,R2,R1
   \   00000092   0x1840             ADDS     R0,R0,R1
   \   00000094   0x88C0             LDRH     R0,[R0, #+6]
   \   00000096   0x8028             STRH     R0,[R5, #+0]
    212                  break;
   \   00000098   0xE03B             B        ??getRegisterVal_11
    213           case 4: 
    214                  *tempData=adcval[shi*10+4];
   \                     ??getRegisterVal_3: (+1)
   \   0000009A   0x....             LDR      R0,??DataTable4_8
   \   0000009C   0xB2BF             UXTH     R7,R7
   \   0000009E   0x210A             MOVS     R1,#+10
   \   000000A0   0x4379             MULS     R1,R7,R1
   \   000000A2   0x2202             MOVS     R2,#+2
   \   000000A4   0x4351             MULS     R1,R2,R1
   \   000000A6   0x1840             ADDS     R0,R0,R1
   \   000000A8   0x8900             LDRH     R0,[R0, #+8]
   \   000000AA   0x8028             STRH     R0,[R5, #+0]
    215                  break;
   \   000000AC   0xE031             B        ??getRegisterVal_11
    216           case 5:
    217                  *tempData=adcval[shi*10+5];
   \                     ??getRegisterVal_6: (+1)
   \   000000AE   0x....             LDR      R0,??DataTable4_8
   \   000000B0   0xB2BF             UXTH     R7,R7
   \   000000B2   0x210A             MOVS     R1,#+10
   \   000000B4   0x4379             MULS     R1,R7,R1
   \   000000B6   0x2202             MOVS     R2,#+2
   \   000000B8   0x4351             MULS     R1,R2,R1
   \   000000BA   0x1840             ADDS     R0,R0,R1
   \   000000BC   0x8940             LDRH     R0,[R0, #+10]
   \   000000BE   0x8028             STRH     R0,[R5, #+0]
    218                  break;
   \   000000C0   0xE027             B        ??getRegisterVal_11
    219           case 6:
    220                  *tempData=adcval[shi*10+6];
   \                     ??getRegisterVal_5: (+1)
   \   000000C2   0x....             LDR      R0,??DataTable4_8
   \   000000C4   0xB2BF             UXTH     R7,R7
   \   000000C6   0x210A             MOVS     R1,#+10
   \   000000C8   0x4379             MULS     R1,R7,R1
   \   000000CA   0x2202             MOVS     R2,#+2
   \   000000CC   0x4351             MULS     R1,R2,R1
   \   000000CE   0x1840             ADDS     R0,R0,R1
   \   000000D0   0x8980             LDRH     R0,[R0, #+12]
   \   000000D2   0x8028             STRH     R0,[R5, #+0]
    221                  break;
   \   000000D4   0xE01D             B        ??getRegisterVal_11
    222           case 7:
    223                  *tempData=adcval[shi*10+7];
   \                     ??getRegisterVal_8: (+1)
   \   000000D6   0x....             LDR      R0,??DataTable4_8
   \   000000D8   0xB2BF             UXTH     R7,R7
   \   000000DA   0x210A             MOVS     R1,#+10
   \   000000DC   0x4379             MULS     R1,R7,R1
   \   000000DE   0x2202             MOVS     R2,#+2
   \   000000E0   0x4351             MULS     R1,R2,R1
   \   000000E2   0x1840             ADDS     R0,R0,R1
   \   000000E4   0x89C0             LDRH     R0,[R0, #+14]
   \   000000E6   0x8028             STRH     R0,[R5, #+0]
    224                  break;
   \   000000E8   0xE013             B        ??getRegisterVal_11
    225           case 8:
    226                  *tempData=adcval[shi*10+8];
   \                     ??getRegisterVal_7: (+1)
   \   000000EA   0x....             LDR      R0,??DataTable4_8
   \   000000EC   0xB2BF             UXTH     R7,R7
   \   000000EE   0x210A             MOVS     R1,#+10
   \   000000F0   0x4379             MULS     R1,R7,R1
   \   000000F2   0x2202             MOVS     R2,#+2
   \   000000F4   0x4351             MULS     R1,R2,R1
   \   000000F6   0x1840             ADDS     R0,R0,R1
   \   000000F8   0x8A00             LDRH     R0,[R0, #+16]
   \   000000FA   0x8028             STRH     R0,[R5, #+0]
    227                  break;
   \   000000FC   0xE009             B        ??getRegisterVal_11
    228           case 9: 
    229                  *tempData=adcval[shi*10+9];
   \                     ??getRegisterVal_9: (+1)
   \   000000FE   0x....             LDR      R0,??DataTable4_8
   \   00000100   0xB2BF             UXTH     R7,R7
   \   00000102   0x210A             MOVS     R1,#+10
   \   00000104   0x4379             MULS     R1,R7,R1
   \   00000106   0x2202             MOVS     R2,#+2
   \   00000108   0x4351             MULS     R1,R2,R1
   \   0000010A   0x1840             ADDS     R0,R0,R1
   \   0000010C   0x8A40             LDRH     R0,[R0, #+18]
   \   0000010E   0x8028             STRH     R0,[R5, #+0]
    230                  break;
   \   00000110   0xE7FF             B        ??getRegisterVal_11
    231           default:
    232                 break;
    233              }
    234            return result; 
   \                     ??getRegisterVal_10: (+1)
   \                     ??getRegisterVal_11: (+1)
   \   00000112   0x0030             MOVS     R0,R6
   \   00000114   0xB280             UXTH     R0,R0
   \   00000116   0xBDF6             POP      {R1,R2,R4-R7,PC}  ;; return
    235          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     auchCRCHi

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     receCount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     receBuf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     auchCRCLo

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x4006A003         DC32     0x4006a003

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x........         DC32     localAddr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     checkoutError

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x........         DC32     rececount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x400FF003         DC32     0x400ff003

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x........         DC32     voltage3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x........         DC32     y

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0x........         DC32     adcval

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \   00000000   0x........         DC32     sendBuf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \   00000000   0x........         DC32     sendCount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_11:
   \   00000000   0x........         DC32     sendPosi

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_12:
   \   00000000   0x4006A004         DC32     0x4006a004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_13:
   \   00000000   0x4006A007         DC32     0x4006a007

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       4   beginSend
       8   checkComm0Modbus
         8   -> crc16
         8   -> readRegisrers
      12   crc16
      28   getRegisterVal
        28 __aeabi_idiv
        28 __aeabi_idivmod
      24   readRegisrers
        24   -> beginSend
        24   -> crc16
        24   -> getRegisterVal


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_11
       4  ??DataTable4_12
       4  ??DataTable4_13
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
     240  adcval
     256  auchCRCHi
     256  auchCRCLo
      64  beginSend
       1  byteCount
     170  checkComm0Modbus
       1  checkoutError
      56  crc16
     280  getRegisterVal
       1  localAddr
     218  readRegisrers
      32  receBuf
       1  receCount
       1  rececount
     120  sendBuf
       1  sendCount
       1  sendPosi
       1  testCoil
       2  testRegister
       2  voltage
       4  y

 
 405 bytes in section .bss
   3 bytes in section .data
 512 bytes in section .rodata
 856 bytes in section .text
 
 856 bytes of CODE  memory
 512 bytes of CONST memory
 408 bytes of DATA  memory

Errors: none
Warnings: 1
