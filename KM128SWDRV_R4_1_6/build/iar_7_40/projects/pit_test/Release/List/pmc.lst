###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        21/Mar/2017  14:13:03
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\pmc\pmc.c
#    Command line =  
#        C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\pmc\pmc.c -D NDEBUG -lCN
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\pit_test\Release\List\
#        -o
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\pit_test\Release\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ --no_mem_idioms -e --fpu=None --dlib_config
#        D:\IAR7.4anzhuang\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\pit_test\..\..\..\..\src\common\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\pit_test\..\..\..\..\src\drivers\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\pit_test\..\..\..\..\src\freemaster\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\pit_test\..\..\..\..\src\projects\pit_test\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\pit_test\..\..\..\..\src\toolchain\iar\
#        -On
#    List file    =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\pit_test\Release\List\pmc.lst
#    Object file  =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\pit_test\Release\Obj\pmc.o
#
###############################################################################

C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\pmc\pmc.c
      1          /******************************************************************************
      2           * (c) Copyright 2010-2015, Freescale Semiconductor Inc.
      3           * ALL RIGHTS RESERVED.
      4           ***************************************************************************//*!
      5           * @file      pmc.c
      6           * @version   1.0.3.0
      7           * @date      May-4-2012
      8           * @brief     Power Management Controller (PMC) driver source code.
      9           ******************************************************************************/
     10          #include "common.h"
     11          #include "pmc.h"
     12          
     13          /******************************************************************************
     14           * data type definitions                                                      *
     15           ******************************************************************************/

   \                                 In section .bss, align 4
     16          static PMC_CALLBACK pCallbackPMC;
   \                     pCallbackPMC:
   \   00000000                      DS8 4
     17          
     18          /******************************************************************************
     19           * public function definitions                                                *
     20           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     21          void PMC_Init (tLVD lvd, tREG reg, uint8 ip, PMC_CALLBACK pCallback)
     22          {
   \                     PMC_Init: (+1)
   \   00000000   0xB503             PUSH     {R0,R1,LR}
     23            if (pCallback) { pCallbackPMC = pCallback; NVIC_SetIsr(INT_PMC,ip); }
   \   00000002   0x0018             MOVS     R0,R3
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD014             BEQ      ??PMC_Init_0
   \   00000008   0x....             LDR      R0,??DataTable1
   \   0000000A   0x6003             STR      R3,[R0, #+0]
   \   0000000C   0x....             LDR      R0,??DataTable1_1  ;; 0xe000e280
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0x2140             MOVS     R1,#+64
   \   00000012   0x4301             ORRS     R1,R1,R0
   \   00000014   0x....             LDR      R0,??DataTable1_1  ;; 0xe000e280
   \   00000016   0x6001             STR      R1,[R0, #+0]
   \   00000018   0x....             LDR      R0,??DataTable1_2  ;; 0xe000e100
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0x2140             MOVS     R1,#+64
   \   0000001E   0x4301             ORRS     R1,R1,R0
   \   00000020   0x....             LDR      R0,??DataTable1_2  ;; 0xe000e100
   \   00000022   0x6001             STR      R1,[R0, #+0]
   \   00000024   0x....             LDR      R0,??DataTable1_3  ;; 0xe000e404
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0xB2D2             UXTB     R2,R2
   \   0000002A   0x0591             LSLS     R1,R2,#+22
   \   0000002C   0x4301             ORRS     R1,R1,R0
   \   0000002E   0x....             LDR      R0,??DataTable1_3  ;; 0xe000e404
   \   00000030   0x6001             STR      R1,[R0, #+0]
     24            PMC_LVDSC1 = lvd.LVDSC1;
   \                     ??PMC_Init_0: (+1)
   \   00000032   0x4668             MOV      R0,SP
   \   00000034   0x7800             LDRB     R0,[R0, #+0]
   \   00000036   0x....             LDR      R1,??DataTable1_4  ;; 0x4007d000
   \   00000038   0x7008             STRB     R0,[R1, #+0]
     25            PMC_LVDSC2 = lvd.LVDSC2;
   \   0000003A   0x4668             MOV      R0,SP
   \   0000003C   0x7840             LDRB     R0,[R0, #+1]
   \   0000003E   0x....             LDR      R1,??DataTable1_5  ;; 0x4007d001
   \   00000040   0x7008             STRB     R0,[R1, #+0]
     26            PMC_REGSC  = reg.REGSC;
   \   00000042   0x4668             MOV      R0,SP
   \   00000044   0x7900             LDRB     R0,[R0, #+4]
   \   00000046   0x....             LDR      R1,??DataTable1_6  ;; 0x4007d002
   \   00000048   0x7008             STRB     R0,[R1, #+0]
     27          }
   \   0000004A   0xBD03             POP      {R0,R1,PC}       ;; return
     28          
     29          /******************************************************************************
     30           * interrupt function definitions                                             *
     31           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     32          weak void pmc_isr (void)
     33          {
   \                     pmc_isr: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     34            if ((PMC_LVDSC1 & PMC_LVDSC1_LVDF_MASK) && (PMC_LVDSC1 & PMC_LVDSC1_LVDIE_MASK))
   \   00000002   0x....             LDR      R0,??DataTable1_4  ;; 0x4007d000
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x0600             LSLS     R0,R0,#+24
   \   00000008   0xD50A             BPL      ??pmc_isr_0
   \   0000000A   0x....             LDR      R0,??DataTable1_4  ;; 0x4007d000
   \   0000000C   0x7800             LDRB     R0,[R0, #+0]
   \   0000000E   0x0680             LSLS     R0,R0,#+26
   \   00000010   0xD506             BPL      ??pmc_isr_0
     35            {
     36              iosetb (PMC_LVDSC1,PMC_LVDSC1_LVDACK_MASK);   /* clear interrupt flag     */
   \   00000012   0x2040             MOVS     R0,#+64
   \   00000014   0x....             LDR      R1,??DataTable1_7  ;; 0x4807d000
   \   00000016   0x7008             STRB     R0,[R1, #+0]
     37              pCallbackPMC (LVD_CALLBACK);
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x....             LDR      R1,??DataTable1
   \   0000001C   0x6809             LDR      R1,[R1, #+0]
   \   0000001E   0x4788             BLX      R1
     38            }
     39            if ((PMC_LVDSC2 & PMC_LVDSC2_LVWF_MASK) && (PMC_LVDSC2 & PMC_LVDSC2_LVWIE_MASK))
   \                     ??pmc_isr_0: (+1)
   \   00000020   0x....             LDR      R0,??DataTable1_5  ;; 0x4007d001
   \   00000022   0x7800             LDRB     R0,[R0, #+0]
   \   00000024   0x0600             LSLS     R0,R0,#+24
   \   00000026   0xD50A             BPL      ??pmc_isr_1
   \   00000028   0x....             LDR      R0,??DataTable1_5  ;; 0x4007d001
   \   0000002A   0x7800             LDRB     R0,[R0, #+0]
   \   0000002C   0x0680             LSLS     R0,R0,#+26
   \   0000002E   0xD506             BPL      ??pmc_isr_1
     40            {
     41              iosetb (PMC_LVDSC2,PMC_LVDSC2_LVWACK_MASK);   /* clear interrupt flag     */
   \   00000030   0x2040             MOVS     R0,#+64
   \   00000032   0x....             LDR      R1,??DataTable1_8  ;; 0x4807d001
   \   00000034   0x7008             STRB     R0,[R1, #+0]
     42              pCallbackPMC (LVW_CALLBACK);
   \   00000036   0x2002             MOVS     R0,#+2
   \   00000038   0x....             LDR      R1,??DataTable1
   \   0000003A   0x6809             LDR      R1,[R1, #+0]
   \   0000003C   0x4788             BLX      R1
     43            }
     44          }
   \                     ??pmc_isr_1: (+1)
   \   0000003E   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x........         DC32     pCallbackPMC

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0xE000E280         DC32     0xe000e280

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0xE000E404         DC32     0xe000e404

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0x4007D000         DC32     0x4007d000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x4007D001         DC32     0x4007d001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   0x4007D002         DC32     0x4007d002

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \   00000000   0x4807D000         DC32     0x4807d000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_8:
   \   00000000   0x4807D001         DC32     0x4807d001
     45          /******************************************************************************
     46           * End of module                                                              *
     47           ******************************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      12   PMC_Init
       8   pmc_isr
         8   -- Indirect call


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
       4  ??DataTable1_8
      76  PMC_Init
       4  pCallbackPMC
      64  pmc_isr

 
   4 bytes in section .bss
 176 bytes in section .text
 
 176 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none
