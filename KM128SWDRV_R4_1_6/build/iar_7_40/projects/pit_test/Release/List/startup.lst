###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        21/Mar/2017  14:13:04
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\Freescale\KM128SWDRV_R4_1_6\src\toolchain\iar\startup.c
#    Command line =  
#        C:\Freescale\KM128SWDRV_R4_1_6\src\toolchain\iar\startup.c -D NDEBUG
#        -lCN
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\pit_test\Release\List\
#        -o
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\pit_test\Release\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ --no_mem_idioms -e --fpu=None --dlib_config
#        D:\IAR7.4anzhuang\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\pit_test\..\..\..\..\src\common\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\pit_test\..\..\..\..\src\drivers\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\pit_test\..\..\..\..\src\freemaster\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\pit_test\..\..\..\..\src\projects\pit_test\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\pit_test\..\..\..\..\src\toolchain\iar\
#        -On
#    List file    =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\pit_test\Release\List\startup.lst
#    Object file  =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\pit_test\Release\Obj\startup.o
#
###############################################################################

C:\Freescale\KM128SWDRV_R4_1_6\src\toolchain\iar\startup.c
      1          /******************************************************************************
      2           * (c) Copyright 2010-2015, Freescale Semiconductor Inc.
      3           * ALL RIGHTS RESERVED.
      4           ***************************************************************************//*!
      5           * @file      startup.c
      6           * @version   1.0.1.1
      7           * @date      Nov-23-2015
      8           * @brief     Generic Kinetis startup code.
      9           ******************************************************************************/
     10          #include "startup.h"
     11          
     12          #pragma section = ".data"
     13          #pragma section = ".data_init"
     14          #pragma section = ".bss"
     15          #pragma section = "CodeRelocate"
     16          #pragma section = "CodeRelocateRam"
     17          
     18          /******************************************************************************
     19           * Startup function definition                                                *
     20           ******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
     21          void startup(void)
     22          {
   \                     startup: (+1)
   \   00000000   0xB5FC             PUSH     {R2-R7,LR}
     23              /* Declare a counter we'll use in all of the copy loops                   */
     24              unsigned int n;
     25          
     26              /* Get the addresses for the .data section (initialized data section)     */
     27              unsigned char* data_ram = (unsigned char*)__section_begin(".data");
   \   00000002   0x4916             LDR      R1,??startup_0
     28              unsigned char* data_rom = (unsigned char*)__section_begin(".data_init");
   \   00000004   0x4816             LDR      R0,??startup_0+0x4
     29              unsigned char* data_rom_end = (unsigned char*)__section_end(".data_init");
   \   00000006   0x4B17             LDR      R3,??startup_0+0x8
   \   00000008   0x9301             STR      R3,[SP, #+4]
     30          
     31              /* Copy initialized data from ROM to RAM                                  */
     32              n = data_rom_end - data_rom;
   \   0000000A   0x9B01             LDR      R3,[SP, #+4]
   \   0000000C   0x1A1B             SUBS     R3,R3,R0
   \   0000000E   0x001A             MOVS     R2,R3
     33              while (n--)
   \                     ??startup_1: (+1)
   \   00000010   0x0013             MOVS     R3,R2
   \   00000012   0x1E5A             SUBS     R2,R3,#+1
   \   00000014   0x2B00             CMP      R3,#+0
   \   00000016   0xD004             BEQ      ??startup_2
     34                *data_ram++ = *data_rom++;
   \   00000018   0x7803             LDRB     R3,[R0, #+0]
   \   0000001A   0x700B             STRB     R3,[R1, #+0]
   \   0000001C   0x1C40             ADDS     R0,R0,#+1
   \   0000001E   0x1C49             ADDS     R1,R1,#+1
   \   00000020   0xE7F6             B        ??startup_1
     35          
     36              /* Get the addresses for the .bss section (zero-initialized data)         */
     37              unsigned char* bss_start = (unsigned char*)__section_begin(".bss");
   \                     ??startup_2: (+1)
   \   00000022   0x4B11             LDR      R3,??startup_0+0xC
     38              unsigned char* bss_end = (unsigned char*)__section_end(".bss");
   \   00000024   0x4C11             LDR      R4,??startup_0+0x10
   \   00000026   0x9400             STR      R4,[SP, #+0]
     39          
     40              /* Clear the zero-initialized data section                                */
     41              n = bss_end - bss_start;
   \   00000028   0x9C00             LDR      R4,[SP, #+0]
   \   0000002A   0x1AE4             SUBS     R4,R4,R3
   \   0000002C   0x0022             MOVS     R2,R4
     42              while(n--)
   \                     ??startup_3: (+1)
   \   0000002E   0x0014             MOVS     R4,R2
   \   00000030   0x1E62             SUBS     R2,R4,#+1
   \   00000032   0x2C00             CMP      R4,#+0
   \   00000034   0xD003             BEQ      ??startup_4
     43                *bss_start++ = 0;
   \   00000036   0x2400             MOVS     R4,#+0
   \   00000038   0x701C             STRB     R4,[R3, #+0]
   \   0000003A   0x1C5B             ADDS     R3,R3,#+1
   \   0000003C   0xE7F7             B        ??startup_3
     44          
     45              /* Get addresses for any code sections that need to be copied from ROM to RAM.
     46               * The IAR tools have a predefined keyword that can be used to mark individual
     47               * functions for execution from RAM. Add "__ramfunc" before the return type in
     48               * the function prototype for any routines you need to execute from RAM instead
     49               * of ROM. ex: __ramfunc void foo(void);
     50               */
     51              unsigned char* code_relocate_ram = (unsigned char*)__section_begin("CodeRelocateRam");
   \                     ??startup_4: (+1)
   \   0000003E   0x4C0C             LDR      R4,??startup_0+0x14
     52              unsigned char* code_relocate = (unsigned char*)__section_begin("CodeRelocate");
   \   00000040   0x4D0C             LDR      R5,??startup_0+0x18
     53              unsigned char* code_relocate_end = (unsigned char*)__section_end("CodeRelocate");
   \   00000042   0x4E0D             LDR      R6,??startup_0+0x1C
     54          
     55              /* Copy functions from ROM to RAM                                         */
     56              n = code_relocate_end - code_relocate;
   \   00000044   0x1B77             SUBS     R7,R6,R5
   \   00000046   0x003A             MOVS     R2,R7
     57              while (n--)
   \                     ??startup_5: (+1)
   \   00000048   0x0017             MOVS     R7,R2
   \   0000004A   0x1E7A             SUBS     R2,R7,#+1
   \   0000004C   0x2F00             CMP      R7,#+0
   \   0000004E   0xD004             BEQ      ??startup_6
     58                *code_relocate_ram++ = *code_relocate++;
   \   00000050   0x782F             LDRB     R7,[R5, #+0]
   \   00000052   0x7027             STRB     R7,[R4, #+0]
   \   00000054   0x1C6D             ADDS     R5,R5,#+1
   \   00000056   0x1C64             ADDS     R4,R4,#+1
   \   00000058   0xE7F6             B        ??startup_5
     59          }
   \                     ??startup_6: (+1)
   \   0000005A   0xBDF3             POP      {R0,R1,R4-R7,PC}  ;; return
   \                     ??startup_0:
   \   0000005C   0x........         DC32     SFB(`.data`)
   \   00000060   0x........         DC32     SFB(`.data_init`)
   \   00000064   0x........         DC32     SFE(`.data_init`)
   \   00000068   0x........         DC32     SFB(`.bss`)
   \   0000006C   0x........         DC32     SFE(`.bss`)
   \   00000070   0x........         DC32     SFB(CodeRelocateRam)
   \   00000074   0x........         DC32     SFB(CodeRelocate)
   \   00000078   0x........         DC32     SFE(CodeRelocate)
     60          /******************************************************************************
     61           * End of module                                                              *
     62           ******************************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      28   startup


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     124  startup

 
 124 bytes in section .text
 
 124 bytes of CODE memory

Errors: none
Warnings: none
