###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        01/Mar/2017  17:58:54
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Freescale\KM128SWDRV_R4_1_6\src\projects\spi_fifo_master_test\spi_fifo_master_test.c
#    Command line =  
#        C:\Freescale\KM128SWDRV_R4_1_6\src\projects\spi_fifo_master_test\spi_fifo_master_test.c
#        --no_size_constraints -D NDEBUG -lCN
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\spi_fifo_master_test\Release\List\
#        -o
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\spi_fifo_master_test\Release\Obj\
#        --no_unroll --debug --endian=little --cpu=Cortex-M0+ --no_mem_idioms
#        -e --fpu=None --dlib_config
#        D:\IAR7.4anzhuang\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\spi_fifo_master_test\..\..\..\..\src\common\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\spi_fifo_master_test\..\..\..\..\src\drivers\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\spi_fifo_master_test\..\..\..\..\src\freemaster\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\spi_fifo_master_test\..\..\..\..\src\projects\spi_fifo_master_test\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\spi_fifo_master_test\..\..\..\..\src\toolchain\iar\
#        -Ohs --require_prototypes
#    List file    =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\spi_fifo_master_test\Release\List\spi_fifo_master_test.lst
#    Object file  =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\spi_fifo_master_test\Release\Obj\spi_fifo_master_test.o
#
###############################################################################

C:\Freescale\KM128SWDRV_R4_1_6\src\projects\spi_fifo_master_test\spi_fifo_master_test.c
      1          /******************************************************************************
      2           * (c) Copyright 2010-2015, Freescale Semiconductor Inc.
      3           * ALL RIGHTS RESERVED.
      4           ******************************************************************************
      5           * spi_fifo_master.c
      6           ******************************************************************************/
      7          #include "drivers.h"
      8          
      9          /* SPI signal defines                                                         */
     10          #define SPI1_SCK        PIN4            /* PTF4 */
     11          #define SPI1_MOSI       PIN5            /* PTF5 */
     12          #define SPI1_MISO       PIN6            /* PTF6 */
     13          
     14          /* Callback functions declaration                                             */
     15          static void syst_callback(void);
     16          static void port_callback(PORT_CALLBACK_SRC src, uint8 pin);
     17          
     18          //uint16 spi_buff[2];                     /* Rx buffer                          */

   \                                 In section .data, align 4
     19          uint16 spi_data0[2] = {0x0001, 0xFFFF}; /* Tx data buffer 0                   */
     20          uint16 spi_data1[2] = {0x0002, 0xFFFF}; /* Tx data buffer 1                   */
     21          
     22          volatile uint8_t msgFlag = 0;           /* Message flag                       */
   \                     msgFlag:
   \   00000000   0x00               DC8 0
   \   00000001   0x00 0x00          DC8 0, 0, 0
   \              0x00         
   \                     spi_data0:
   \   00000004   0x0001 0xFFFF      DC16 1, 65535
   \                     spi_data1:
   \   00000008   0x0002 0xFFFF      DC16 2, 65535
     23          

   \                                 In section .text, align 4, keep-with-next
     24          void main (void)
     25          {
   \                     main: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
     26            /* SIM initialization                                                       */
     27            SIM_Init (SIM_MODULE_ALL_PERIPH_ON_CONFIG);
   \   00000004   0x....             LDR      R1,??DataTable7  ;; 0x4003e000
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x6008             STR      R0,[R1, #+0]
   \   0000000A   0x6048             STR      R0,[R1, #+4]
   \   0000000C   0x....             LDR      R1,??DataTable7_1  ;; 0x4003f004
   \   0000000E   0x2201             MOVS     R2,#+1
   \   00000010   0x600A             STR      R2,[R1, #+0]
   \   00000012   0x....             LDR      R2,??DataTable7_2  ;; 0x786cbdf2
   \   00000014   0x630A             STR      R2,[R1, #+48]
   \   00000016   0x....             LDR      R2,??DataTable7_3  ;; 0x7ab7fc8
   \   00000018   0x634A             STR      R2,[R1, #+52]
   \   0000001A   0x....             LDR      R2,??DataTable7_4  ;; 0xd0116a1f
   \   0000001C   0x638A             STR      R2,[R1, #+56]
   \   0000001E   0x2203             MOVS     R2,#+3
   \   00000020   0x63CA             STR      R2,[R1, #+60]
   \   00000022   0x2280             MOVS     R2,#+128
   \   00000024   0x0512             LSLS     R2,R2,#+20       ;; #+134217728
   \   00000026   0x640A             STR      R2,[R1, #+64]
   \   00000028   0x6488             STR      R0,[R1, #+72]
   \   0000002A   0x6688             STR      R0,[R1, #+104]
     28          
     29            /* Interrupt on button press initialization                                 */
     30            PORT_Init (PORTD, PORT_MODULE_BUTTON_IRQ_MODE, PIN0);
   \   0000002C   0x2201             MOVS     R2,#+1
   \   0000002E   0xBF00             Nop      
   \   00000030   0x....             ADR.N    R0,?_0
   \   00000032   0xC803             LDM      R0,{R0,R1}
   \   00000034   0x.... 0x....      BL       PORTD_Init
     31            GPIO_Init (GPIOD, GPIO_INP_MODE, PIN0);
   \   00000038   0x20FE             MOVS     R0,#+254
   \   0000003A   0x....             LDR      R1,??DataTable7_5  ;; 0x400ff003
   \   0000003C   0x780A             LDRB     R2,[R1, #+0]
   \   0000003E   0x4002             ANDS     R2,R2,R0
   \   00000040   0x700A             STRB     R2,[R1, #+0]
   \   00000042   0x7D0A             LDRB     R2,[R1, #+20]
   \   00000044   0x4010             ANDS     R0,R0,R2
   \   00000046   0x7508             STRB     R0,[R1, #+20]
     32            PORT_InstallCallback(PRI_LVL0, port_callback);
   \   00000048   0x....             LDR      R1,??DataTable7_6
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x.... 0x....      BL       PORT_InstallCallback
     33          
     34            /* SysTick timer init                                                       */
     35            SYST_Init (SYST_MODULE_RELOAD_TMR_DIV1_EN_CONFIG(1228), PRI_LVL0, syst_callback);
   \   00000050   0x....             LDR      R3,??DataTable7_7
   \   00000052   0x2200             MOVS     R2,#+0
   \   00000054   0x....             ADR.N    R0,?_1
   \   00000056   0xC803             LDM      R0,{R0,R1}
   \   00000058   0x.... 0x....      BL       SYST_Init
     36          
     37            /* SPI1 initialization                                                      */
     38            PORT_Init (PORTF, PORT_MODULE_ALT2_MODE, SPI1_MOSI | SPI1_MISO | SPI1_SCK);
   \   0000005C   0x2270             MOVS     R2,#+112
   \   0000005E   0xBF00             Nop      
   \   00000060   0x....             ADR.N    R0,?_2
   \   00000062   0xC803             LDM      R0,{R0,R1}
   \   00000064   0x.... 0x....      BL       PORTF_Init
     39            SPI_Init (SPI1, SPI_MODULE_DIV6_16B_FIFO_MASTER_CPHA_CONFIG, NULL, PRI_LVL1, NULL);
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0x9000             STR      R0,[SP, #+0]
   \   0000006C   0x2301             MOVS     R3,#+1
   \   0000006E   0x2200             MOVS     R2,#+0
   \   00000070   0x....             ADR.N    R0,?_3
   \   00000072   0xC803             LDM      R0,{R0,R1}
   \   00000074   0x.... 0x....      BL       SPI1_Init
     40          
     41            /* Hold the SS pin low                                                      */
     42            PORT_Init (PORTF,PORT_MODULE_LED_MODE,PIN3);
   \   00000078   0x2208             MOVS     R2,#+8
   \   0000007A   0xBF00             Nop      
   \   0000007C   0x....             ADR.N    R0,?_4
   \   0000007E   0xC803             LDM      R0,{R0,R1}
   \   00000080   0x.... 0x....      BL       PORTF_Init
     43            GPIO_Init (GPIOF, GPIO_OUT_LOGIC0_MODE, PIN3);
   \   00000084   0x20F7             MOVS     R0,#+247
   \   00000086   0x....             LDR      R1,??DataTable7_8  ;; 0x400ff041
   \   00000088   0x780A             LDRB     R2,[R1, #+0]
   \   0000008A   0x4002             ANDS     R2,R2,R0
   \   0000008C   0x700A             STRB     R2,[R1, #+0]
   \   0000008E   0x7D0A             LDRB     R2,[R1, #+20]
   \   00000090   0x2308             MOVS     R3,#+8
   \   00000092   0x4313             ORRS     R3,R3,R2
   \   00000094   0x750B             STRB     R3,[R1, #+20]
     44            GPIO_Clr  (GPIOF, PIN3);
   \   00000096   0x780A             LDRB     R2,[R1, #+0]
   \   00000098   0x4010             ANDS     R0,R0,R2
   \   0000009A   0x7008             STRB     R0,[R1, #+0]
     45          
     46            EnableInterrupts ();                   /* enable all interrupts             */
   \   0000009C   0xB662             CPSIE i
     47          
     48            while(1);
   \                     ??main_0: (+1)
   \   0000009E   0xE7FE             B        ??main_0
     49          }
     50          
     51          /* SysTick interrupt callback implementation                                  */

   \                                 In section .text, align 2, keep-with-next
     52          static void syst_callback(void)
     53          {
   \                     syst_callback: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x2020             MOVS     R0,#+32
   \   00000004   0x....             LDR      R4,??DataTable7_9  ;; 0x40076000
     54            while(!SPI_TxCmpl(SPI1));
   \                     ??syst_callback_0: (+1)
   \   00000006   0x7821             LDRB     R1,[R4, #+0]
   \   00000008   0x4201             TST      R1,R0
   \   0000000A   0xD0FC             BEQ      ??syst_callback_0
     55            if(msgFlag == 0)
   \   0000000C   0x....             LDR      R0,??DataTable7_10
   \   0000000E   0x7801             LDRB     R1,[R0, #+0]
   \   00000010   0x2900             CMP      R1,#+0
   \   00000012   0xD102             BNE      ??syst_callback_1
     56            {
     57              SPI_PutWordToFifo(SPI1,spi_data0,2); /* Send data from spi_data0 buffer   */
   \   00000014   0x2102             MOVS     R1,#+2
   \   00000016   0x1D00             ADDS     R0,R0,#+4
   \   00000018   0xE001             B        ??syst_callback_2
     58            }
     59            else
     60            {
     61              SPI_PutWordToFifo(SPI1,spi_data1,2); /* Send data from spi_data1 buffer   */
   \                     ??syst_callback_1: (+1)
   \   0000001A   0x2102             MOVS     R1,#+2
   \   0000001C   0x3008             ADDS     R0,R0,#+8
   \                     ??syst_callback_2: (+1)
   \   0000001E   0x.... 0x....      BL       SPI1_PutWordToFifo
     62            }
     63            if(!(SPI_RxFifoEmpty(SPI1)))           /* If RX FIFO buffer is not empty    */
   \   00000022   0x7820             LDRB     R0,[R4, #+0]
     64            {
     65              //SPI_GetWordFromFifo(SPI1,spi_buff,2);
     66            }
     67          }
   \   00000024   0xBD10             POP      {R4,PC}          ;; return
     68          
     69          /* PORT interrupt callback implementation                                     */

   \                                 In section .text, align 2, keep-with-next
     70          static void port_callback(PORT_CALLBACK_SRC src, uint8 pin)
     71          {
     72            if(src == PORTD_CALLBACK)
   \                     port_callback: (+1)
   \   00000000   0x2804             CMP      R0,#+4
   \   00000002   0xD106             BNE      ??port_callback_0
     73            {
     74              if(pin == PIN0) { msgFlag ^= 1; }
   \   00000004   0x2901             CMP      R1,#+1
   \   00000006   0xD104             BNE      ??port_callback_0
   \   00000008   0x....             LDR      R0,??DataTable7_10
   \   0000000A   0x7801             LDRB     R1,[R0, #+0]
   \   0000000C   0x2201             MOVS     R2,#+1
   \   0000000E   0x404A             EORS     R2,R2,R1
   \   00000010   0x7002             STRB     R2,[R0, #+0]
     75            }
     76          }
   \                     ??port_callback_0: (+1)
   \   00000012   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x4003E000         DC32     0x4003e000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x4003F004         DC32     0x4003f004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x786CBDF2         DC32     0x786cbdf2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x07AB7FC8         DC32     0x7ab7fc8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0xD0116A1F         DC32     0xd0116a1f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   0x400FF003         DC32     0x400ff003

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \   00000000   0x........         DC32     port_callback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \   00000000   0x........         DC32     syst_callback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \   00000000   0x400FF041         DC32     0x400ff041

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_9:
   \   00000000   0x40076000         DC32     0x40076000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_10:
   \   00000000   0x........         DC32     msgFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x000A0103         DC32 655619, 4294967295
   \              0xFFFFFFFF   

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x00000005         DC32 5, 1227
   \              0x000004CB   

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x00000200         DC32 512, 0
   \              0x00000000   

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x54 0x40          DC8 84, 64, 1, 16, 0, 0, 0, 0
   \              0x01 0x10    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_4:
   \   00000000   0x00000104         DC32 260, 0
   \              0x00000000   
     77          
     78            

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   main
         8   -> PORTD_Init
         8   -> PORTF_Init
         8   -> PORT_InstallCallback
         8   -> SPI1_Init
         8   -> SYST_Init
       0   port_callback
       8   syst_callback
         8   -> SPI1_PutWordToFifo


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_10
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
       8  ?_0
       8  ?_1
       8  ?_2
       8  ?_3
       8  ?_4
     160  main
      12  msgFlag
          spi_data0
          spi_data1
      20  port_callback
      38  syst_callback

 
  12 bytes in section .data
 302 bytes in section .text
 
 302 bytes of CODE memory
  12 bytes of DATA memory

Errors: none
Warnings: none
