###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        01/Mar/2017  16:18:00
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Freescale\KM128SWDRV_R4_1_6\src\projects\spi_test\spi_test.c
#    Command line =  
#        C:\Freescale\KM128SWDRV_R4_1_6\src\projects\spi_test\spi_test.c
#        --no_size_constraints -D NDEBUG -lCN
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\spi_test\Release\List\
#        -o
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\spi_test\Release\Obj\
#        --no_unroll --debug --endian=little --cpu=Cortex-M0+ --no_mem_idioms
#        -e --fpu=None --dlib_config
#        D:\IAR7.4anzhuang\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\spi_test\..\..\..\..\src\common\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\spi_test\..\..\..\..\src\drivers\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\spi_test\..\..\..\..\src\freemaster\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\spi_test\..\..\..\..\src\projects\spi_test\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\spi_test\..\..\..\..\src\toolchain\iar\
#        -Ohs --require_prototypes
#    List file    =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\spi_test\Release\List\spi_test.lst
#    Object file  =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\spi_test\Release\Obj\spi_test.o
#
###############################################################################

C:\Freescale\KM128SWDRV_R4_1_6\src\projects\spi_test\spi_test.c
      1          /******************************************************************************
      2           * (c) Copyright 2010-2015, Freescale Semiconductor Inc.
      3           * ALL RIGHTS RESERVED.
      4           ******************************************************************************
      5           * spi_test.c
      6           ******************************************************************************/
      7          #include "drivers.h"
      8          
      9          /* SPI signal defines                                                         */
     10          #define SPI0_SS         PIN2            /* PTD1 */
     11          #define SPI0_SCK        PIN3            /* PTD2 */
     12          #define SPI0_MOSI       PIN4            /* PTD3 */
     13          #define SPI0_MISO       PIN5           /* PTD4 */
     14          
     15          static void spi0_ss_callback (SS_CONTROL ss_pin); /* SS pin callback          */

   \                                 In section .bss, align 4
     16          uint8 spi_buff[16];                               /* Tx/Rx buffer             */
   \                     spi_buff:
   \   00000000                      DS8 16
     17          uint16 temp;
   \                     temp:
   \   00000010                      DS8 2

   \                                 In section .text, align 4, keep-with-next
     18          void main (void)
     19          {
   \                     main: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
     20            /* SIM initialization                                                       */
     21            SIM_Init (SIM_MODULE_ALL_PERIPH_ON_CONFIG);
   \   00000004   0x....             LDR      R0,??DataTable4  ;; 0x4003e000
   \   00000006   0x2500             MOVS     R5,#+0
   \   00000008   0x6005             STR      R5,[R0, #+0]
   \   0000000A   0x6045             STR      R5,[R0, #+4]
   \   0000000C   0x....             LDR      R0,??DataTable4_1  ;; 0x4003f004
   \   0000000E   0x2101             MOVS     R1,#+1
   \   00000010   0x6001             STR      R1,[R0, #+0]
   \   00000012   0x....             LDR      R1,??DataTable4_2  ;; 0x786cbdf2
   \   00000014   0x6301             STR      R1,[R0, #+48]
   \   00000016   0x....             LDR      R1,??DataTable4_3  ;; 0x7ab7fc8
   \   00000018   0x6341             STR      R1,[R0, #+52]
   \   0000001A   0x....             LDR      R1,??DataTable4_4  ;; 0xd0116a1f
   \   0000001C   0x6381             STR      R1,[R0, #+56]
   \   0000001E   0x2703             MOVS     R7,#+3
   \   00000020   0x63C7             STR      R7,[R0, #+60]
   \   00000022   0x2180             MOVS     R1,#+128
   \   00000024   0x0509             LSLS     R1,R1,#+20       ;; #+134217728
   \   00000026   0x6401             STR      R1,[R0, #+64]
   \   00000028   0x6485             STR      R5,[R0, #+72]
   \   0000002A   0x6685             STR      R5,[R0, #+104]
     22            GPIO_Init (GPIOG, GPIO_OUT_LOGIC0_MODE, SPI0_MOSI | SPI0_MISO | SPI0_SCK);
   \   0000002C   0x....             LDR      R6,??DataTable4_5  ;; 0x400ff042
   \   0000002E   0x7830             LDRB     R0,[R6, #+0]
   \   00000030   0x21C7             MOVS     R1,#+199
   \   00000032   0x4001             ANDS     R1,R1,R0
   \   00000034   0x7031             STRB     R1,[R6, #+0]
   \   00000036   0x7D30             LDRB     R0,[R6, #+20]
   \   00000038   0x2138             MOVS     R1,#+56
   \   0000003A   0x4301             ORRS     R1,R1,R0
   \   0000003C   0x7531             STRB     R1,[R6, #+20]
     23            /* SPI0 initialization                                                      */
     24            PORT_Init (PORTG, PORT_MODULE_ALT2_MODE, SPI0_MOSI | SPI0_MISO | SPI0_SCK);
   \   0000003E   0x2238             MOVS     R2,#+56
   \   00000040   0x....             ADR.N    R0,?_0
   \   00000042   0xC803             LDM      R0,{R0,R1}
   \   00000044   0x.... 0x....      BL       PORTG_Init
     25            SPI_Init (SPI0, SPI_MODULE_DIV12_8B_POLL_CONFIG,spi0_ss_callback,PRI_LVL0,NULL);
   \   00000048   0x9500             STR      R5,[SP, #+0]
   \   0000004A   0x2300             MOVS     R3,#+0
   \   0000004C   0x....             LDR      R2,??DataTable4_6
   \   0000004E   0xBF00             Nop      
   \   00000050   0x....             ADR.N    R0,?_1
   \   00000052   0xC803             LDM      R0,{R0,R1}
   \   00000054   0x.... 0x....      BL       SPI0_Init
     26          
     27            // GPIO_Set(GPIOG,PIN5);
     28           // SPI0_MISO_0;
     29            //uint8 temp_id=0;
     30            
     31             SPI_TxRxByte(SPI0,0x90) ;
   \   00000058   0x2090             MOVS     R0,#+144
   \   0000005A   0x.... 0x....      BL       SPI0_TxRxByte
     32             SPI0_TxRxByte(0x00);
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0x.... 0x....      BL       SPI0_TxRxByte
     33             SPI0_TxRxByte(0x00);
   \   00000064   0x2000             MOVS     R0,#+0
   \   00000066   0x.... 0x....      BL       SPI0_TxRxByte
     34             SPI0_TxRxByte(0x00);
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0x.... 0x....      BL       SPI0_TxRxByte
     35             temp=(temp|SPI_GetByte(SPI0))<<8;  
   \   00000070   0x....             LDR      R4,??DataTable4_7
   \   00000072   0x....             LDR      R0,??DataTable4_8  ;; 0x40075006
   \   00000074   0x8A21             LDRH     R1,[R4, #+16]
   \   00000076   0x7802             LDRB     R2,[R0, #+0]
   \   00000078   0x4311             ORRS     R1,R1,R2
   \   0000007A   0x0209             LSLS     R1,R1,#+8
   \   0000007C   0x8221             STRH     R1,[R4, #+16]
     36          //temp_id=(temp_id|SPI_GetByte(SPI0))<<8;
     37             temp=(temp|SPI_GetByte(SPI0));
   \   0000007E   0x7800             LDRB     R0,[R0, #+0]
   \   00000080   0x4301             ORRS     R1,R1,R0
   \   00000082   0x8221             STRH     R1,[R4, #+16]
     38          
     39             SPISS_1;
   \   00000084   0x7830             LDRB     R0,[R6, #+0]
   \   00000086   0x2104             MOVS     R1,#+4
   \   00000088   0x4301             ORRS     R1,R1,R0
   \   0000008A   0x7031             STRB     R1,[R6, #+0]
     40             
     41            
     42            spi_buff[0] = 0x90;                             /* fill Tx buffer           */
   \   0000008C   0x2090             MOVS     R0,#+144
   \   0000008E   0x7020             STRB     R0,[R4, #+0]
     43            SPI_CommByte (SPI0,spi_buff,1,NULL,0);          /* 1 Tx byte, no receiving  */
   \   00000090   0x2300             MOVS     R3,#+0
   \   00000092   0x2200             MOVS     R2,#+0
   \   00000094   0x2101             MOVS     R1,#+1
   \   00000096   0x0020             MOVS     R0,R4
   \   00000098   0x.... 0x....      BL       SPI0_CommByte
     44            
     45            spi_buff[0] = 0x05;                             /* fill Tx buffer           */
   \   0000009C   0x2005             MOVS     R0,#+5
   \   0000009E   0x7020             STRB     R0,[R4, #+0]
     46            SPI_CommByte (SPI0,spi_buff,1,spi_buff,1);      /* 1 Tx byte, 1 Rx byte     */
   \   000000A0   0x2301             MOVS     R3,#+1
   \   000000A2   0x0022             MOVS     R2,R4
   \   000000A4   0x2101             MOVS     R1,#+1
   \   000000A6   0x0020             MOVS     R0,R4
   \   000000A8   0x.... 0x....      BL       SPI0_CommByte
     47          
     48            spi_buff[0] = 0x03; spi_buff[1] = 0x00;         /* fill Tx buffer           */
   \   000000AC   0x7027             STRB     R7,[R4, #+0]
   \   000000AE   0x7065             STRB     R5,[R4, #+1]
     49          
     50            SPI_CommByte (SPI0,spi_buff,2,spi_buff,8);      /* 2 Tx bytes, 8 Rx bytes   */
   \   000000B0   0x2308             MOVS     R3,#+8
   \   000000B2   0x0022             MOVS     R2,R4
   \   000000B4   0x2102             MOVS     R1,#+2
   \   000000B6   0x0020             MOVS     R0,R4
   \   000000B8   0x.... 0x....      BL       SPI0_CommByte
     51          
     52            while(1);
   \                     ??main_0: (+1)
   \   000000BC   0xE7FE             B        ??main_0
     53          }
     54          
     55          /* callback function implementation for manual driving of slave select pin    */

   \                                 In section .text, align 4, keep-with-next
     56          static void spi0_ss_callback (SS_CONTROL ss_pin)
     57          {
   \                     spi0_ss_callback: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
     58            if      (ss_pin == SS_SET  ) { GPIO_Set (GPIOD,SPI0_SS); }
   \   00000004   0x2801             CMP      R0,#+1
   \   00000006   0xD103             BNE      ??spi0_ss_callback_0
   \   00000008   0x....             LDR      R0,??DataTable4_9  ;; 0x400ff003
   \   0000000A   0x7801             LDRB     R1,[R0, #+0]
   \   0000000C   0x2204             MOVS     R2,#+4
   \   0000000E   0xE018             B        ??spi0_ss_callback_1
     59            else if (ss_pin == SS_CLEAR) { GPIO_Clr (GPIOD,SPI0_SS); }
   \                     ??spi0_ss_callback_0: (+1)
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD104             BNE      ??spi0_ss_callback_2
   \   00000014   0x....             LDR      R0,??DataTable4_9  ;; 0x400ff003
   \   00000016   0x7801             LDRB     R1,[R0, #+0]
   \   00000018   0x22FB             MOVS     R2,#+251
   \   0000001A   0x400A             ANDS     R2,R2,R1
   \   0000001C   0xE012             B        ??spi0_ss_callback_3
     60            else if (ss_pin == SS_INIT )
   \                     ??spi0_ss_callback_2: (+1)
   \   0000001E   0x2802             CMP      R0,#+2
   \   00000020   0xD111             BNE      ??spi0_ss_callback_4
     61            {
     62              PORT_Init (PORTG, PORT_MODULE_LED_MODE, SPI0_SS);
   \   00000022   0x2204             MOVS     R2,#+4
   \   00000024   0x....             ADR.N    R0,?_2
   \   00000026   0xC803             LDM      R0,{R0,R1}
   \   00000028   0x.... 0x....      BL       PORTG_Init
     63              GPIO_Init (GPIOG, GPIO_OUT_LOGIC0_MODE, SPI0_SS);
   \   0000002C   0x....             LDR      R0,??DataTable4_5  ;; 0x400ff042
   \   0000002E   0x7801             LDRB     R1,[R0, #+0]
   \   00000030   0x22FB             MOVS     R2,#+251
   \   00000032   0x400A             ANDS     R2,R2,R1
   \   00000034   0x7002             STRB     R2,[R0, #+0]
   \   00000036   0x7D01             LDRB     R1,[R0, #+20]
   \   00000038   0x2204             MOVS     R2,#+4
   \   0000003A   0x430A             ORRS     R2,R2,R1
   \   0000003C   0x7502             STRB     R2,[R0, #+20]
     64              GPIO_Set  (GPIOG, SPI0_MOSI);
   \   0000003E   0x7801             LDRB     R1,[R0, #+0]
   \   00000040   0x2210             MOVS     R2,#+16
   \                     ??spi0_ss_callback_1: (+1)
   \   00000042   0x430A             ORRS     R2,R2,R1
   \                     ??spi0_ss_callback_3: (+1)
   \   00000044   0x7002             STRB     R2,[R0, #+0]
     65            }
     66          }
   \                     ??spi0_ss_callback_4: (+1)
   \   00000046   0xB001             ADD      SP,SP,#+4
   \   00000048   0xBD00             POP      {PC}             ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x4003E000         DC32     0x4003e000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x4003F004         DC32     0x4003f004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x786CBDF2         DC32     0x786cbdf2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x07AB7FC8         DC32     0x7ab7fc8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0xD0116A1F         DC32     0xd0116a1f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x400FF042         DC32     0x400ff042

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x........         DC32     spi0_ss_callback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x........         DC32     spi_buff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0x40075006         DC32     0x40075006

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \   00000000   0x400FF003         DC32     0x400ff003

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x00000200         DC32 512, 0
   \              0x00000000   

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x50 0x00          DC8 80, 0, 0, 33, 0, 0, 0, 0
   \              0x00 0x21    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x00000104         DC32 260, 0
   \              0x00000000   

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   main
        24   -> PORTG_Init
        24   -> SPI0_CommByte
        24   -> SPI0_Init
        24   -> SPI0_TxRxByte
       8   spi0_ss_callback
         8   -> PORTG_Init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
       8  ?_0
       8  ?_1
       8  ?_2
     190  main
      74  spi0_ss_callback
      18  spi_buff
          temp

 
  18 bytes in section .bss
 328 bytes in section .text
 
 328 bytes of CODE memory
  18 bytes of DATA memory

Errors: none
Warnings: none
