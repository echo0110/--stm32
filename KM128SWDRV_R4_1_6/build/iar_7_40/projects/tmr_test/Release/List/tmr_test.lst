###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        21/Apr/2017  17:01:07
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Freescale\KM128SWDRV_R4_1_6\src\projects\tmr_test\tmr_test.c
#    Command line =  
#        C:\Freescale\KM128SWDRV_R4_1_6\src\projects\tmr_test\tmr_test.c
#        --no_size_constraints -D NDEBUG -lCN
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\tmr_test\Release\List\
#        -o
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\tmr_test\Release\Obj\
#        --no_unroll --debug --endian=little --cpu=Cortex-M0+ --no_mem_idioms
#        -e --fpu=None --dlib_config
#        D:\IAR7.4anzhuang\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\tmr_test\..\..\..\..\src\common\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\tmr_test\..\..\..\..\src\drivers\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\tmr_test\..\..\..\..\src\freemaster\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\tmr_test\..\..\..\..\src\projects\tmr_test\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\tmr_test\..\..\..\..\src\toolchain\iar\
#        -Ohs --require_prototypes
#    List file    =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\tmr_test\Release\List\tmr_test.lst
#    Object file  =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\tmr_test\Release\Obj\tmr_test.o
#
###############################################################################

C:\Freescale\KM128SWDRV_R4_1_6\src\projects\tmr_test\tmr_test.c
      1          /******************************************************************************
      2           * (c) Copyright 2010-2015, Freescale Semiconductor Inc.
      3           * ALL RIGHTS RESERVED.
      4           ******************************************************************************
      5           * tmr_test.c
      6           ******************************************************************************/
      7          #include "drivers.h"
      8          
      9          void GPTimerEventHander(TMR_CH_CALLBACK_TYPE type);
     10          void GeneralPurposeTimerInit(void);
     11          

   \                                 In section .bss, align 1
     12          uint8 OneSecTimer=0;
   \                     OneSecTimer:
   \   00000000                      DS8 1
     13          
     14          /*
     15           Quad Timer 1 Interrupt Frequency(ms)
     16          */
     17          #define TIMER_MOD                 25
     18          

   \                                 In section .text, align 4, keep-with-next
     19          void main (void)
     20          {
   \                     main: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
     21            /* initialize SIM module                                                    */
     22            SIM_Init  (SIM_MODULE_ALL_PERIPH_ON_CONFIG);
   \   00000004   0x....             LDR      R1,??DataTable5  ;; 0x4003e000
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x6008             STR      R0,[R1, #+0]
   \   0000000A   0x2204             MOVS     R2,#+4
   \   0000000C   0x604A             STR      R2,[R1, #+4]
   \   0000000E   0x....             LDR      R1,??DataTable5_1  ;; 0x4003f004
   \   00000010   0x2201             MOVS     R2,#+1
   \   00000012   0x600A             STR      R2,[R1, #+0]
   \   00000014   0x....             LDR      R2,??DataTable5_2  ;; 0x786cbdf2
   \   00000016   0x630A             STR      R2,[R1, #+48]
   \   00000018   0x....             LDR      R2,??DataTable5_3  ;; 0x7ab7fc8
   \   0000001A   0x634A             STR      R2,[R1, #+52]
   \   0000001C   0x....             LDR      R2,??DataTable5_4  ;; 0xd0116a1f
   \   0000001E   0x638A             STR      R2,[R1, #+56]
   \   00000020   0x2203             MOVS     R2,#+3
   \   00000022   0x63CA             STR      R2,[R1, #+60]
   \   00000024   0x2280             MOVS     R2,#+128
   \   00000026   0x0512             LSLS     R2,R2,#+20       ;; #+134217728
   \   00000028   0x640A             STR      R2,[R1, #+64]
   \   0000002A   0x6488             STR      R0,[R1, #+72]
   \   0000002C   0x6688             STR      R0,[R1, #+104]
     23            /* clock mode 2:1:1, 24MHz                                                  */
     24            FLL_Init  (FLL_MODULE_FEE_24MHZ_CONFIG);
   \   0000002E   0xBF00             Nop      
   \   00000030   0x....             ADR.N    R0,?_0
   \   00000032   0xC803             LDM      R0,{R0,R1}
   \   00000034   0x.... 0x....      BL       FLL_Init
     25          
     26            /*Initializing the GPIO in Output mode to check the Timer functionality     */
     27            PORT_Init(PORTD,PORT_MODULE_LED_MODE,PIN1);
   \   00000038   0x2202             MOVS     R2,#+2
   \   0000003A   0xBF00             Nop      
   \   0000003C   0x....             ADR.N    R0,?_1
   \   0000003E   0xC803             LDM      R0,{R0,R1}
   \   00000040   0x.... 0x....      BL       PORTD_Init
     28            GPIO_Init(GPIOD,GPIO_OUT_LOGIC0_MODE,PIN1);
   \   00000044   0x....             LDR      R0,??DataTable5_5  ;; 0x400ff003
   \   00000046   0x7801             LDRB     R1,[R0, #+0]
   \   00000048   0x22FD             MOVS     R2,#+253
   \   0000004A   0x400A             ANDS     R2,R2,R1
   \   0000004C   0x7002             STRB     R2,[R0, #+0]
   \   0000004E   0x7D01             LDRB     R1,[R0, #+20]
   \   00000050   0x2202             MOVS     R2,#+2
   \   00000052   0x430A             ORRS     R2,R2,R1
   \   00000054   0x7502             STRB     R2,[R0, #+20]
     29          
     30            GeneralPurposeTimerInit();
   \   00000056   0x....             LDR      R2,??DataTable5_6  ;; 0x915
   \   00000058   0x....             LDR      R0,??DataTable5_7
   \   0000005A   0x9004             STR      R0,[SP, #+16]
   \   0000005C   0x2001             MOVS     R0,#+1
   \   0000005E   0x9003             STR      R0,[SP, #+12]
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0x9002             STR      R0,[SP, #+8]
   \   00000064   0x9201             STR      R2,[SP, #+4]
   \   00000066   0x9000             STR      R0,[SP, #+0]
   \   00000068   0x2300             MOVS     R3,#+0
   \   0000006A   0xBF00             Nop      
   \   0000006C   0x....             ADR.N    R0,?_2
   \   0000006E   0xC803             LDM      R0,{R0,R1}
   \   00000070   0x.... 0x....      BL       TMR_CH1_Init
     31          
     32            OneSecTimer=40; /* This will be one second Timer. =40*25=1000ms             */
   \   00000074   0x2028             MOVS     R0,#+40
   \   00000076   0x....             LDR      R1,??DataTable5_8
   \   00000078   0x7008             STRB     R0,[R1, #+0]
     33          
     34            EnableInterrupts();
   \   0000007A   0xB662             CPSIE i
     35          
     36            while(1);
   \                     ??main_0: (+1)
   \   0000007C   0xE7FE             B        ??main_0
     37          }
     38          
     39          /*
     40            Quad Timer will be used as a General Purpose Timer.
     41            Presently it will be configured for 25 ms interrupt frequency.
     42            Using this Timer various Timer counter can be derived.
     43           */
     44          

   \                                 In section .text, align 4, keep-with-next
     45          void GeneralPurposeTimerInit()
     46          {
   \                     GeneralPurposeTimerInit: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
     47            uint16 ModValue = 0;
     48            uint32 BusClk=12000000;
     49            /*
     50            Initializing the Configurable Timer
     51            It will use Quad Timer 1
     52            Enable the Quad Timer Clock
     53            Interrupt Frequency Desired= 25ms
     54            Interrupt Frequency in terms of Bus Clock= (Interrupt Time*Bus Freq)
     55            Configuring the Timer in Free Running Mode
     56            */
     57            ModValue = BusClk/1000 ;
     58            ModValue = ModValue / 128;
     59            ModValue=ModValue* TIMER_MOD;
     60            TMR_CH1_Init(TMR_CH_CNTR_EN_CONFIG4(BUS_CLK_DIV128,SEC_CNTR0_INP),
     61                ModValue, 0x0000, 0x0000, ModValue, 0x0000, 1,
     62                &GPTimerEventHander);
   \   00000004   0x....             LDR      R2,??DataTable5_6  ;; 0x915
   \   00000006   0x....             LDR      R0,??DataTable5_7
   \   00000008   0x9004             STR      R0,[SP, #+16]
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0x9003             STR      R0,[SP, #+12]
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x9002             STR      R0,[SP, #+8]
   \   00000012   0x9201             STR      R2,[SP, #+4]
   \   00000014   0x9000             STR      R0,[SP, #+0]
   \   00000016   0x2300             MOVS     R3,#+0
   \   00000018   0x....             ADR.N    R0,?_2
   \   0000001A   0xC803             LDM      R0,{R0,R1}
   \   0000001C   0x.... 0x....      BL       TMR_CH1_Init
     63          
     64          }
   \   00000020   0xB005             ADD      SP,SP,#+20
   \   00000022   0xBD00             POP      {PC}             ;; return
     65          

   \                                 In section .text, align 2, keep-with-next
     66          void GPTimerEventHander(TMR_CH_CALLBACK_TYPE type)
     67          {
     68            if(type==COMPARE_CALLBACK)
   \                     GPTimerEventHander: (+1)
   \   00000000   0x2802             CMP      R0,#+2
   \   00000002   0xD10E             BNE      ??GPTimerEventHander_0
     69            {
     70              /*Toggling GPIO at a frequency of 1sec    */
     71              if(OneSecTimer)
   \   00000004   0x....             LDR      R0,??DataTable5_8
   \   00000006   0x7801             LDRB     R1,[R0, #+0]
   \   00000008   0x2900             CMP      R1,#+0
   \   0000000A   0xD00A             BEQ      ??GPTimerEventHander_0
     72              {
     73                OneSecTimer--;
   \   0000000C   0x1E49             SUBS     R1,R1,#+1
   \   0000000E   0x7001             STRB     R1,[R0, #+0]
     74                if(OneSecTimer==0)
   \   00000010   0x0609             LSLS     R1,R1,#+24
   \   00000012   0xD106             BNE      ??GPTimerEventHander_0
     75                {
     76                  GPIO_Tgl(GPIOD,PIN1);
   \   00000014   0x....             LDR      R1,??DataTable5_5  ;; 0x400ff003
   \   00000016   0x780A             LDRB     R2,[R1, #+0]
   \   00000018   0x2302             MOVS     R3,#+2
   \   0000001A   0x4053             EORS     R3,R3,R2
   \   0000001C   0x700B             STRB     R3,[R1, #+0]
     77                  OneSecTimer=40;
   \   0000001E   0x2128             MOVS     R1,#+40
   \   00000020   0x7001             STRB     R1,[R0, #+0]
     78                }
     79              }
     80            }
     81          }
   \                     ??GPTimerEventHander_0: (+1)
   \   00000022   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x4003E000         DC32     0x4003e000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x4003F004         DC32     0x4003f004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x786CBDF2         DC32     0x786cbdf2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x07AB7FC8         DC32     0x7ab7fc8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0xD0116A1F         DC32     0xd0116a1f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x400FF003         DC32     0x400ff003

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x00000915         DC32     0x915

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x........         DC32     GPTimerEventHander

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0x........         DC32     OneSecTimer

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x00 0x80          DC8 0, 128, 128, 8, 2, 1, 128, 0
   \              0x80 0x08    
   \              0x02 0x01    
   \              0x80 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x00000104         DC32 260, 0
   \              0x00000000   

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x3E20 0x4000      DC16 15904, 16384, 0, 15
   \              0x0000 0x000F
     82          
     83          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   GPTimerEventHander
      24   GeneralPurposeTimerInit
        24   -> TMR_CH1_Init
      24   main
        24   -> FLL_Init
        24   -> PORTD_Init
        24   -> TMR_CH1_Init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       8  ?_0
       8  ?_1
       8  ?_2
      36  GPTimerEventHander
      36  GeneralPurposeTimerInit
       1  OneSecTimer
     126  main

 
   1 byte  in section .bss
 258 bytes in section .text
 
 258 bytes of CODE memory
   1 byte  of DATA memory

Errors: none
Warnings: none
