###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        08/Feb/2017  13:32:00
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\llwu\llwu.c
#    Command line =  
#        C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\llwu\llwu.c -D NDEBUG -lCN
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\uart_test\Release\List\
#        -o
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\uart_test\Release\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ --no_mem_idioms -e --fpu=None --dlib_config
#        D:\IAR7.4anzhuang\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\uart_test\..\..\..\..\src\common\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\uart_test\..\..\..\..\src\drivers\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\uart_test\..\..\..\..\src\freemaster\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\uart_test\..\..\..\..\src\projects\uart_test\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\uart_test\..\..\..\..\src\toolchain\iar\
#        -On --require_prototypes
#    List file    =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\uart_test\Release\List\llwu.lst
#    Object file  =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\uart_test\Release\Obj\llwu.o
#
###############################################################################

C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\llwu\llwu.c
      1          /******************************************************************************
      2           * (c) Copyright 2010-2015, Freescale Semiconductor Inc.
      3           * ALL RIGHTS RESERVED.
      4           ***************************************************************************//*!
      5           * @file      llwu.c
      6           * @version   1.0.5.0
      7           * @date      Jun-03-2015
      8           * @brief     Low-Leakage Wakeup Unit (LLWU) driver source code.
      9           ******************************************************************************/
     10          #include "common.h"
     11          #include "llwu.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp uint32 LLWU_GetFlags(void)
   \                     LLWU_GetFlags: (+1)
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0x....             LDR      R0,??DataTable2  ;; 0x4007c009
   \   00000004   0x7803             LDRB     R3,[R0, #+0]
   \   00000006   0x....             LDR      R0,??DataTable2_1  ;; 0x4007c008
   \   00000008   0x7800             LDRB     R0,[R0, #+0]
   \   0000000A   0x....             LDR      R1,??DataTable2_2  ;; 0x4007c007
   \   0000000C   0x7809             LDRB     R1,[R1, #+0]
   \   0000000E   0x....             LDR      R2,??DataTable2_3  ;; 0x4007c006
   \   00000010   0x7812             LDRB     R2,[R2, #+0]
   \   00000012   0xB2DB             UXTB     R3,R3
   \   00000014   0x2480             MOVS     R4,#+128
   \   00000016   0x4023             ANDS     R3,R3,R4
   \   00000018   0x05DB             LSLS     R3,R3,#+23
   \   0000001A   0xB2C0             UXTB     R0,R0
   \   0000001C   0x2480             MOVS     R4,#+128
   \   0000001E   0x4020             ANDS     R0,R0,R4
   \   00000020   0x0580             LSLS     R0,R0,#+22
   \   00000022   0x4318             ORRS     R0,R0,R3
   \   00000024   0xB2C9             UXTB     R1,R1
   \   00000026   0x0409             LSLS     R1,R1,#+16
   \   00000028   0x4301             ORRS     R1,R1,R0
   \   0000002A   0xB2D2             UXTB     R2,R2
   \   0000002C   0x0212             LSLS     R2,R2,#+8
   \   0000002E   0x430A             ORRS     R2,R2,R1
   \   00000030   0x....             LDR      R0,??DataTable2_4  ;; 0x4007c005
   \   00000032   0x7800             LDRB     R0,[R0, #+0]
   \   00000034   0xB2C0             UXTB     R0,R0
   \   00000036   0x4310             ORRS     R0,R0,R2
   \   00000038   0xBC10             POP      {R4}
   \   0000003A   0x4770             BX       LR               ;; return
     12          
     13          #if !defined(MCU_MKM34ZA5)
     14            #error "The llwu.c module is specific to the MKMxxZxxACxx5 microcontrollers."
     15          #endif
     16          /******************************************************************************
     17           * data type definitions                                                      *
     18           ******************************************************************************/

   \                                 In section .bss, align 4
     19          static LLWU_CALLBACK pCallbackLLWU;
   \                     pCallbackLLWU:
   \   00000000                      DS8 4
     20          
     21          /******************************************************************************
     22           * public function definitions                                                *
     23           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     24          void LLWU_Init (tLLWU llwu, uint8 ip, LLWU_CALLBACK pCallback)
     25          {
   \                     LLWU_Init: (+1)
   \   00000000   0xB503             PUSH     {R0,R1,LR}
     26            if (pCallback) { pCallbackLLWU = pCallback; NVIC_SetIsr(INT_LLWU,ip); }
   \   00000002   0x0018             MOVS     R0,R3
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD016             BEQ      ??LLWU_Init_0
   \   00000008   0x....             LDR      R0,??DataTable2_5
   \   0000000A   0x6003             STR      R3,[R0, #+0]
   \   0000000C   0x....             LDR      R0,??DataTable2_6  ;; 0xe000e280
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0x2180             MOVS     R1,#+128
   \   00000012   0x0149             LSLS     R1,R1,#+5        ;; #+4096
   \   00000014   0x4301             ORRS     R1,R1,R0
   \   00000016   0x....             LDR      R0,??DataTable2_6  ;; 0xe000e280
   \   00000018   0x6001             STR      R1,[R0, #+0]
   \   0000001A   0x....             LDR      R0,??DataTable2_7  ;; 0xe000e100
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0x2180             MOVS     R1,#+128
   \   00000020   0x0149             LSLS     R1,R1,#+5        ;; #+4096
   \   00000022   0x4301             ORRS     R1,R1,R0
   \   00000024   0x....             LDR      R0,??DataTable2_7  ;; 0xe000e100
   \   00000026   0x6001             STR      R1,[R0, #+0]
   \   00000028   0x....             LDR      R0,??DataTable2_8  ;; 0xe000e40c
   \   0000002A   0x6800             LDR      R0,[R0, #+0]
   \   0000002C   0xB2D2             UXTB     R2,R2
   \   0000002E   0x0191             LSLS     R1,R2,#+6
   \   00000030   0x4301             ORRS     R1,R1,R0
   \   00000032   0x....             LDR      R0,??DataTable2_8  ;; 0xe000e40c
   \   00000034   0x6001             STR      R1,[R0, #+0]
     27            LLWU_PE1    = llwu.PE1;
   \                     ??LLWU_Init_0: (+1)
   \   00000036   0x4668             MOV      R0,SP
   \   00000038   0x7800             LDRB     R0,[R0, #+0]
   \   0000003A   0x....             LDR      R1,??DataTable2_9  ;; 0x4007c000
   \   0000003C   0x7008             STRB     R0,[R1, #+0]
     28            LLWU_PE2    = llwu.PE2;
   \   0000003E   0x4668             MOV      R0,SP
   \   00000040   0x7840             LDRB     R0,[R0, #+1]
   \   00000042   0x....             LDR      R1,??DataTable2_10  ;; 0x4007c001
   \   00000044   0x7008             STRB     R0,[R1, #+0]
     29            LLWU_PE3    = llwu.PE3;
   \   00000046   0x4668             MOV      R0,SP
   \   00000048   0x7880             LDRB     R0,[R0, #+2]
   \   0000004A   0x....             LDR      R1,??DataTable2_11  ;; 0x4007c002
   \   0000004C   0x7008             STRB     R0,[R1, #+0]
     30            LLWU_PE4    = llwu.PE4;
   \   0000004E   0x4668             MOV      R0,SP
   \   00000050   0x78C0             LDRB     R0,[R0, #+3]
   \   00000052   0x....             LDR      R1,??DataTable2_12  ;; 0x4007c003
   \   00000054   0x7008             STRB     R0,[R1, #+0]
     31            LLWU_ME     = llwu.ME;
   \   00000056   0x4668             MOV      R0,SP
   \   00000058   0x7900             LDRB     R0,[R0, #+4]
   \   0000005A   0x....             LDR      R1,??DataTable2_13  ;; 0x4007c004
   \   0000005C   0x7008             STRB     R0,[R1, #+0]
     32            LLWU_FILT1  = llwu.FILT1;
   \   0000005E   0x4668             MOV      R0,SP
   \   00000060   0x7940             LDRB     R0,[R0, #+5]
   \   00000062   0x....             LDR      R1,??DataTable2_1  ;; 0x4007c008
   \   00000064   0x7008             STRB     R0,[R1, #+0]
     33            LLWU_FILT2  = llwu.FILT2;
   \   00000066   0x4668             MOV      R0,SP
   \   00000068   0x7980             LDRB     R0,[R0, #+6]
   \   0000006A   0x....             LDR      R1,??DataTable2  ;; 0x4007c009
   \   0000006C   0x7008             STRB     R0,[R1, #+0]
     34          
     35            /* clear flags                                                              */
     36            LLWU_ClrFlags(LLWU_ALL);
   \   0000006E   0x20FF             MOVS     R0,#+255
   \   00000070   0x....             LDR      R1,??DataTable2_4  ;; 0x4007c005
   \   00000072   0x7008             STRB     R0,[R1, #+0]
   \   00000074   0x20FF             MOVS     R0,#+255
   \   00000076   0x....             LDR      R1,??DataTable2_3  ;; 0x4007c006
   \   00000078   0x7008             STRB     R0,[R1, #+0]
   \   0000007A   0x....             LDR      R0,??DataTable2_1  ;; 0x4007c008
   \   0000007C   0x7800             LDRB     R0,[R0, #+0]
   \   0000007E   0x20FF             MOVS     R0,#+255
   \   00000080   0x....             LDR      R1,??DataTable2_1  ;; 0x4007c008
   \   00000082   0x7008             STRB     R0,[R1, #+0]
   \   00000084   0x....             LDR      R0,??DataTable2  ;; 0x4007c009
   \   00000086   0x7800             LDRB     R0,[R0, #+0]
   \   00000088   0x20FF             MOVS     R0,#+255
   \   0000008A   0x....             LDR      R1,??DataTable2  ;; 0x4007c009
   \   0000008C   0x7008             STRB     R0,[R1, #+0]
     37          }
   \   0000008E   0xBD03             POP      {R0,R1,PC}       ;; return
     38          
     39          /******************************************************************************
     40           * interrupt function definitions                                             *
     41           ******************************************************************************/
     42          #if defined(__ICCARM__)
     43            #pragma diag_suppress=Pa082
     44          #endif

   \                                 In section .text, align 2, keep-with-next
     45          weak void llwu_isr (void)
     46          {
   \                     llwu_isr: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     47            register uint32 tmp = LLWU_GetFlags();
   \   00000002   0x.... 0x....      BL       LLWU_GetFlags
   \   00000006   0x0004             MOVS     R4,R0
     48          
     49            /* clear flags                                                              */
     50            LLWU_ClrFlags (LLWU_ALL);
   \   00000008   0x20FF             MOVS     R0,#+255
   \   0000000A   0x....             LDR      R1,??DataTable2_4  ;; 0x4007c005
   \   0000000C   0x7008             STRB     R0,[R1, #+0]
   \   0000000E   0x20FF             MOVS     R0,#+255
   \   00000010   0x....             LDR      R1,??DataTable2_3  ;; 0x4007c006
   \   00000012   0x7008             STRB     R0,[R1, #+0]
   \   00000014   0x....             LDR      R0,??DataTable2_1  ;; 0x4007c008
   \   00000016   0x7800             LDRB     R0,[R0, #+0]
   \   00000018   0x20FF             MOVS     R0,#+255
   \   0000001A   0x....             LDR      R1,??DataTable2_1  ;; 0x4007c008
   \   0000001C   0x7008             STRB     R0,[R1, #+0]
   \   0000001E   0x....             LDR      R0,??DataTable2  ;; 0x4007c009
   \   00000020   0x7800             LDRB     R0,[R0, #+0]
   \   00000022   0x20FF             MOVS     R0,#+255
   \   00000024   0x....             LDR      R1,??DataTable2  ;; 0x4007c009
   \   00000026   0x7008             STRB     R0,[R1, #+0]
     51          
     52            /* call callback function                                                   */
     53            pCallbackLLWU (tmp);
   \   00000028   0x0020             MOVS     R0,R4
   \   0000002A   0x....             LDR      R1,??DataTable2_5
   \   0000002C   0x6809             LDR      R1,[R1, #+0]
   \   0000002E   0x4788             BLX      R1
     54          }
   \   00000030   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x4007C009         DC32     0x4007c009

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x4007C008         DC32     0x4007c008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x4007C007         DC32     0x4007c007

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x4007C006         DC32     0x4007c006

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x4007C005         DC32     0x4007c005

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x........         DC32     pCallbackLLWU

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0xE000E280         DC32     0xe000e280

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   0xE000E40C         DC32     0xe000e40c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \   00000000   0x4007C000         DC32     0x4007c000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_10:
   \   00000000   0x4007C001         DC32     0x4007c001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_11:
   \   00000000   0x4007C002         DC32     0x4007c002

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_12:
   \   00000000   0x4007C003         DC32     0x4007c003

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_13:
   \   00000000   0x4007C004         DC32     0x4007c004
     55          /******************************************************************************
     56           * End of module                                                              *
     57           ******************************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       4   LLWU_GetFlags
      12   LLWU_Init
       8   llwu_isr
         8   -- Indirect call
         8   -> LLWU_GetFlags


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_11
       4  ??DataTable2_12
       4  ??DataTable2_13
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
      60  LLWU_GetFlags
     144  LLWU_Init
      50  llwu_isr
       4  pCallbackLLWU

 
   4 bytes in section .bss
 310 bytes in section .text
 
 310 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none
