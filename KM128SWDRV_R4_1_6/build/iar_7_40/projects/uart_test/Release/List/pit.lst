###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        08/Feb/2017  13:32:00
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\pit\pit.c
#    Command line =  
#        C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\pit\pit.c -D NDEBUG -lCN
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\uart_test\Release\List\
#        -o
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\uart_test\Release\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ --no_mem_idioms -e --fpu=None --dlib_config
#        D:\IAR7.4anzhuang\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\uart_test\..\..\..\..\src\common\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\uart_test\..\..\..\..\src\drivers\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\uart_test\..\..\..\..\src\freemaster\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\uart_test\..\..\..\..\src\projects\uart_test\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\uart_test\..\..\..\..\src\toolchain\iar\
#        -On --require_prototypes
#    List file    =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\uart_test\Release\List\pit.lst
#    Object file  =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\uart_test\Release\Obj\pit.o
#
###############################################################################

C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\pit\pit.c
      1          /******************************************************************************
      2           * (c) Copyright 2010-2015, Freescale Semiconductor Inc.
      3           * ALL RIGHTS RESERVED.
      4           ***************************************************************************//*!
      5           * @file      pit.c
      6           * @version   1.0.4.0
      7           * @date      Feb-02-2015
      8           * @brief     Periodic Interrupt Timer (PIT) driver source code.
      9           ******************************************************************************/
     10          #include "common.h"
     11          #include "pit.h"
     12          
     13          /******************************************************************************
     14           * data type definitions                                                      *
     15           ******************************************************************************/

   \                                 In section .bss, align 4
     16          static PIT_CALLBACK pCallbackPITx;
   \                     pCallbackPITx:
   \   00000000                      DS8 4
     17          
     18          /******************************************************************************
     19           * public function definitions                                                *
     20           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     21          void PIT_InstallCallback (uint8 ip, PIT_CALLBACK pCallback)
     22          {
   \                     PIT_InstallCallback: (+1)
   \   00000000   0xB500             PUSH     {LR}
     23            if (pCallback) { pCallbackPITx = pCallback; NVIC_SetIsr(INT_PIT0_PIT1,ip); }
   \   00000002   0x000A             MOVS     R2,R1
   \   00000004   0x2A00             CMP      R2,#+0
   \   00000006   0xD016             BEQ      ??PIT_InstallCallback_0
   \   00000008   0x....             LDR      R2,??DataTable5
   \   0000000A   0x6011             STR      R1,[R2, #+0]
   \   0000000C   0x....             LDR      R2,??DataTable5_1  ;; 0xe000e280
   \   0000000E   0x6812             LDR      R2,[R2, #+0]
   \   00000010   0x2380             MOVS     R3,#+128
   \   00000012   0x011B             LSLS     R3,R3,#+4        ;; #+2048
   \   00000014   0x4313             ORRS     R3,R3,R2
   \   00000016   0x....             LDR      R2,??DataTable5_1  ;; 0xe000e280
   \   00000018   0x6013             STR      R3,[R2, #+0]
   \   0000001A   0x....             LDR      R2,??DataTable5_2  ;; 0xe000e100
   \   0000001C   0x6812             LDR      R2,[R2, #+0]
   \   0000001E   0x2380             MOVS     R3,#+128
   \   00000020   0x011B             LSLS     R3,R3,#+4        ;; #+2048
   \   00000022   0x4313             ORRS     R3,R3,R2
   \   00000024   0x....             LDR      R2,??DataTable5_2  ;; 0xe000e100
   \   00000026   0x6013             STR      R3,[R2, #+0]
   \   00000028   0x....             LDR      R2,??DataTable5_3  ;; 0xe000e408
   \   0000002A   0x6812             LDR      R2,[R2, #+0]
   \   0000002C   0xB2C0             UXTB     R0,R0
   \   0000002E   0x0783             LSLS     R3,R0,#+30
   \   00000030   0x4313             ORRS     R3,R3,R2
   \   00000032   0x....             LDR      R2,??DataTable5_3  ;; 0xe000e408
   \   00000034   0x6013             STR      R3,[R2, #+0]
     24          }
   \                     ??PIT_InstallCallback_0: (+1)
   \   00000036   0xBD00             POP      {PC}             ;; return
     25          

   \                                 In section .text, align 2, keep-with-next
     26          void PIT0_CH0_Init  (tPIT_CH ch, uint32 val)
     27          {
     28            PIT0_MCR    &= ~0x0002;             /* clear MDIS bit to enables clock      */
   \                     PIT0_CH0_Init: (+1)
   \   00000000   0x....             LDR      R2,??DataTable5_4  ;; 0x4002d000
   \   00000002   0x6812             LDR      R2,[R2, #+0]
   \   00000004   0x2302             MOVS     R3,#+2
   \   00000006   0x439A             BICS     R2,R2,R3
   \   00000008   0x....             LDR      R3,??DataTable5_4  ;; 0x4002d000
   \   0000000A   0x601A             STR      R2,[R3, #+0]
     29            PIT0_LDVAL0  = val;
   \   0000000C   0x....             LDR      R2,??DataTable5_5  ;; 0x4002d100
   \   0000000E   0x6011             STR      R1,[R2, #+0]
     30            PIT0_TFLG0   = PIT_TFLG_TIF_MASK;   /* clear interrupt flag                 */
   \   00000010   0x2201             MOVS     R2,#+1
   \   00000012   0x....             LDR      R3,??DataTable5_6  ;; 0x4002d10c
   \   00000014   0x601A             STR      R2,[R3, #+0]
     31            PIT0_TCTRL0  = ch.TCTRL;
   \   00000016   0x....             LDR      R2,??DataTable5_7  ;; 0x4002d108
   \   00000018   0x6010             STR      R0,[R2, #+0]
     32          }
   \   0000001A   0x4770             BX       LR               ;; return
     33          

   \                                 In section .text, align 2, keep-with-next
     34          void PIT0_CH1_Init  (tPIT_CH ch, uint32 val)
     35          {
     36            PIT0_MCR    &= ~0x0002;             /* clear MDIS bit to enables clock      */
   \                     PIT0_CH1_Init: (+1)
   \   00000000   0x....             LDR      R2,??DataTable5_4  ;; 0x4002d000
   \   00000002   0x6812             LDR      R2,[R2, #+0]
   \   00000004   0x2302             MOVS     R3,#+2
   \   00000006   0x439A             BICS     R2,R2,R3
   \   00000008   0x....             LDR      R3,??DataTable5_4  ;; 0x4002d000
   \   0000000A   0x601A             STR      R2,[R3, #+0]
     37            PIT0_LDVAL1  = val;
   \   0000000C   0x....             LDR      R2,??DataTable5_8  ;; 0x4002d110
   \   0000000E   0x6011             STR      R1,[R2, #+0]
     38            PIT0_TFLG1   = PIT_TFLG_TIF_MASK;   /* clear interrupt flag                 */
   \   00000010   0x2201             MOVS     R2,#+1
   \   00000012   0x....             LDR      R3,??DataTable5_9  ;; 0x4002d11c
   \   00000014   0x601A             STR      R2,[R3, #+0]
     39            PIT0_TCTRL1  = ch.TCTRL;
   \   00000016   0x....             LDR      R2,??DataTable5_10  ;; 0x4002d118
   \   00000018   0x6010             STR      R0,[R2, #+0]
     40          }
   \   0000001A   0x4770             BX       LR               ;; return
     41          

   \                                 In section .text, align 2, keep-with-next
     42          void PIT1_CH0_Init  (tPIT_CH ch, uint32 val)
     43          {
     44            PIT1_MCR    &= ~0x0002;             /* clear MDIS bit to enables clock      */
   \                     PIT1_CH0_Init: (+1)
   \   00000000   0x....             LDR      R2,??DataTable5_11  ;; 0x4002e000
   \   00000002   0x6812             LDR      R2,[R2, #+0]
   \   00000004   0x2302             MOVS     R3,#+2
   \   00000006   0x439A             BICS     R2,R2,R3
   \   00000008   0x....             LDR      R3,??DataTable5_11  ;; 0x4002e000
   \   0000000A   0x601A             STR      R2,[R3, #+0]
     45            PIT1_LDVAL0  = val;
   \   0000000C   0x....             LDR      R2,??DataTable5_12  ;; 0x4002e100
   \   0000000E   0x6011             STR      R1,[R2, #+0]
     46            PIT1_TFLG0   = PIT_TFLG_TIF_MASK;   /* clear interrupt flag                 */
   \   00000010   0x2201             MOVS     R2,#+1
   \   00000012   0x....             LDR      R3,??DataTable5_13  ;; 0x4002e10c
   \   00000014   0x601A             STR      R2,[R3, #+0]
     47            PIT1_TCTRL0  = ch.TCTRL;
   \   00000016   0x....             LDR      R2,??DataTable5_14  ;; 0x4002e108
   \   00000018   0x6010             STR      R0,[R2, #+0]
     48          }
   \   0000001A   0x4770             BX       LR               ;; return
     49          

   \                                 In section .text, align 2, keep-with-next
     50          void PIT1_CH1_Init  (tPIT_CH ch, uint32 val)
     51          {
     52            PIT1_MCR    &= ~0x0002;             /* clear MDIS bit to enables clock      */
   \                     PIT1_CH1_Init: (+1)
   \   00000000   0x....             LDR      R2,??DataTable5_11  ;; 0x4002e000
   \   00000002   0x6812             LDR      R2,[R2, #+0]
   \   00000004   0x2302             MOVS     R3,#+2
   \   00000006   0x439A             BICS     R2,R2,R3
   \   00000008   0x....             LDR      R3,??DataTable5_11  ;; 0x4002e000
   \   0000000A   0x601A             STR      R2,[R3, #+0]
     53            PIT1_LDVAL1  = val;
   \   0000000C   0x....             LDR      R2,??DataTable5_15  ;; 0x4002e110
   \   0000000E   0x6011             STR      R1,[R2, #+0]
     54            PIT1_TFLG1   = PIT_TFLG_TIF_MASK;   /* clear interrupt flag                 */
   \   00000010   0x2201             MOVS     R2,#+1
   \   00000012   0x....             LDR      R3,??DataTable5_16  ;; 0x4002e11c
   \   00000014   0x601A             STR      R2,[R3, #+0]
     55            PIT1_TCTRL1  = ch.TCTRL;
   \   00000016   0x....             LDR      R2,??DataTable5_17  ;; 0x4002e118
   \   00000018   0x6010             STR      R0,[R2, #+0]
     56          }
   \   0000001A   0x4770             BX       LR               ;; return
     57          
     58          /******************************************************************************
     59           * interrupt function definitions                                             *
     60           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     61          weak void pitx_isr (void)
     62          {
   \                     pitx_isr: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     63            /* process PIT0 module callbacks                                            */
     64            if (SIM_SCGC6 & SIM_SCGC6_PIT0_MASK)
   \   00000002   0x....             LDR      R0,??DataTable5_18  ;; 0x4003f03c
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x0480             LSLS     R0,R0,#+18
   \   00000008   0xD515             BPL      ??pitx_isr_0
     65            {
     66              /* CH0 interrupt                                                          */
     67              if (PIT0_TFLG0 == PIT_TFLG_TIF_MASK)
   \   0000000A   0x....             LDR      R0,??DataTable5_6  ;; 0x4002d10c
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x2801             CMP      R0,#+1
   \   00000010   0xD106             BNE      ??pitx_isr_1
     68              {
     69                PIT0_TFLG0 = PIT_TFLG_TIF_MASK;   /* clear interrupt flag               */
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0x....             LDR      R1,??DataTable5_6  ;; 0x4002d10c
   \   00000016   0x6008             STR      R0,[R1, #+0]
     70                pCallbackPITx (PIT0CH0_CALLBACK);
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x....             LDR      R1,??DataTable5
   \   0000001C   0x6809             LDR      R1,[R1, #+0]
   \   0000001E   0x4788             BLX      R1
     71              }
     72          
     73              /* CH1 interrupt                                                          */
     74              if (PIT0_TFLG1 == PIT_TFLG_TIF_MASK)
   \                     ??pitx_isr_1: (+1)
   \   00000020   0x....             LDR      R0,??DataTable5_9  ;; 0x4002d11c
   \   00000022   0x6800             LDR      R0,[R0, #+0]
   \   00000024   0x2801             CMP      R0,#+1
   \   00000026   0xD106             BNE      ??pitx_isr_0
     75              {
     76                PIT0_TFLG1 = PIT_TFLG_TIF_MASK;   /* clear interrupt flag               */
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0x....             LDR      R1,??DataTable5_9  ;; 0x4002d11c
   \   0000002C   0x6008             STR      R0,[R1, #+0]
     77                pCallbackPITx (PIT0CH1_CALLBACK);
   \   0000002E   0x2002             MOVS     R0,#+2
   \   00000030   0x....             LDR      R1,??DataTable5
   \   00000032   0x6809             LDR      R1,[R1, #+0]
   \   00000034   0x4788             BLX      R1
     78              }
     79            }
     80          
     81            /* process PIT1 module iterrupts                                            */
     82            if (SIM_SCGC6 & SIM_SCGC6_PIT1_MASK)
   \                     ??pitx_isr_0: (+1)
   \   00000036   0x....             LDR      R0,??DataTable5_18  ;; 0x4003f03c
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0x0440             LSLS     R0,R0,#+17
   \   0000003C   0xD515             BPL      ??pitx_isr_2
     83            {
     84              /* CH0 interrupt                                                          */
     85              if (PIT1_TFLG0 == PIT_TFLG_TIF_MASK)
   \   0000003E   0x....             LDR      R0,??DataTable5_13  ;; 0x4002e10c
   \   00000040   0x6800             LDR      R0,[R0, #+0]
   \   00000042   0x2801             CMP      R0,#+1
   \   00000044   0xD106             BNE      ??pitx_isr_3
     86              {
     87                PIT1_TFLG0 = PIT_TFLG_TIF_MASK;   /* clear interrupt flag               */
   \   00000046   0x2001             MOVS     R0,#+1
   \   00000048   0x....             LDR      R1,??DataTable5_13  ;; 0x4002e10c
   \   0000004A   0x6008             STR      R0,[R1, #+0]
     88                pCallbackPITx (PIT1CH0_CALLBACK);
   \   0000004C   0x2004             MOVS     R0,#+4
   \   0000004E   0x....             LDR      R1,??DataTable5
   \   00000050   0x6809             LDR      R1,[R1, #+0]
   \   00000052   0x4788             BLX      R1
     89              }
     90          
     91              /* CH1 interrupt                                                          */
     92              if (PIT1_TFLG1 == PIT_TFLG_TIF_MASK)
   \                     ??pitx_isr_3: (+1)
   \   00000054   0x....             LDR      R0,??DataTable5_16  ;; 0x4002e11c
   \   00000056   0x6800             LDR      R0,[R0, #+0]
   \   00000058   0x2801             CMP      R0,#+1
   \   0000005A   0xD106             BNE      ??pitx_isr_2
     93              {
     94                PIT1_TFLG1 = PIT_TFLG_TIF_MASK;   /* clear interrupt flag               */
   \   0000005C   0x2001             MOVS     R0,#+1
   \   0000005E   0x....             LDR      R1,??DataTable5_16  ;; 0x4002e11c
   \   00000060   0x6008             STR      R0,[R1, #+0]
     95                pCallbackPITx (PIT1CH1_CALLBACK);
   \   00000062   0x2008             MOVS     R0,#+8
   \   00000064   0x....             LDR      R1,??DataTable5
   \   00000066   0x6809             LDR      R1,[R1, #+0]
   \   00000068   0x4788             BLX      R1
     96              }
     97            }
     98          }
   \                     ??pitx_isr_2: (+1)
   \   0000006A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     pCallbackPITx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0xE000E280         DC32     0xe000e280

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0xE000E408         DC32     0xe000e408

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x4002D000         DC32     0x4002d000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x4002D100         DC32     0x4002d100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x4002D10C         DC32     0x4002d10c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x4002D108         DC32     0x4002d108

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0x4002D110         DC32     0x4002d110

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   0x4002D11C         DC32     0x4002d11c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_10:
   \   00000000   0x4002D118         DC32     0x4002d118

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_11:
   \   00000000   0x4002E000         DC32     0x4002e000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_12:
   \   00000000   0x4002E100         DC32     0x4002e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_13:
   \   00000000   0x4002E10C         DC32     0x4002e10c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_14:
   \   00000000   0x4002E108         DC32     0x4002e108

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_15:
   \   00000000   0x4002E110         DC32     0x4002e110

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_16:
   \   00000000   0x4002E11C         DC32     0x4002e11c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_17:
   \   00000000   0x4002E118         DC32     0x4002e118

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_18:
   \   00000000   0x4003F03C         DC32     0x4003f03c
     99          /******************************************************************************
    100           * End of module                                                              *
    101           ******************************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   PIT0_CH0_Init
       0   PIT0_CH1_Init
       0   PIT1_CH0_Init
       0   PIT1_CH1_Init
       4   PIT_InstallCallback
       8   pitx_isr
         8   -- Indirect call


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_11
       4  ??DataTable5_12
       4  ??DataTable5_13
       4  ??DataTable5_14
       4  ??DataTable5_15
       4  ??DataTable5_16
       4  ??DataTable5_17
       4  ??DataTable5_18
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
      28  PIT0_CH0_Init
      28  PIT0_CH1_Init
      28  PIT1_CH0_Init
      28  PIT1_CH1_Init
      56  PIT_InstallCallback
       4  pCallbackPITx
     108  pitx_isr

 
   4 bytes in section .bss
 352 bytes in section .text
 
 352 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none
