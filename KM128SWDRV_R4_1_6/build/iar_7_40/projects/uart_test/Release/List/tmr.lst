###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        08/Feb/2017  13:32:02
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\tmr\tmr.c
#    Command line =  
#        C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\tmr\tmr.c -D NDEBUG -lCN
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\uart_test\Release\List\
#        -o
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\uart_test\Release\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M0+ --no_mem_idioms -e --fpu=None --dlib_config
#        D:\IAR7.4anzhuang\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\uart_test\..\..\..\..\src\common\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\uart_test\..\..\..\..\src\drivers\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\uart_test\..\..\..\..\src\freemaster\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\uart_test\..\..\..\..\src\projects\uart_test\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\uart_test\..\..\..\..\src\toolchain\iar\
#        -On --require_prototypes
#    List file    =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\uart_test\Release\List\tmr.lst
#    Object file  =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\uart_test\Release\Obj\tmr.o
#
###############################################################################

C:\Freescale\KM128SWDRV_R4_1_6\src\drivers\tmr\tmr.c
      1          /******************************************************************************
      2           * (c) Copyright 2010-2014, Freescale Semiconductor Inc.
      3           * ALL RIGHTS RESERVED.
      4           ***************************************************************************//*!
      5           * @file      tmr.c
      6           * @version   1.0.4.1
      7           * @date      Nov-08-2016
      8           * @brief     Quad Timer (TMR) driver source code.
      9           ******************************************************************************/
     10          #include "common.h"
     11          #include "tmr.h"
     12          
     13          /******************************************************************************
     14           * data type definitions                                                      *
     15           ******************************************************************************/

   \                                 In section .bss, align 4
     16          static TMR_CH_CALLBACK pCallbackTMR0;
   \                     pCallbackTMR0:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     17          static TMR_CH_CALLBACK pCallbackTMR1;
   \                     pCallbackTMR1:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     18          static TMR_CH_CALLBACK pCallbackTMR2;
   \                     pCallbackTMR2:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     19          static TMR_CH_CALLBACK pCallbackTMR3;
   \                     pCallbackTMR3:
   \   00000000                      DS8 4
     20          
     21          /******************************************************************************
     22           * public function definitions                                                *
     23           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     24          void TMR_CH0_Init (tTMR_CH ch, uint16 comp1, uint16 comp2, uint16 load,
     25                             uint16 cmpld1, uint16 cmpld2, uint8 ip, TMR_CH_CALLBACK pCallback)
     26          {
   \                     TMR_CH0_Init: (+1)
   \   00000000   0xB5F7             PUSH     {R0-R2,R4-R7,LR}
   \   00000002   0x9808             LDR      R0,[SP, #+32]
   \   00000004   0x9909             LDR      R1,[SP, #+36]
   \   00000006   0x9A0A             LDR      R2,[SP, #+40]
   \   00000008   0x9C0B             LDR      R4,[SP, #+44]
   \   0000000A   0x9D0C             LDR      R5,[SP, #+48]
     27            if (pCallback) { pCallbackTMR0 = pCallback; NVIC_SetIsr(INT_TMR0,ip); }
   \   0000000C   0x002E             MOVS     R6,R5
   \   0000000E   0x2E00             CMP      R6,#+0
   \   00000010   0xD014             BEQ      ??TMR_CH0_Init_0
   \   00000012   0x....             LDR      R6,??DataTable2
   \   00000014   0x6035             STR      R5,[R6, #+0]
   \   00000016   0x....             LDR      R6,??DataTable2_1  ;; 0xe000e280
   \   00000018   0x6837             LDR      R7,[R6, #+0]
   \   0000001A   0x2680             MOVS     R6,#+128
   \   0000001C   0x433E             ORRS     R6,R6,R7
   \   0000001E   0x....             LDR      R7,??DataTable2_1  ;; 0xe000e280
   \   00000020   0x603E             STR      R6,[R7, #+0]
   \   00000022   0x....             LDR      R6,??DataTable2_2  ;; 0xe000e100
   \   00000024   0x6837             LDR      R7,[R6, #+0]
   \   00000026   0x2680             MOVS     R6,#+128
   \   00000028   0x433E             ORRS     R6,R6,R7
   \   0000002A   0x....             LDR      R7,??DataTable2_2  ;; 0xe000e100
   \   0000002C   0x603E             STR      R6,[R7, #+0]
   \   0000002E   0x....             LDR      R6,??DataTable2_3  ;; 0xe000e404
   \   00000030   0x6837             LDR      R7,[R6, #+0]
   \   00000032   0xB2E4             UXTB     R4,R4
   \   00000034   0x07A6             LSLS     R6,R4,#+30
   \   00000036   0x433E             ORRS     R6,R6,R7
   \   00000038   0x....             LDR      R7,??DataTable2_3  ;; 0xe000e404
   \   0000003A   0x603E             STR      R6,[R7, #+0]
     28            TMR0_ENBL   &= ~TMR_ENBL_ENBL(1);
   \                     ??TMR_CH0_Init_0: (+1)
   \   0000003C   0x....             LDR      R6,??DataTable2_4  ;; 0x4005701e
   \   0000003E   0x8837             LDRH     R7,[R6, #+0]
   \   00000040   0x....             LDR      R6,??DataTable2_5  ;; 0xfffe
   \   00000042   0x403E             ANDS     R6,R6,R7
   \   00000044   0x....             LDR      R7,??DataTable2_4  ;; 0x4005701e
   \   00000046   0x803E             STRH     R6,[R7, #+0]
     29            TMR0_CNTR    = load;
   \   00000048   0x....             LDR      R6,??DataTable2_6  ;; 0x4005700a
   \   0000004A   0x8030             STRH     R0,[R6, #+0]
     30            TMR0_ENBL   |= (TMR_ENBL_ENBL(1) & ch.ENBL);
   \   0000004C   0x....             LDR      R6,??DataTable2_4  ;; 0x4005701e
   \   0000004E   0x8836             LDRH     R6,[R6, #+0]
   \   00000050   0x46B4             MOV      R12,R6
   \   00000052   0x466E             MOV      R6,SP
   \   00000054   0x79B6             LDRB     R6,[R6, #+6]
   \   00000056   0x0037             MOVS     R7,R6
   \   00000058   0x07FF             LSLS     R7,R7,#+31       ;; ZeroExtS R7,R7,#+31,#+31
   \   0000005A   0x0FFF             LSRS     R7,R7,#+31
   \   0000005C   0x4666             MOV      R6,R12
   \   0000005E   0x4337             ORRS     R7,R7,R6
   \   00000060   0x....             LDR      R6,??DataTable2_4  ;; 0x4005701e
   \   00000062   0x8037             STRH     R7,[R6, #+0]
     31          
     32            TMR0_COMP1   = comp1;
   \   00000064   0x466E             MOV      R6,SP
   \   00000066   0x8936             LDRH     R6,[R6, #+8]
   \   00000068   0x....             LDR      R7,??DataTable2_7  ;; 0x40057000
   \   0000006A   0x803E             STRH     R6,[R7, #+0]
     33            TMR0_COMP2   = comp2;
   \   0000006C   0x....             LDR      R6,??DataTable2_8  ;; 0x40057002
   \   0000006E   0x8033             STRH     R3,[R6, #+0]
     34            TMR0_LOAD    = load;
   \   00000070   0x....             LDR      R6,??DataTable2_9  ;; 0x40057006
   \   00000072   0x8030             STRH     R0,[R6, #+0]
     35            TMR0_CMPLD1  = cmpld1;
   \   00000074   0x....             LDR      R6,??DataTable2_10  ;; 0x40057010
   \   00000076   0x8031             STRH     R1,[R6, #+0]
     36            TMR0_CMPLD2  = cmpld2;
   \   00000078   0x....             LDR      R6,??DataTable2_11  ;; 0x40057012
   \   0000007A   0x8032             STRH     R2,[R6, #+0]
     37          
     38            TMR0_SCTRL   = ch.SCTRL;
   \   0000007C   0x466E             MOV      R6,SP
   \   0000007E   0x8876             LDRH     R6,[R6, #+2]
   \   00000080   0x....             LDR      R7,??DataTable2_12  ;; 0x4005700e
   \   00000082   0x803E             STRH     R6,[R7, #+0]
     39            TMR0_CSCTRL  = ch.CSCTRL;
   \   00000084   0x466E             MOV      R6,SP
   \   00000086   0x88B6             LDRH     R6,[R6, #+4]
   \   00000088   0x....             LDR      R7,??DataTable3  ;; 0x40057014
   \   0000008A   0x803E             STRH     R6,[R7, #+0]
     40            TMR0_CTRL    = ch.CTRL;
   \   0000008C   0x466E             MOV      R6,SP
   \   0000008E   0x8836             LDRH     R6,[R6, #+0]
   \   00000090   0x....             LDR      R7,??DataTable5  ;; 0x4005700c
   \   00000092   0x803E             STRH     R6,[R7, #+0]
     41          }
   \   00000094   0xBDF7             POP      {R0-R2,R4-R7,PC}  ;; return
     42          

   \                                 In section .text, align 2, keep-with-next
     43          void TMR_CH1_Init (tTMR_CH ch, uint16 comp1, uint16 comp2, uint16 load,
     44                             uint16 cmpld1, uint16 cmpld2, uint8 ip, TMR_CH_CALLBACK pCallback)
     45          {
   \                     TMR_CH1_Init: (+1)
   \   00000000   0xB5F7             PUSH     {R0-R2,R4-R7,LR}
   \   00000002   0x9808             LDR      R0,[SP, #+32]
   \   00000004   0x9909             LDR      R1,[SP, #+36]
   \   00000006   0x9A0A             LDR      R2,[SP, #+40]
   \   00000008   0x9C0B             LDR      R4,[SP, #+44]
   \   0000000A   0x9D0C             LDR      R5,[SP, #+48]
     46            if (pCallback) { pCallbackTMR1 = pCallback; NVIC_SetIsr(INT_TMR1,ip); }
   \   0000000C   0x002E             MOVS     R6,R5
   \   0000000E   0x2E00             CMP      R6,#+0
   \   00000010   0xD016             BEQ      ??TMR_CH1_Init_0
   \   00000012   0x....             LDR      R6,??DataTable3_1
   \   00000014   0x6035             STR      R5,[R6, #+0]
   \   00000016   0x....             LDR      R6,??DataTable2_1  ;; 0xe000e280
   \   00000018   0x6837             LDR      R7,[R6, #+0]
   \   0000001A   0x2680             MOVS     R6,#+128
   \   0000001C   0x0076             LSLS     R6,R6,#+1        ;; #+256
   \   0000001E   0x433E             ORRS     R6,R6,R7
   \   00000020   0x....             LDR      R7,??DataTable2_1  ;; 0xe000e280
   \   00000022   0x603E             STR      R6,[R7, #+0]
   \   00000024   0x....             LDR      R6,??DataTable2_2  ;; 0xe000e100
   \   00000026   0x6837             LDR      R7,[R6, #+0]
   \   00000028   0x2680             MOVS     R6,#+128
   \   0000002A   0x0076             LSLS     R6,R6,#+1        ;; #+256
   \   0000002C   0x433E             ORRS     R6,R6,R7
   \   0000002E   0x....             LDR      R7,??DataTable2_2  ;; 0xe000e100
   \   00000030   0x603E             STR      R6,[R7, #+0]
   \   00000032   0x....             LDR      R6,??DataTable3_2  ;; 0xe000e408
   \   00000034   0x6837             LDR      R7,[R6, #+0]
   \   00000036   0xB2E4             UXTB     R4,R4
   \   00000038   0x01A6             LSLS     R6,R4,#+6
   \   0000003A   0x433E             ORRS     R6,R6,R7
   \   0000003C   0x....             LDR      R7,??DataTable3_2  ;; 0xe000e408
   \   0000003E   0x603E             STR      R6,[R7, #+0]
     47            TMR0_ENBL   &= ~TMR_ENBL_ENBL(2);
   \                     ??TMR_CH1_Init_0: (+1)
   \   00000040   0x....             LDR      R6,??DataTable2_4  ;; 0x4005701e
   \   00000042   0x8837             LDRH     R7,[R6, #+0]
   \   00000044   0x....             LDR      R6,??DataTable3_3  ;; 0xfffd
   \   00000046   0x403E             ANDS     R6,R6,R7
   \   00000048   0x....             LDR      R7,??DataTable2_4  ;; 0x4005701e
   \   0000004A   0x803E             STRH     R6,[R7, #+0]
     48            TMR1_CNTR    = load;
   \   0000004C   0x....             LDR      R6,??DataTable3_4  ;; 0x4005800a
   \   0000004E   0x8030             STRH     R0,[R6, #+0]
     49            TMR0_ENBL   |= (TMR_ENBL_ENBL(2) & ch.ENBL);
   \   00000050   0x....             LDR      R6,??DataTable2_4  ;; 0x4005701e
   \   00000052   0x8836             LDRH     R6,[R6, #+0]
   \   00000054   0x46B4             MOV      R12,R6
   \   00000056   0x466E             MOV      R6,SP
   \   00000058   0x79B7             LDRB     R7,[R6, #+6]
   \   0000005A   0x2602             MOVS     R6,#+2
   \   0000005C   0x4037             ANDS     R7,R7,R6
   \   0000005E   0x4666             MOV      R6,R12
   \   00000060   0x4337             ORRS     R7,R7,R6
   \   00000062   0x....             LDR      R6,??DataTable2_4  ;; 0x4005701e
   \   00000064   0x8037             STRH     R7,[R6, #+0]
     50          
     51            TMR1_COMP1   = comp1;
   \   00000066   0x466E             MOV      R6,SP
   \   00000068   0x8936             LDRH     R6,[R6, #+8]
   \   0000006A   0x....             LDR      R7,??DataTable4  ;; 0x40058000
   \   0000006C   0x803E             STRH     R6,[R7, #+0]
     52            TMR1_COMP2   = comp2;
   \   0000006E   0x....             LDR      R6,??DataTable4_1  ;; 0x40058002
   \   00000070   0x8033             STRH     R3,[R6, #+0]
     53            TMR1_LOAD    = load;
   \   00000072   0x....             LDR      R6,??DataTable4_2  ;; 0x40058006
   \   00000074   0x8030             STRH     R0,[R6, #+0]
     54            TMR1_CMPLD1  = cmpld1;
   \   00000076   0x....             LDR      R6,??DataTable4_3  ;; 0x40058010
   \   00000078   0x8031             STRH     R1,[R6, #+0]
     55            TMR1_CMPLD2  = cmpld2;
   \   0000007A   0x....             LDR      R6,??DataTable4_4  ;; 0x40058012
   \   0000007C   0x8032             STRH     R2,[R6, #+0]
     56          
     57            TMR1_SCTRL   = ch.SCTRL;
   \   0000007E   0x466E             MOV      R6,SP
   \   00000080   0x8876             LDRH     R6,[R6, #+2]
   \   00000082   0x....             LDR      R7,??DataTable4_5  ;; 0x4005800e
   \   00000084   0x803E             STRH     R6,[R7, #+0]
     58            TMR1_CSCTRL  = ch.CSCTRL;
   \   00000086   0x466E             MOV      R6,SP
   \   00000088   0x88B6             LDRH     R6,[R6, #+4]
   \   0000008A   0x....             LDR      R7,??DataTable4_6  ;; 0x40058014
   \   0000008C   0x803E             STRH     R6,[R7, #+0]
     59            TMR1_CTRL    = ch.CTRL;
   \   0000008E   0x466E             MOV      R6,SP
   \   00000090   0x8836             LDRH     R6,[R6, #+0]
   \   00000092   0x....             LDR      R7,??DataTable6  ;; 0x4005800c
   \   00000094   0x803E             STRH     R6,[R7, #+0]
     60          }
   \   00000096   0xBDF7             POP      {R0-R2,R4-R7,PC}  ;; return
     61          

   \                                 In section .text, align 2, keep-with-next
     62          void TMR_CH2_Init (tTMR_CH ch, uint16 comp1, uint16 comp2, uint16 load,
     63                             uint16 cmpld1, uint16 cmpld2, uint8 ip, TMR_CH_CALLBACK pCallback)
     64          {
   \                     TMR_CH2_Init: (+1)
   \   00000000   0xB5F7             PUSH     {R0-R2,R4-R7,LR}
   \   00000002   0x9808             LDR      R0,[SP, #+32]
   \   00000004   0x9909             LDR      R1,[SP, #+36]
   \   00000006   0x9A0A             LDR      R2,[SP, #+40]
   \   00000008   0x9C0B             LDR      R4,[SP, #+44]
   \   0000000A   0x9D0C             LDR      R5,[SP, #+48]
     65            if (pCallback) { pCallbackTMR2 = pCallback; NVIC_SetIsr(INT_TMR2,ip); }
   \   0000000C   0x002E             MOVS     R6,R5
   \   0000000E   0x2E00             CMP      R6,#+0
   \   00000010   0xD016             BEQ      ??TMR_CH2_Init_0
   \   00000012   0x....             LDR      R6,??DataTable4_7
   \   00000014   0x6035             STR      R5,[R6, #+0]
   \   00000016   0x....             LDR      R6,??DataTable2_1  ;; 0xe000e280
   \   00000018   0x6837             LDR      R7,[R6, #+0]
   \   0000001A   0x2680             MOVS     R6,#+128
   \   0000001C   0x00B6             LSLS     R6,R6,#+2        ;; #+512
   \   0000001E   0x433E             ORRS     R6,R6,R7
   \   00000020   0x....             LDR      R7,??DataTable2_1  ;; 0xe000e280
   \   00000022   0x603E             STR      R6,[R7, #+0]
   \   00000024   0x....             LDR      R6,??DataTable2_2  ;; 0xe000e100
   \   00000026   0x6837             LDR      R7,[R6, #+0]
   \   00000028   0x2680             MOVS     R6,#+128
   \   0000002A   0x00B6             LSLS     R6,R6,#+2        ;; #+512
   \   0000002C   0x433E             ORRS     R6,R6,R7
   \   0000002E   0x....             LDR      R7,??DataTable2_2  ;; 0xe000e100
   \   00000030   0x603E             STR      R6,[R7, #+0]
   \   00000032   0x....             LDR      R6,??DataTable3_2  ;; 0xe000e408
   \   00000034   0x6837             LDR      R7,[R6, #+0]
   \   00000036   0xB2E4             UXTB     R4,R4
   \   00000038   0x03A6             LSLS     R6,R4,#+14
   \   0000003A   0x433E             ORRS     R6,R6,R7
   \   0000003C   0x....             LDR      R7,??DataTable3_2  ;; 0xe000e408
   \   0000003E   0x603E             STR      R6,[R7, #+0]
     66            TMR0_ENBL   &= ~TMR_ENBL_ENBL(4);
   \                     ??TMR_CH2_Init_0: (+1)
   \   00000040   0x....             LDR      R6,??DataTable2_4  ;; 0x4005701e
   \   00000042   0x8837             LDRH     R7,[R6, #+0]
   \   00000044   0x....             LDR      R6,??DataTable5_1  ;; 0xfffb
   \   00000046   0x403E             ANDS     R6,R6,R7
   \   00000048   0x....             LDR      R7,??DataTable2_4  ;; 0x4005701e
   \   0000004A   0x803E             STRH     R6,[R7, #+0]
     67            TMR2_CNTR    = load;
   \   0000004C   0x....             LDR      R6,??DataTable5_2  ;; 0x4005900a
   \   0000004E   0x8030             STRH     R0,[R6, #+0]
     68            TMR0_ENBL   |= (TMR_ENBL_ENBL(4) & ch.ENBL);
   \   00000050   0x....             LDR      R6,??DataTable2_4  ;; 0x4005701e
   \   00000052   0x8836             LDRH     R6,[R6, #+0]
   \   00000054   0x46B4             MOV      R12,R6
   \   00000056   0x466E             MOV      R6,SP
   \   00000058   0x79B7             LDRB     R7,[R6, #+6]
   \   0000005A   0x2604             MOVS     R6,#+4
   \   0000005C   0x4037             ANDS     R7,R7,R6
   \   0000005E   0x4666             MOV      R6,R12
   \   00000060   0x4337             ORRS     R7,R7,R6
   \   00000062   0x....             LDR      R6,??DataTable2_4  ;; 0x4005701e
   \   00000064   0x8037             STRH     R7,[R6, #+0]
     69          
     70            TMR2_COMP1   = comp1;
   \   00000066   0x466E             MOV      R6,SP
   \   00000068   0x8936             LDRH     R6,[R6, #+8]
   \   0000006A   0x....             LDR      R7,??DataTable5_3  ;; 0x40059000
   \   0000006C   0x803E             STRH     R6,[R7, #+0]
     71            TMR2_COMP2   = comp2;
   \   0000006E   0x....             LDR      R6,??DataTable5_4  ;; 0x40059002
   \   00000070   0x8033             STRH     R3,[R6, #+0]
     72            TMR2_LOAD    = load;
   \   00000072   0x....             LDR      R6,??DataTable5_5  ;; 0x40059006
   \   00000074   0x8030             STRH     R0,[R6, #+0]
     73            TMR2_CMPLD1  = cmpld1;
   \   00000076   0x....             LDR      R6,??DataTable5_6  ;; 0x40059010
   \   00000078   0x8031             STRH     R1,[R6, #+0]
     74            TMR2_CMPLD2  = cmpld2;
   \   0000007A   0x....             LDR      R6,??DataTable5_7  ;; 0x40059012
   \   0000007C   0x8032             STRH     R2,[R6, #+0]
     75          
     76            TMR2_SCTRL   = ch.SCTRL;
   \   0000007E   0x466E             MOV      R6,SP
   \   00000080   0x8876             LDRH     R6,[R6, #+2]
   \   00000082   0x....             LDR      R7,??DataTable5_8  ;; 0x4005900e
   \   00000084   0x803E             STRH     R6,[R7, #+0]
     77            TMR2_CSCTRL  = ch.CSCTRL;
   \   00000086   0x466E             MOV      R6,SP
   \   00000088   0x88B6             LDRH     R6,[R6, #+4]
   \   0000008A   0x....             LDR      R7,??DataTable5_9  ;; 0x40059014
   \   0000008C   0x803E             STRH     R6,[R7, #+0]
     78            TMR2_CTRL    = ch.CTRL;
   \   0000008E   0x466E             MOV      R6,SP
   \   00000090   0x8836             LDRH     R6,[R6, #+0]
   \   00000092   0x....             LDR      R7,??DataTable7  ;; 0x4005900c
   \   00000094   0x803E             STRH     R6,[R7, #+0]
     79          }
   \   00000096   0xBDF7             POP      {R0-R2,R4-R7,PC}  ;; return
     80          

   \                                 In section .text, align 2, keep-with-next
     81          void TMR_CH3_Init (tTMR_CH ch, uint16 comp1, uint16 comp2, uint16 load,
     82                             uint16 cmpld1, uint16 cmpld2, uint8 ip, TMR_CH_CALLBACK pCallback)
     83          {
   \                     TMR_CH3_Init: (+1)
   \   00000000   0xB5F7             PUSH     {R0-R2,R4-R7,LR}
   \   00000002   0x9808             LDR      R0,[SP, #+32]
   \   00000004   0x9909             LDR      R1,[SP, #+36]
   \   00000006   0x9A0A             LDR      R2,[SP, #+40]
   \   00000008   0x9C0B             LDR      R4,[SP, #+44]
   \   0000000A   0x9D0C             LDR      R5,[SP, #+48]
     84            if (pCallback) { pCallbackTMR3 = pCallback; NVIC_SetIsr(INT_TMR3,ip); }
   \   0000000C   0x002E             MOVS     R6,R5
   \   0000000E   0x2E00             CMP      R6,#+0
   \   00000010   0xD016             BEQ      ??TMR_CH3_Init_0
   \   00000012   0x....             LDR      R6,??DataTable6_1
   \   00000014   0x6035             STR      R5,[R6, #+0]
   \   00000016   0x....             LDR      R6,??DataTable6_2  ;; 0xe000e280
   \   00000018   0x6837             LDR      R7,[R6, #+0]
   \   0000001A   0x2680             MOVS     R6,#+128
   \   0000001C   0x00F6             LSLS     R6,R6,#+3        ;; #+1024
   \   0000001E   0x433E             ORRS     R6,R6,R7
   \   00000020   0x....             LDR      R7,??DataTable6_2  ;; 0xe000e280
   \   00000022   0x603E             STR      R6,[R7, #+0]
   \   00000024   0x....             LDR      R6,??DataTable6_3  ;; 0xe000e100
   \   00000026   0x6837             LDR      R7,[R6, #+0]
   \   00000028   0x2680             MOVS     R6,#+128
   \   0000002A   0x00F6             LSLS     R6,R6,#+3        ;; #+1024
   \   0000002C   0x433E             ORRS     R6,R6,R7
   \   0000002E   0x....             LDR      R7,??DataTable6_3  ;; 0xe000e100
   \   00000030   0x603E             STR      R6,[R7, #+0]
   \   00000032   0x....             LDR      R6,??DataTable3_2  ;; 0xe000e408
   \   00000034   0x6837             LDR      R7,[R6, #+0]
   \   00000036   0xB2E4             UXTB     R4,R4
   \   00000038   0x05A6             LSLS     R6,R4,#+22
   \   0000003A   0x433E             ORRS     R6,R6,R7
   \   0000003C   0x....             LDR      R7,??DataTable3_2  ;; 0xe000e408
   \   0000003E   0x603E             STR      R6,[R7, #+0]
     85            TMR0_ENBL   &= ~TMR_ENBL_ENBL(8);
   \                     ??TMR_CH3_Init_0: (+1)
   \   00000040   0x....             LDR      R6,??DataTable6_4  ;; 0x4005701e
   \   00000042   0x8837             LDRH     R7,[R6, #+0]
   \   00000044   0x....             LDR      R6,??DataTable6_5  ;; 0xfff7
   \   00000046   0x403E             ANDS     R6,R6,R7
   \   00000048   0x....             LDR      R7,??DataTable6_4  ;; 0x4005701e
   \   0000004A   0x803E             STRH     R6,[R7, #+0]
     86            TMR3_CNTR    = load;
   \   0000004C   0x....             LDR      R6,??DataTable6_6  ;; 0x4005a00a
   \   0000004E   0x8030             STRH     R0,[R6, #+0]
     87            TMR0_ENBL   |= (TMR_ENBL_ENBL(8) & ch.ENBL);
   \   00000050   0x....             LDR      R6,??DataTable6_4  ;; 0x4005701e
   \   00000052   0x8836             LDRH     R6,[R6, #+0]
   \   00000054   0x46B4             MOV      R12,R6
   \   00000056   0x466E             MOV      R6,SP
   \   00000058   0x79B7             LDRB     R7,[R6, #+6]
   \   0000005A   0x2608             MOVS     R6,#+8
   \   0000005C   0x4037             ANDS     R7,R7,R6
   \   0000005E   0x4666             MOV      R6,R12
   \   00000060   0x4337             ORRS     R7,R7,R6
   \   00000062   0x....             LDR      R6,??DataTable6_4  ;; 0x4005701e
   \   00000064   0x8037             STRH     R7,[R6, #+0]
     88          
     89            TMR3_COMP1   = comp1;
   \   00000066   0x466E             MOV      R6,SP
   \   00000068   0x8936             LDRH     R6,[R6, #+8]
   \   0000006A   0x....             LDR      R7,??DataTable7_1  ;; 0x4005a000
   \   0000006C   0x803E             STRH     R6,[R7, #+0]
     90            TMR3_COMP2   = comp2;
   \   0000006E   0x....             LDR      R6,??DataTable7_2  ;; 0x4005a002
   \   00000070   0x8033             STRH     R3,[R6, #+0]
     91            TMR3_LOAD    = load;
   \   00000072   0x....             LDR      R6,??DataTable7_3  ;; 0x4005a006
   \   00000074   0x8030             STRH     R0,[R6, #+0]
     92            TMR3_CMPLD1  = cmpld1;
   \   00000076   0x....             LDR      R6,??DataTable7_4  ;; 0x4005a010
   \   00000078   0x8031             STRH     R1,[R6, #+0]
     93            TMR3_CMPLD2  = cmpld2;
   \   0000007A   0x....             LDR      R6,??DataTable7_5  ;; 0x4005a012
   \   0000007C   0x8032             STRH     R2,[R6, #+0]
     94          
     95            TMR3_SCTRL   = ch.SCTRL;
   \   0000007E   0x466E             MOV      R6,SP
   \   00000080   0x8876             LDRH     R6,[R6, #+2]
   \   00000082   0x....             LDR      R7,??DataTable7_6  ;; 0x4005a00e
   \   00000084   0x803E             STRH     R6,[R7, #+0]
     96            TMR3_CSCTRL  = ch.CSCTRL;
   \   00000086   0x466E             MOV      R6,SP
   \   00000088   0x88B6             LDRH     R6,[R6, #+4]
   \   0000008A   0x....             LDR      R7,??DataTable7_7  ;; 0x4005a014
   \   0000008C   0x803E             STRH     R6,[R7, #+0]
     97            TMR3_CTRL    = ch.CTRL;
   \   0000008E   0x466E             MOV      R6,SP
   \   00000090   0x8836             LDRH     R6,[R6, #+0]
   \   00000092   0x....             LDR      R7,??DataTable7_8  ;; 0x4005a00c
   \   00000094   0x803E             STRH     R6,[R7, #+0]
     98          }
   \   00000096   0xBDF7             POP      {R0-R2,R4-R7,PC}  ;; return
     99          
    100          /******************************************************************************
    101           * interrupt function definitions                                             *
    102           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    103          weak void tmr0_isr (void)
    104          {
   \                     tmr0_isr: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    105            /* process TMR channel 0 interrupt                                          */
    106            /* Check for Compare flag only it its interrupt is enabled                  */
    107            if (((TMR0_SCTRL&TMR_SCTRL_TCFIE_MASK) == TMR_SCTRL_TCFIE_MASK))
   \   00000002   0x....             LDR      R0,??DataTable7_9  ;; 0x4005700e
   \   00000004   0x8800             LDRH     R0,[R0, #+0]
   \   00000006   0xB280             UXTH     R0,R0
   \   00000008   0x0440             LSLS     R0,R0,#+17
   \   0000000A   0xD50B             BPL      ??tmr0_isr_0
    108            {
    109              if (((TMR0_SCTRL&TMR_SCTRL_TCF_MASK) == TMR_SCTRL_TCF_MASK))
   \   0000000C   0x....             LDR      R0,??DataTable7_9  ;; 0x4005700e
   \   0000000E   0x8800             LDRH     R0,[R0, #+0]
   \   00000010   0xB280             UXTH     R0,R0
   \   00000012   0x0400             LSLS     R0,R0,#+16
   \   00000014   0xD506             BPL      ??tmr0_isr_0
    110              {
    111                ioclrh (TMR0_SCTRL,TMR_SCTRL_TCF_MASK);   /* clear interrupt flag       */
   \   00000016   0x....             LDR      R0,??DataTable7_10  ;; 0x7fff
   \   00000018   0x....             LDR      R1,??DataTable7_11  ;; 0x4405700e
   \   0000001A   0x8008             STRH     R0,[R1, #+0]
    112                pCallbackTMR0 (COMPARE_CALLBACK);
   \   0000001C   0x2002             MOVS     R0,#+2
   \   0000001E   0x....             LDR      R1,??DataTable7_12
   \   00000020   0x6809             LDR      R1,[R1, #+0]
   \   00000022   0x4788             BLX      R1
    113              }
    114            }
    115            /* Check for Input capture flag only it its interrupt is enabled            */
    116            if (((TMR0_SCTRL&TMR_SCTRL_IEFIE_MASK) == TMR_SCTRL_IEFIE_MASK))
   \                     ??tmr0_isr_0: (+1)
   \   00000024   0x....             LDR      R0,??DataTable7_9  ;; 0x4005700e
   \   00000026   0x8800             LDRH     R0,[R0, #+0]
   \   00000028   0xB280             UXTH     R0,R0
   \   0000002A   0x0540             LSLS     R0,R0,#+21
   \   0000002C   0xD50B             BPL      ??tmr0_isr_1
    117            {
    118              if (((TMR0_SCTRL&TMR_SCTRL_IEF_MASK) == TMR_SCTRL_IEF_MASK))
   \   0000002E   0x....             LDR      R0,??DataTable7_9  ;; 0x4005700e
   \   00000030   0x8800             LDRH     R0,[R0, #+0]
   \   00000032   0xB280             UXTH     R0,R0
   \   00000034   0x0500             LSLS     R0,R0,#+20
   \   00000036   0xD506             BPL      ??tmr0_isr_1
    119              {
    120                ioclrh (TMR0_SCTRL,TMR_SCTRL_IEF_MASK);   /* clear interrupt flag       */
   \   00000038   0x....             LDR      R0,??DataTable7_13  ;; 0xf7ff
   \   0000003A   0x....             LDR      R1,??DataTable7_11  ;; 0x4405700e
   \   0000003C   0x8008             STRH     R0,[R1, #+0]
    121                pCallbackTMR0 (CAPTURE_CALLBACK);
   \   0000003E   0x2004             MOVS     R0,#+4
   \   00000040   0x....             LDR      R1,??DataTable7_12
   \   00000042   0x6809             LDR      R1,[R1, #+0]
   \   00000044   0x4788             BLX      R1
    122              }
    123            }
    124            /* Check for Overflow flag only it its interrupt is enabled                 */
    125            if (((TMR0_SCTRL&TMR_SCTRL_TOFIE_MASK) == TMR_SCTRL_TOFIE_MASK))
   \                     ??tmr0_isr_1: (+1)
   \   00000046   0x....             LDR      R0,??DataTable7_9  ;; 0x4005700e
   \   00000048   0x8800             LDRH     R0,[R0, #+0]
   \   0000004A   0xB280             UXTH     R0,R0
   \   0000004C   0x04C0             LSLS     R0,R0,#+19
   \   0000004E   0xD50B             BPL      ??tmr0_isr_2
    126            {
    127              if (((TMR0_SCTRL&TMR_SCTRL_TOF_MASK) == TMR_SCTRL_TOF_MASK))
   \   00000050   0x....             LDR      R0,??DataTable7_9  ;; 0x4005700e
   \   00000052   0x8800             LDRH     R0,[R0, #+0]
   \   00000054   0xB280             UXTH     R0,R0
   \   00000056   0x0480             LSLS     R0,R0,#+18
   \   00000058   0xD506             BPL      ??tmr0_isr_2
    128              {
    129                ioclrh (TMR0_SCTRL,TMR_SCTRL_TOF_MASK);   /* clear interrupt flag       */
   \   0000005A   0x....             LDR      R0,??DataTable7_14  ;; 0xdfff
   \   0000005C   0x....             LDR      R1,??DataTable7_11  ;; 0x4405700e
   \   0000005E   0x8008             STRH     R0,[R1, #+0]
    130                pCallbackTMR0 (ROLLOVER_CALLBACK);
   \   00000060   0x2001             MOVS     R0,#+1
   \   00000062   0x....             LDR      R1,??DataTable7_12
   \   00000064   0x6809             LDR      R1,[R1, #+0]
   \   00000066   0x4788             BLX      R1
    131              }
    132            }
    133          }
   \                     ??tmr0_isr_2: (+1)
   \   00000068   0xBD01             POP      {R0,PC}          ;; return
    134          

   \                                 In section .text, align 2, keep-with-next
    135          weak void tmr1_isr (void)
    136          {
   \                     tmr1_isr: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    137            /* process TMR channel 1 interrupt                                          */
    138            /* Check for Compare flag only it its interrupt is enabled                  */
    139            if (((TMR1_SCTRL&TMR_SCTRL_TCFIE_MASK) == TMR_SCTRL_TCFIE_MASK))
   \   00000002   0x....             LDR      R0,??DataTable7_15  ;; 0x4005800e
   \   00000004   0x8800             LDRH     R0,[R0, #+0]
   \   00000006   0xB280             UXTH     R0,R0
   \   00000008   0x0440             LSLS     R0,R0,#+17
   \   0000000A   0xD50B             BPL      ??tmr1_isr_0
    140            {
    141              if (((TMR1_SCTRL&TMR_SCTRL_TCF_MASK) == TMR_SCTRL_TCF_MASK))
   \   0000000C   0x....             LDR      R0,??DataTable7_15  ;; 0x4005800e
   \   0000000E   0x8800             LDRH     R0,[R0, #+0]
   \   00000010   0xB280             UXTH     R0,R0
   \   00000012   0x0400             LSLS     R0,R0,#+16
   \   00000014   0xD506             BPL      ??tmr1_isr_0
    142              {
    143                ioclrh (TMR1_SCTRL,TMR_SCTRL_TCF_MASK);   /* clear interrupt flag       */
   \   00000016   0x....             LDR      R0,??DataTable7_10  ;; 0x7fff
   \   00000018   0x....             LDR      R1,??DataTable7_16  ;; 0x4405800e
   \   0000001A   0x8008             STRH     R0,[R1, #+0]
    144                pCallbackTMR1 (COMPARE_CALLBACK);
   \   0000001C   0x2002             MOVS     R0,#+2
   \   0000001E   0x....             LDR      R1,??DataTable7_17
   \   00000020   0x6809             LDR      R1,[R1, #+0]
   \   00000022   0x4788             BLX      R1
    145              }
    146            }
    147            /* Check for Input capture flag only it its interrupt is enabled            */
    148            if (((TMR1_SCTRL&TMR_SCTRL_IEFIE_MASK) == TMR_SCTRL_IEFIE_MASK))
   \                     ??tmr1_isr_0: (+1)
   \   00000024   0x....             LDR      R0,??DataTable7_15  ;; 0x4005800e
   \   00000026   0x8800             LDRH     R0,[R0, #+0]
   \   00000028   0xB280             UXTH     R0,R0
   \   0000002A   0x0540             LSLS     R0,R0,#+21
   \   0000002C   0xD50B             BPL      ??tmr1_isr_1
    149            {
    150              if (((TMR1_SCTRL&TMR_SCTRL_IEF_MASK) == TMR_SCTRL_IEF_MASK))
   \   0000002E   0x....             LDR      R0,??DataTable7_15  ;; 0x4005800e
   \   00000030   0x8800             LDRH     R0,[R0, #+0]
   \   00000032   0xB280             UXTH     R0,R0
   \   00000034   0x0500             LSLS     R0,R0,#+20
   \   00000036   0xD506             BPL      ??tmr1_isr_1
    151              {
    152                ioclrh (TMR1_SCTRL,TMR_SCTRL_IEF_MASK);   /* clear interrupt flag       */
   \   00000038   0x....             LDR      R0,??DataTable7_13  ;; 0xf7ff
   \   0000003A   0x....             LDR      R1,??DataTable7_16  ;; 0x4405800e
   \   0000003C   0x8008             STRH     R0,[R1, #+0]
    153                pCallbackTMR1 (CAPTURE_CALLBACK);
   \   0000003E   0x2004             MOVS     R0,#+4
   \   00000040   0x....             LDR      R1,??DataTable7_17
   \   00000042   0x6809             LDR      R1,[R1, #+0]
   \   00000044   0x4788             BLX      R1
    154              }
    155            }
    156            /* Check for Overflow flag only it its interrupt is enabled                 */
    157            if (((TMR1_SCTRL&TMR_SCTRL_TOFIE_MASK) == TMR_SCTRL_TOFIE_MASK))
   \                     ??tmr1_isr_1: (+1)
   \   00000046   0x....             LDR      R0,??DataTable7_15  ;; 0x4005800e
   \   00000048   0x8800             LDRH     R0,[R0, #+0]
   \   0000004A   0xB280             UXTH     R0,R0
   \   0000004C   0x04C0             LSLS     R0,R0,#+19
   \   0000004E   0xD50B             BPL      ??tmr1_isr_2
    158            {
    159              if (((TMR1_SCTRL&TMR_SCTRL_TOF_MASK) == TMR_SCTRL_TOF_MASK))
   \   00000050   0x....             LDR      R0,??DataTable7_15  ;; 0x4005800e
   \   00000052   0x8800             LDRH     R0,[R0, #+0]
   \   00000054   0xB280             UXTH     R0,R0
   \   00000056   0x0480             LSLS     R0,R0,#+18
   \   00000058   0xD506             BPL      ??tmr1_isr_2
    160              {
    161                ioclrh (TMR1_SCTRL,TMR_SCTRL_TOF_MASK);   /* clear interrupt flag       */
   \   0000005A   0x....             LDR      R0,??DataTable7_14  ;; 0xdfff
   \   0000005C   0x....             LDR      R1,??DataTable7_16  ;; 0x4405800e
   \   0000005E   0x8008             STRH     R0,[R1, #+0]
    162                pCallbackTMR1 (ROLLOVER_CALLBACK);
   \   00000060   0x2001             MOVS     R0,#+1
   \   00000062   0x....             LDR      R1,??DataTable7_17
   \   00000064   0x6809             LDR      R1,[R1, #+0]
   \   00000066   0x4788             BLX      R1
    163              }
    164            }
    165          }
   \                     ??tmr1_isr_2: (+1)
   \   00000068   0xBD01             POP      {R0,PC}          ;; return
    166          

   \                                 In section .text, align 2, keep-with-next
    167          weak void tmr2_isr (void)
    168          {
   \                     tmr2_isr: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    169            /* process TMR channel 2 interrupt                                          */
    170            /* Check for Compare flag only it its interrupt is enabled                  */
    171            if (((TMR2_SCTRL&TMR_SCTRL_TCFIE_MASK) == TMR_SCTRL_TCFIE_MASK))
   \   00000002   0x....             LDR      R0,??DataTable7_18  ;; 0x4005900e
   \   00000004   0x8800             LDRH     R0,[R0, #+0]
   \   00000006   0xB280             UXTH     R0,R0
   \   00000008   0x0440             LSLS     R0,R0,#+17
   \   0000000A   0xD50B             BPL      ??tmr2_isr_0
    172            {
    173              if (((TMR2_SCTRL&TMR_SCTRL_TCF_MASK) == TMR_SCTRL_TCF_MASK))
   \   0000000C   0x....             LDR      R0,??DataTable7_18  ;; 0x4005900e
   \   0000000E   0x8800             LDRH     R0,[R0, #+0]
   \   00000010   0xB280             UXTH     R0,R0
   \   00000012   0x0400             LSLS     R0,R0,#+16
   \   00000014   0xD506             BPL      ??tmr2_isr_0
    174              {
    175                ioclrh (TMR2_SCTRL,TMR_SCTRL_TCF_MASK);   /* clear interrupt flag       */
   \   00000016   0x....             LDR      R0,??DataTable7_10  ;; 0x7fff
   \   00000018   0x....             LDR      R1,??DataTable7_19  ;; 0x4405900e
   \   0000001A   0x8008             STRH     R0,[R1, #+0]
    176                pCallbackTMR2 (COMPARE_CALLBACK);
   \   0000001C   0x2002             MOVS     R0,#+2
   \   0000001E   0x....             LDR      R1,??DataTable7_20
   \   00000020   0x6809             LDR      R1,[R1, #+0]
   \   00000022   0x4788             BLX      R1
    177              }
    178            }
    179            /* Check for Input capture flag only it its interrupt is enabled            */
    180            if (((TMR2_SCTRL&TMR_SCTRL_IEFIE_MASK) == TMR_SCTRL_IEFIE_MASK))
   \                     ??tmr2_isr_0: (+1)
   \   00000024   0x....             LDR      R0,??DataTable7_18  ;; 0x4005900e
   \   00000026   0x8800             LDRH     R0,[R0, #+0]
   \   00000028   0xB280             UXTH     R0,R0
   \   0000002A   0x0540             LSLS     R0,R0,#+21
   \   0000002C   0xD50B             BPL      ??tmr2_isr_1
    181            {
    182              if (((TMR2_SCTRL&TMR_SCTRL_IEF_MASK) == TMR_SCTRL_IEF_MASK))
   \   0000002E   0x....             LDR      R0,??DataTable7_18  ;; 0x4005900e
   \   00000030   0x8800             LDRH     R0,[R0, #+0]
   \   00000032   0xB280             UXTH     R0,R0
   \   00000034   0x0500             LSLS     R0,R0,#+20
   \   00000036   0xD506             BPL      ??tmr2_isr_1
    183              {
    184                ioclrh (TMR2_SCTRL,TMR_SCTRL_IEF_MASK);   /* clear interrupt flag       */
   \   00000038   0x....             LDR      R0,??DataTable7_13  ;; 0xf7ff
   \   0000003A   0x....             LDR      R1,??DataTable7_19  ;; 0x4405900e
   \   0000003C   0x8008             STRH     R0,[R1, #+0]
    185                pCallbackTMR2 (CAPTURE_CALLBACK);
   \   0000003E   0x2004             MOVS     R0,#+4
   \   00000040   0x....             LDR      R1,??DataTable7_20
   \   00000042   0x6809             LDR      R1,[R1, #+0]
   \   00000044   0x4788             BLX      R1
    186              }
    187            }
    188            /* Check for Overflow flag only it its interrupt is enabled                 */
    189            if (((TMR2_SCTRL&TMR_SCTRL_TOFIE_MASK) == TMR_SCTRL_TOFIE_MASK))
   \                     ??tmr2_isr_1: (+1)
   \   00000046   0x....             LDR      R0,??DataTable7_18  ;; 0x4005900e
   \   00000048   0x8800             LDRH     R0,[R0, #+0]
   \   0000004A   0xB280             UXTH     R0,R0
   \   0000004C   0x04C0             LSLS     R0,R0,#+19
   \   0000004E   0xD50B             BPL      ??tmr2_isr_2
    190            {
    191              if (((TMR2_SCTRL&TMR_SCTRL_TOF_MASK) == TMR_SCTRL_TOF_MASK))
   \   00000050   0x....             LDR      R0,??DataTable7_18  ;; 0x4005900e
   \   00000052   0x8800             LDRH     R0,[R0, #+0]
   \   00000054   0xB280             UXTH     R0,R0
   \   00000056   0x0480             LSLS     R0,R0,#+18
   \   00000058   0xD506             BPL      ??tmr2_isr_2
    192              {
    193                ioclrh (TMR2_SCTRL,TMR_SCTRL_TOF_MASK);   /* clear interrupt flag       */
   \   0000005A   0x....             LDR      R0,??DataTable7_14  ;; 0xdfff
   \   0000005C   0x....             LDR      R1,??DataTable7_19  ;; 0x4405900e
   \   0000005E   0x8008             STRH     R0,[R1, #+0]
    194                pCallbackTMR2 (ROLLOVER_CALLBACK);
   \   00000060   0x2001             MOVS     R0,#+1
   \   00000062   0x....             LDR      R1,??DataTable7_20
   \   00000064   0x6809             LDR      R1,[R1, #+0]
   \   00000066   0x4788             BLX      R1
    195              }
    196            }
    197          }
   \                     ??tmr2_isr_2: (+1)
   \   00000068   0xBD01             POP      {R0,PC}          ;; return
    198          

   \                                 In section .text, align 2, keep-with-next
    199          weak void tmr3_isr (void)
    200          {
   \                     tmr3_isr: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    201            /* process TMR channel 3 interrupt                                          */
    202            /* Check for Compare flag only it its interrupt is enabled                  */
    203            if (((TMR3_SCTRL&TMR_SCTRL_TCFIE_MASK) == TMR_SCTRL_TCFIE_MASK))
   \   00000002   0x....             LDR      R0,??DataTable7_6  ;; 0x4005a00e
   \   00000004   0x8800             LDRH     R0,[R0, #+0]
   \   00000006   0xB280             UXTH     R0,R0
   \   00000008   0x0440             LSLS     R0,R0,#+17
   \   0000000A   0xD50B             BPL      ??tmr3_isr_0
    204            {
    205              if (((TMR3_SCTRL&TMR_SCTRL_TCF_MASK) == TMR_SCTRL_TCF_MASK))
   \   0000000C   0x....             LDR      R0,??DataTable7_6  ;; 0x4005a00e
   \   0000000E   0x8800             LDRH     R0,[R0, #+0]
   \   00000010   0xB280             UXTH     R0,R0
   \   00000012   0x0400             LSLS     R0,R0,#+16
   \   00000014   0xD506             BPL      ??tmr3_isr_0
    206              {
    207                ioclrh (TMR3_SCTRL,TMR_SCTRL_TCF_MASK);   /* clear interrupt flag       */
   \   00000016   0x....             LDR      R0,??DataTable7_10  ;; 0x7fff
   \   00000018   0x....             LDR      R1,??DataTable7_21  ;; 0x4405a00e
   \   0000001A   0x8008             STRH     R0,[R1, #+0]
    208                pCallbackTMR3 (COMPARE_CALLBACK);
   \   0000001C   0x2002             MOVS     R0,#+2
   \   0000001E   0x....             LDR      R1,??DataTable7_22
   \   00000020   0x6809             LDR      R1,[R1, #+0]
   \   00000022   0x4788             BLX      R1
    209              }
    210            }
    211            /* Check for Input capture flag only it its interrupt is enabled            */
    212            if (((TMR3_SCTRL&TMR_SCTRL_IEFIE_MASK) == TMR_SCTRL_IEFIE_MASK))
   \                     ??tmr3_isr_0: (+1)
   \   00000024   0x....             LDR      R0,??DataTable7_6  ;; 0x4005a00e
   \   00000026   0x8800             LDRH     R0,[R0, #+0]
   \   00000028   0xB280             UXTH     R0,R0
   \   0000002A   0x0540             LSLS     R0,R0,#+21
   \   0000002C   0xD50B             BPL      ??tmr3_isr_1
    213            {
    214              if (((TMR3_SCTRL&TMR_SCTRL_IEF_MASK) == TMR_SCTRL_IEF_MASK))
   \   0000002E   0x....             LDR      R0,??DataTable7_6  ;; 0x4005a00e
   \   00000030   0x8800             LDRH     R0,[R0, #+0]
   \   00000032   0xB280             UXTH     R0,R0
   \   00000034   0x0500             LSLS     R0,R0,#+20
   \   00000036   0xD506             BPL      ??tmr3_isr_1
    215              {
    216                ioclrh (TMR3_SCTRL,TMR_SCTRL_IEF_MASK);   /* clear interrupt flag       */
   \   00000038   0x....             LDR      R0,??DataTable7_13  ;; 0xf7ff
   \   0000003A   0x....             LDR      R1,??DataTable7_21  ;; 0x4405a00e
   \   0000003C   0x8008             STRH     R0,[R1, #+0]
    217                pCallbackTMR3 (CAPTURE_CALLBACK);
   \   0000003E   0x2004             MOVS     R0,#+4
   \   00000040   0x....             LDR      R1,??DataTable7_22
   \   00000042   0x6809             LDR      R1,[R1, #+0]
   \   00000044   0x4788             BLX      R1
    218              }
    219            }
    220            /* Check for Overflow flag only it its interrupt is enabled                 */
    221            if (((TMR3_SCTRL&TMR_SCTRL_TOFIE_MASK) == TMR_SCTRL_TOFIE_MASK))
   \                     ??tmr3_isr_1: (+1)
   \   00000046   0x....             LDR      R0,??DataTable7_6  ;; 0x4005a00e
   \   00000048   0x8800             LDRH     R0,[R0, #+0]
   \   0000004A   0xB280             UXTH     R0,R0
   \   0000004C   0x04C0             LSLS     R0,R0,#+19
   \   0000004E   0xD50B             BPL      ??tmr3_isr_2
    222            {
    223              if (((TMR3_SCTRL&TMR_SCTRL_TOF_MASK) == TMR_SCTRL_TOF_MASK))
   \   00000050   0x....             LDR      R0,??DataTable7_6  ;; 0x4005a00e
   \   00000052   0x8800             LDRH     R0,[R0, #+0]
   \   00000054   0xB280             UXTH     R0,R0
   \   00000056   0x0480             LSLS     R0,R0,#+18
   \   00000058   0xD506             BPL      ??tmr3_isr_2
    224              {
    225                ioclrh (TMR3_SCTRL,TMR_SCTRL_TOF_MASK);   /* clear interrupt flag       */
   \   0000005A   0x....             LDR      R0,??DataTable7_14  ;; 0xdfff
   \   0000005C   0x....             LDR      R1,??DataTable7_21  ;; 0x4405a00e
   \   0000005E   0x8008             STRH     R0,[R1, #+0]
    226                pCallbackTMR3 (ROLLOVER_CALLBACK);
   \   00000060   0x2001             MOVS     R0,#+1
   \   00000062   0x....             LDR      R1,??DataTable7_22
   \   00000064   0x6809             LDR      R1,[R1, #+0]
   \   00000066   0x4788             BLX      R1
    227              }
    228            }
    229          }
   \                     ??tmr3_isr_2: (+1)
   \   00000068   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     pCallbackTMR0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0xE000E280         DC32     0xe000e280

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0xE000E404         DC32     0xe000e404

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x4005701E         DC32     0x4005701e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x0000FFFE         DC32     0xfffe

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0x4005700A         DC32     0x4005700a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   0x40057000         DC32     0x40057000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   0x40057002         DC32     0x40057002

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \   00000000   0x40057006         DC32     0x40057006

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_10:
   \   00000000   0x40057010         DC32     0x40057010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_11:
   \   00000000   0x40057012         DC32     0x40057012

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_12:
   \   00000000   0x4005700E         DC32     0x4005700e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x40057014         DC32     0x40057014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     pCallbackTMR1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0xE000E408         DC32     0xe000e408

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x0000FFFD         DC32     0xfffd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x4005800A         DC32     0x4005800a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x40058000         DC32     0x40058000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x40058002         DC32     0x40058002

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x40058006         DC32     0x40058006

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x40058010         DC32     0x40058010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x40058012         DC32     0x40058012

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x4005800E         DC32     0x4005800e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x40058014         DC32     0x40058014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x........         DC32     pCallbackTMR2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x4005700C         DC32     0x4005700c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x0000FFFB         DC32     0xfffb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x4005900A         DC32     0x4005900a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x40059000         DC32     0x40059000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x40059002         DC32     0x40059002

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x40059006         DC32     0x40059006

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x40059010         DC32     0x40059010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x40059012         DC32     0x40059012

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0x4005900E         DC32     0x4005900e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   0x40059014         DC32     0x40059014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x4005800C         DC32     0x4005800c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x........         DC32     pCallbackTMR3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0xE000E280         DC32     0xe000e280

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x4005701E         DC32     0x4005701e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0x0000FFF7         DC32     0xfff7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   0x4005A00A         DC32     0x4005a00a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x4005900C         DC32     0x4005900c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x4005A000         DC32     0x4005a000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x4005A002         DC32     0x4005a002

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x4005A006         DC32     0x4005a006

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0x4005A010         DC32     0x4005a010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   0x4005A012         DC32     0x4005a012

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \   00000000   0x4005A00E         DC32     0x4005a00e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \   00000000   0x4005A014         DC32     0x4005a014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_8:
   \   00000000   0x4005A00C         DC32     0x4005a00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_9:
   \   00000000   0x4005700E         DC32     0x4005700e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_10:
   \   00000000   0x00007FFF         DC32     0x7fff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_11:
   \   00000000   0x4405700E         DC32     0x4405700e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_12:
   \   00000000   0x........         DC32     pCallbackTMR0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_13:
   \   00000000   0x0000F7FF         DC32     0xf7ff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_14:
   \   00000000   0x0000DFFF         DC32     0xdfff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_15:
   \   00000000   0x4005800E         DC32     0x4005800e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_16:
   \   00000000   0x4405800E         DC32     0x4405800e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_17:
   \   00000000   0x........         DC32     pCallbackTMR1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_18:
   \   00000000   0x4005900E         DC32     0x4005900e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_19:
   \   00000000   0x4405900E         DC32     0x4405900e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_20:
   \   00000000   0x........         DC32     pCallbackTMR2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_21:
   \   00000000   0x4405A00E         DC32     0x4405a00e

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_22:
   \   00000000   0x........         DC32     pCallbackTMR3
    230          /******************************************************************************
    231           * End of module                                                              *
    232           ******************************************************************************/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   TMR_CH0_Init
      32   TMR_CH1_Init
      32   TMR_CH2_Init
      32   TMR_CH3_Init
       8   tmr0_isr
         8   -- Indirect call
       8   tmr1_isr
         8   -- Indirect call
       8   tmr2_isr
         8   -- Indirect call
       8   tmr3_isr
         8   -- Indirect call


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_11
       4  ??DataTable2_12
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_10
       4  ??DataTable7_11
       4  ??DataTable7_12
       4  ??DataTable7_13
       4  ??DataTable7_14
       4  ??DataTable7_15
       4  ??DataTable7_16
       4  ??DataTable7_17
       4  ??DataTable7_18
       4  ??DataTable7_19
       4  ??DataTable7_2
       4  ??DataTable7_20
       4  ??DataTable7_21
       4  ??DataTable7_22
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
     150  TMR_CH0_Init
     152  TMR_CH1_Init
     152  TMR_CH2_Init
     152  TMR_CH3_Init
       4  pCallbackTMR0
       4  pCallbackTMR1
       4  pCallbackTMR2
       4  pCallbackTMR3
     106  tmr0_isr
     106  tmr1_isr
     106  tmr2_isr
     106  tmr3_isr

 
    16 bytes in section .bss
 1 294 bytes in section .text
 
 1 294 bytes of CODE memory
    16 bytes of DATA memory

Errors: none
Warnings: none
