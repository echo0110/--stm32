###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        23/Mar/2017  15:37:10
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Freescale\KM128SWDRV_R4_1_6\src\projects\uartisr_test\uartisr_test.c
#    Command line =  
#        C:\Freescale\KM128SWDRV_R4_1_6\src\projects\uartisr_test\uartisr_test.c
#        --no_size_constraints -D NDEBUG -lCN
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\uartisr_test\Release\List\
#        -o
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\uartisr_test\Release\Obj\
#        --no_unroll --debug --endian=little --cpu=Cortex-M0+ --no_mem_idioms
#        -e --fpu=None --dlib_config
#        D:\IAR7.4anzhuang\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\uartisr_test\..\..\..\..\src\common\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\uartisr_test\..\..\..\..\src\drivers\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\uartisr_test\..\..\..\..\src\freemaster\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\uartisr_test\..\..\..\..\src\projects\uartisr_test\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\uartisr_test\..\..\..\..\src\toolchain\iar\
#        -Ohs --require_prototypes
#    List file    =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\uartisr_test\Release\List\uartisr_test.lst
#    Object file  =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40\projects\uartisr_test\Release\Obj\uartisr_test.o
#
###############################################################################

C:\Freescale\KM128SWDRV_R4_1_6\src\projects\uartisr_test\uartisr_test.c
      1          /******************************************************************************
      2           * (c) Copyright 2010-2015, Freescale Semiconductor Inc.
      3           * ALL RIGHTS RESERVED.
      4           ******************************************************************************
      5           * uartisr_test.c
      6           ******************************************************************************/
      7          #include "drivers.h"
      8          
      9          /* uart callback function prototype                                           */
     10          static void uart_callback (UART_CALLBACK_SRC module, UART_CALLBACK_TYPE type,
     11                                     int32 status);

   \                                 In section .bss, align 4
     12          uint8 receCount;
   \                     receCount:
   \   00000000                      DS8 1
     13          uint8 receBuf[32];
     14          /* data type definitions                                                      */
     15          volatile char c;
   \                     c:
   \   00000001                      DS8 1
   \   00000002                      DS8 2
   \                     receBuf:
   \   00000004                      DS8 32
     16          

   \                                 In section .text, align 4, keep-with-next
     17          void main (void)
     18          {
   \                     main: (+1)
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
     19            SIM_Init  (SIM_MODULE_ALL_PERIPH_ON_CONFIG);
   \   00000004   0x....             LDR      R0,??DataTable6  ;; 0x4003e000
   \   00000006   0x2400             MOVS     R4,#+0
   \   00000008   0x6004             STR      R4,[R0, #+0]
   \   0000000A   0x6044             STR      R4,[R0, #+4]
   \   0000000C   0x....             LDR      R0,??DataTable6_1  ;; 0x4003f004
   \   0000000E   0x2101             MOVS     R1,#+1
   \   00000010   0x6001             STR      R1,[R0, #+0]
   \   00000012   0x....             LDR      R1,??DataTable6_2  ;; 0x786cbdf2
   \   00000014   0x6301             STR      R1,[R0, #+48]
   \   00000016   0x....             LDR      R1,??DataTable6_3  ;; 0x7ab7fc8
   \   00000018   0x6341             STR      R1,[R0, #+52]
   \   0000001A   0x....             LDR      R1,??DataTable6_4  ;; 0xd0116a1f
   \   0000001C   0x6381             STR      R1,[R0, #+56]
   \   0000001E   0x2103             MOVS     R1,#+3
   \   00000020   0x63C1             STR      R1,[R0, #+60]
   \   00000022   0x2180             MOVS     R1,#+128
   \   00000024   0x0509             LSLS     R1,R1,#+20       ;; #+134217728
   \   00000026   0x6401             STR      R1,[R0, #+64]
   \   00000028   0x6484             STR      R4,[R0, #+72]
   \   0000002A   0x6684             STR      R4,[R0, #+104]
     20          
     21            /* route core clock to PTF7                                                 */
     22            SIM_SelClkout (CLKOUT_SRC2);
   \   0000002C   0x2540             MOVS     R5,#+64
   \   0000002E   0x....             LDR      R0,??DataTable6_5  ;; 0x5293f004
   \   00000030   0x6005             STR      R5,[R0, #+0]
     23            PORT_Init (PORTF,PORT_MODULE_ALT3_MODE,PIN7);
   \   00000032   0x2280             MOVS     R2,#+128
   \   00000034   0x....             ADR.N    R0,?_0
   \   00000036   0xC803             LDM      R0,{R0,R1}
   \   00000038   0x.... 0x....      BL       PORTF_Init
     24          
     25            /* clock mode 1:1:1, 24MHz                                                  */
     26            SIM_SetClkMode (SYSCLK_MODE0);
   \   0000003C   0x....             LDR      R0,??DataTable6_6  ;; 0x5d83f044
   \   0000003E   0x6004             STR      R4,[R0, #+0]
     27            SIM_SetClkDiv  (SYSCLK_DIV1);
   \   00000040   0x....             LDR      R0,??DataTable6_7  ;; 0x5e1bf044
   \   00000042   0x6004             STR      R4,[R0, #+0]
     28            FLL_Init  (FLL_MODULE_FEE_24MHZ_CONFIG);
   \   00000044   0x....             ADR.N    R0,?_1
   \   00000046   0xC803             LDM      R0,{R0,R1}
   \   00000048   0x.... 0x....      BL       FLL_Init
     29          
     30            /* UART1 init 9600bd                                                        */
     31            PORT_Init   (PORTF, PORT_MODULE_ALT4_MODE, PIN3|PIN4);
   \   0000004C   0x2218             MOVS     R2,#+24
   \   0000004E   0xBF00             Nop      
   \   00000050   0x....             ADR.N    R0,?_2
   \   00000052   0xC803             LDM      R0,{R0,R1}
   \   00000054   0x.... 0x....      BL       PORTF_Init
     32            UART_Init   (UART0, UART_MODULE_INTRMODE_CONFIG(9600,24e6));
   \   00000058   0x....             ADR.N    R0,?_3
   \   0000005A   0xC807             LDM      R0,{R0-R2}
   \   0000005C   0x.... 0x....      BL       UART0_Init
     33            UART_InstallCallback (UART0_UART1, PRI_LVL1, uart_callback);
   \   00000060   0x....             LDR      R1,??DataTable6_8
   \   00000062   0x2001             MOVS     R0,#+1
   \   00000064   0x.... 0x....      BL       UART_InstallCallbackUART0_UART1
     34          
     35            EnableInterrupts();
   \   00000068   0xB662             CPSIE i
     36          
     37            UART_PutStr(UART0,"\n\rCharacters will be echoed on the screen:\n");
   \   0000006A   0x....             LDR      R0,??DataTable6_9  ;; 0x4006a004
   \   0000006C   0xE004             B        ??main_0
   \                     ??main_1: (+1)
   \   0000006E   0x7802             LDRB     R2,[R0, #+0]
   \   00000070   0x422A             TST      R2,R5
   \   00000072   0xD0FC             BEQ      ??main_1
   \   00000074   0x70C1             STRB     R1,[R0, #+3]
   \   00000076   0x1C64             ADDS     R4,R4,#+1
   \                     ??main_0: (+1)
   \   00000078   0x....             ADR.N    R1,?_4
   \   0000007A   0xB2A4             UXTH     R4,R4
   \   0000007C   0x5D09             LDRB     R1,[R1, R4]
   \   0000007E   0x2900             CMP      R1,#+0
   \   00000080   0xD1F5             BNE      ??main_1
     38          
     39            while(1)
   \                     ??main_2: (+1)
   \   00000082   0xE7FE             B        ??main_2
     40            {
     41            
     42            
     43            }
     44           
     45            
     46            
     47          }
     48          
     49          /* uart callback function definition                                          */

   \                                 In section .text, align 2, keep-with-next
     50          static void uart_callback (UART_CALLBACK_SRC module, UART_CALLBACK_TYPE type,
     51                                     int32 status)
     52          {
     53            if (module == UART0_CALLBACK)
   \                     uart_callback: (+1)
   \   00000000   0x2801             CMP      R0,#+1
   \   00000002   0xD116             BNE      ??uart_callback_0
     54            {
     55              if (type == UART_TX_CALLBACK)
   \   00000004   0x2901             CMP      R1,#+1
   \   00000006   0xD107             BNE      ??uart_callback_1
     56              {
     57                UART_PutChar (UART0, c);
   \   00000008   0x....             LDR      R0,??DataTable6_10
   \   0000000A   0x7840             LDRB     R0,[R0, #+1]
   \   0000000C   0x....             LDR      R1,??DataTable6_9  ;; 0x4006a004
   \   0000000E   0x70C8             STRB     R0,[R1, #+3]
     58                UART_TxIsrDisable (UART0);
   \   00000010   0x207F             MOVS     R0,#+127
   \   00000012   0x....             LDR      R1,??DataTable6_11  ;; 0x4406a003
   \   00000014   0x7008             STRB     R0,[R1, #+0]
   \   00000016   0x4770             BX       LR
     59              }
     60              if (type == UART_RX_CALLBACK)
   \                     ??uart_callback_1: (+1)
   \   00000018   0x2902             CMP      R1,#+2
   \   0000001A   0xD10A             BNE      ??uart_callback_0
     61              {
     62                 while(!UART_RxFull(UART0));  
   \                     ??uart_callback_2: (+1)
   \   0000001C   0x....             LDR      R0,??DataTable6_9  ;; 0x4006a004
   \   0000001E   0x7801             LDRB     R1,[R0, #+0]
   \   00000020   0x0689             LSLS     R1,R1,#+26
   \   00000022   0xD5FB             BPL      ??uart_callback_2
     63                	receBuf[receCount]= UART_GetChar(UART0);
   \   00000024   0x....             LDR      R1,??DataTable6_10
   \   00000026   0x780A             LDRB     R2,[R1, #+0]
   \   00000028   0x78C0             LDRB     R0,[R0, #+3]
   \   0000002A   0x188B             ADDS     R3,R1,R2
   \   0000002C   0x7118             STRB     R0,[R3, #+4]
     64                  receCount++; 
   \   0000002E   0x1C52             ADDS     R2,R2,#+1
   \   00000030   0x700A             STRB     R2,[R1, #+0]
     65              }
     66                 
     67            }
     68          }
   \                     ??uart_callback_0: (+1)
   \   00000032   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x4003E000         DC32     0x4003e000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x4003F004         DC32     0x4003f004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x786CBDF2         DC32     0x786cbdf2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x07AB7FC8         DC32     0x7ab7fc8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0xD0116A1F         DC32     0xd0116a1f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0x5293F004         DC32     0x5293f004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   0x5D83F044         DC32     0x5d83f044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \   00000000   0x5E1BF044         DC32     0x5e1bf044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_8:
   \   00000000   0x........         DC32     uart_callback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_9:
   \   00000000   0x4006A004         DC32     0x4006a004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_10:
   \   00000000   0x........         DC32     receCount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_11:
   \   00000000   0x4406A003         DC32     0x4406a003

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \   00000000   0x00000300         DC32 768, 0
   \              0x00000000   

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \   00000000   0x00 0x80          DC8 0, 128, 128, 8, 2, 1, 128, 0
   \              0x80 0x08    
   \              0x02 0x01    
   \              0x80 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \   00000000   0x00000400         DC32 1024, 0
   \              0x00000000   

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \   00000000   0x00 0x9C          DC8 0, 156, 0, 44, 0, 0, 0, 0, 8, 0, 0, 0
   \              0x00 0x2C    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x08 0x00    
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ?_4:
   \   00000000   0x0A 0x0D          DC8 "\012\015Characters will be echoed on the screen:\012"
   \              0x43 0x68    
   \              0x61 0x72    
   \              0x61 0x63    
   \              0x74 0x65    
   \              0x72 0x73    
   \              0x20 0x77    
   \              0x69 0x6C    
   \              0x6C 0x20    
   \              0x62 0x65    
   \              0x20 0x65    
   \              0x63 0x68    
   \              0x6F 0x65    
   \              0x64 0x20    
   \              0x6F 0x6E    
   \              0x20 0x74    
   \              0x68 0x65    
   \              0x20 0x73    
   \              0x63 0x72    
   \              0x65 0x65    
   \              0x6E 0x3A    
   \              0x0A 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   main
        16   -> FLL_Init
        16   -> PORTF_Init
        16   -> UART0_Init
        16   -> UART_InstallCallbackUART0_UART1
       0   uart_callback


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_10
       4  ??DataTable6_11
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
       4  ??DataTable6_8
       4  ??DataTable6_9
       8  ?_0
       8  ?_1
       8  ?_2
      12  ?_3
      44  ?_4
     132  main
      36  receCount
          c
          receBuf
      52  uart_callback

 
  36 bytes in section .bss
 312 bytes in section .text
 
 312 bytes of CODE memory
  36 bytes of DATA memory

Errors: none
Warnings: none
