###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.3.8902/W32 for ARM        07/Feb/2017  17:55:54
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\Freescale\KM128SWDRV_R4_1_6\src\freertos\iar\port.c
#    Command line =  
#        C:\Freescale\KM128SWDRV_R4_1_6\src\freertos\iar\port.c
#        --no_size_constraints -D NDEBUG -lCN
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40_freertos\projects\gpioqueue_test\Release\List\
#        -o
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40_freertos\projects\gpioqueue_test\Release\Obj\
#        --no_unroll --debug --endian=little --cpu=Cortex-M0+ --no_mem_idioms
#        -e --fpu=None --dlib_config
#        D:\IAR7.4anzhuang\arm\INC\c\DLib_Config_Normal.h -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40_freertos\projects\gpioqueue_test\..\..\..\..\src\common\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40_freertos\projects\gpioqueue_test\..\..\..\..\src\drivers\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40_freertos\projects\gpioqueue_test\..\..\..\..\src\freemaster\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40_freertos\projects\gpioqueue_test\..\..\..\..\src\freertos\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40_freertos\projects\gpioqueue_test\..\..\..\..\src\freertos\iar\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40_freertos\projects\gpioqueue_test\..\..\..\..\src\projects\gpioqueue_test\
#        -I
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40_freertos\projects\gpioqueue_test\..\..\..\..\src\toolchain\iar\
#        -Ohs --require_prototypes
#    List file    =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40_freertos\projects\gpioqueue_test\Release\List\port.lst
#    Object file  =  
#        C:\Freescale\KM128SWDRV_R4_1_6\build\iar_7_40_freertos\projects\gpioqueue_test\Release\Obj\port.o
#
###############################################################################

C:\Freescale\KM128SWDRV_R4_1_6\src\freertos\iar\port.c
      1          /*
      2              FreeRTOS V8.2.1 - Copyright (C) 2015 Real Time Engineers Ltd.
      3              All rights reserved
      4          
      5              VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
      6          
      7              This file is part of the FreeRTOS distribution.
      8          
      9              FreeRTOS is free software; you can redistribute it and/or modify it under
     10              the terms of the GNU General Public License (version 2) as published by the
     11              Free Software Foundation >>!AND MODIFIED BY!<< the FreeRTOS exception.
     12          
     13              ***************************************************************************
     14              >>!   NOTE: The modification to the GPL is included to allow you to     !<<
     15              >>!   distribute a combined work that includes FreeRTOS without being   !<<
     16              >>!   obliged to provide the source code for proprietary components     !<<
     17              >>!   outside of the FreeRTOS kernel.                                   !<<
     18              ***************************************************************************
     19          
     20              FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
     21              WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
     22              FOR A PARTICULAR PURPOSE.  Full license text is available on the following
     23              link: http://www.freertos.org/a00114.html
     24          
     25              ***************************************************************************
     26               *                                                                       *
     27               *    FreeRTOS provides completely free yet professionally developed,    *
     28               *    robust, strictly quality controlled, supported, and cross          *
     29               *    platform software that is more than just the market leader, it     *
     30               *    is the industry's de facto standard.                               *
     31               *                                                                       *
     32               *    Help yourself get started quickly while simultaneously helping     *
     33               *    to support the FreeRTOS project by purchasing a FreeRTOS           *
     34               *    tutorial book, reference manual, or both:                          *
     35               *    http://www.FreeRTOS.org/Documentation                              *
     36               *                                                                       *
     37              ***************************************************************************
     38          
     39              http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
     40              the FAQ page "My application does not run, what could be wrong?".  Have you
     41              defined configASSERT()?
     42          
     43              http://www.FreeRTOS.org/support - In return for receiving this top quality
     44              embedded software for free we request you assist our global community by
     45              participating in the support forum.
     46          
     47              http://www.FreeRTOS.org/training - Investing in training allows your team to
     48              be as productive as possible as early as possible.  Now you can receive
     49              FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
     50              Ltd, and the world's leading authority on the world's leading RTOS.
     51          
     52              http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
     53              including FreeRTOS+Trace - an indispensable productivity tool, a DOS
     54              compatible FAT file system, and our tiny thread aware UDP/IP stack.
     55          
     56              http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
     57              Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
     58          
     59              http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
     60              Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
     61              licenses offer ticketed support, indemnification and commercial middleware.
     62          
     63              http://www.SafeRTOS.com - High Integrity Systems also provide a safety
     64              engineered and independently SIL3 certified version for use in safety and
     65              mission critical applications that require provable dependability.
     66          
     67              1 tab == 4 spaces!
     68          */
     69          
     70          /*-----------------------------------------------------------
     71           * Implementation of functions defined in portable.h for the ARM CM0 port.
     72           *----------------------------------------------------------*/
     73          
     74          /* Scheduler includes. */
     75          #include "freertos.h"
     76          #include "task.h"
     77          
     78          /* Constants required to manipulate the NVIC. */
     79          #define portNVIC_SYSTICK_CTRL		( ( volatile uint32_t *) 0xe000e010 )
     80          #define portNVIC_SYSTICK_LOAD		( ( volatile uint32_t *) 0xe000e014 )
     81          #define portNVIC_SYSPRI2			( ( volatile uint32_t *) 0xe000ed20 )
     82          #define portNVIC_SYSTICK_CLK		0x00000004
     83          #define portNVIC_SYSTICK_INT		0x00000002
     84          #define portNVIC_SYSTICK_ENABLE		0x00000001
     85          #define portMIN_INTERRUPT_PRIORITY	( 255UL )
     86          #define portNVIC_PENDSV_PRI			( portMIN_INTERRUPT_PRIORITY << 16UL )
     87          #define portNVIC_SYSTICK_PRI		( portMIN_INTERRUPT_PRIORITY << 24UL )
     88          
     89          /* Constants required to set up the initial stack. */
     90          #define portINITIAL_XPSR			( 0x01000000 )
     91          
     92          /* Each task maintains its own interrupt status in the critical nesting
     93          variable. */

   \                                 In section .data, align 4
     94          static UBaseType_t uxCriticalNesting = 0xaaaaaaaa;
   \                     uxCriticalNesting:
   \   00000000   0xAAAAAAAA         DC32 2863311530
     95          
     96          /*
     97           * Setup the timer to generate the tick interrupts.
     98           */
     99          static void prvSetupTimerInterrupt( void );
    100          
    101          /*
    102           * Exception handlers.
    103           */
    104          void syst_isr( void );
    105          
    106          /*
    107           * Start first task is a separate function so it can be tested in isolation.
    108           */
    109          extern void vPortStartFirstTask( void );
    110          
    111          /*
    112           * Used to catch tasks that attempt to return from their implementing function.
    113           */
    114          static void prvTaskExitError( void );
    115          
    116          /*-----------------------------------------------------------*/
    117          
    118          /*
    119           * See header file for description.
    120           */

   \                                 In section .text, align 2, keep-with-next
    121          StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
    122          {
   \                     pxPortInitialiseStack: (+1)
   \   00000000   0xB410             PUSH     {R4}
   \   00000002   0x0013             MOVS     R3,R2
    123          	/* Simulate the stack frame as it would be created by a context switch
    124          	interrupt. */
    125          	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    126          	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   \   00000004   0x0002             MOVS     R2,R0
   \   00000006   0x3A0C             SUBS     R2,R2,#+12
   \   00000008   0x2480             MOVS     R4,#+128
   \   0000000A   0x0464             LSLS     R4,R4,#+17       ;; #+16777216
   \   0000000C   0x6094             STR      R4,[R2, #+8]
    127          	pxTopOfStack--;
    128          	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   \   0000000E   0x6051             STR      R1,[R2, #+4]
    129          	pxTopOfStack--;
    130          	*pxTopOfStack = ( StackType_t ) prvTaskExitError;	/* LR */
   \   00000010   0x....             LDR      R1,??DataTable7
   \   00000012   0x6011             STR      R1,[R2, #+0]
    131          	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   \   00000014   0x3820             SUBS     R0,R0,#+32
    132          	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   \   00000016   0x6003             STR      R3,[R0, #+0]
    133          	pxTopOfStack -= 8; /* R11..R4. */
    134          
    135          	return pxTopOfStack;
   \   00000018   0x3820             SUBS     R0,R0,#+32
   \   0000001A   0xBC10             POP      {R4}
   \   0000001C   0x4770             BX       LR               ;; return
    136          }
    137          /*-----------------------------------------------------------*/
    138          

   \                                 In section .text, align 4, keep-with-next
    139          static void prvTaskExitError( void )
    140          {
    141          	/* A function that implements a task must not exit or attempt to return to
    142          	its caller as there is nothing to return to.  If a task wants to exit it
    143          	should instead call vTaskDelete( NULL ).
    144          
    145          	Artificially force an assert() to be triggered if configASSERT() is
    146          	defined, then stop here so application writers can catch the error. */
    147          	configASSERT( uxCriticalNesting == ~0UL );
   \                     prvTaskExitError: (+1)
   \   00000000   0x....             LDR      R0,??DataTable7_1
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x43C9             MVNS     R1,R1            ;; #-1
   \   00000008   0x4288             CMP      R0,R1
   \   0000000A   0xD001             BEQ      ??prvTaskExitError_0
   \   0000000C   0xB672             cpsid i
   \                     ??prvTaskExitError_1: (+1)
   \   0000000E   0xE7FE             B        ??prvTaskExitError_1
    148          	portDISABLE_INTERRUPTS();
   \                     ??prvTaskExitError_0: (+1)
   \   00000010   0xB672             cpsid i
    149          	for( ;; );
   \                     ??prvTaskExitError_2: (+1)
   \   00000012   0xE7FE             B        ??prvTaskExitError_2
    150          }
    151          /*-----------------------------------------------------------*/
    152          
    153          /*
    154           * See header file for description.
    155           */

   \                                 In section .text, align 2, keep-with-next
    156          BaseType_t xPortStartScheduler( void )
    157          {
   \                     xPortStartScheduler: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
    158          	/* Make PendSV and SysTick the lowest priority interrupts. */
    159          	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   \   00000004   0x....             LDR      R0,??DataTable7_2  ;; 0xe000ed20
   \   00000006   0x6801             LDR      R1,[R0, #+0]
   \   00000008   0x22FF             MOVS     R2,#+255
   \   0000000A   0x0412             LSLS     R2,R2,#+16       ;; #+16711680
   \   0000000C   0x430A             ORRS     R2,R2,R1
   \   0000000E   0x6002             STR      R2,[R0, #+0]
    160          	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   \   00000010   0x6801             LDR      R1,[R0, #+0]
   \   00000012   0x22FF             MOVS     R2,#+255
   \   00000014   0x0612             LSLS     R2,R2,#+24       ;; #-16777216
   \   00000016   0x430A             ORRS     R2,R2,R1
   \   00000018   0x6002             STR      R2,[R0, #+0]
    161          
    162          	/* Start the timer that generates the tick ISR.  Interrupts are disabled
    163          	here already. */
    164          	prvSetupTimerInterrupt();
   \   0000001A   0x....             LDR      R0,??DataTable7_3  ;; 0xe000e010
   \   0000001C   0x....             LDR      R1,??DataTable7_4  ;; 0x1f3f
   \   0000001E   0x6041             STR      R1,[R0, #+4]
   \   00000020   0x2107             MOVS     R1,#+7
   \   00000022   0x6001             STR      R1,[R0, #+0]
    165          
    166          	/* Initialise the critical nesting count ready for the first task. */
    167          	uxCriticalNesting = 0;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x....             LDR      R1,??DataTable7_1
   \   00000028   0x6008             STR      R0,[R1, #+0]
    168          
    169          	/* Start the first task. */
    170          	vPortStartFirstTask();
   \   0000002A   0x.... 0x....      BL       vPortStartFirstTask
    171          
    172          	/* Should not get here! */
    173          	return 0;
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0xB001             ADD      SP,SP,#+4
   \   00000032   0xBD00             POP      {PC}             ;; return
    174          }
    175          /*-----------------------------------------------------------*/
    176          

   \                                 In section .text, align 4, keep-with-next
    177          void vPortEndScheduler( void )
    178          {
    179          	/* Not implemented in ports where there is nothing to return to.
    180          	Artificially force an assert. */
    181          	configASSERT( uxCriticalNesting == 1000UL );
   \                     vPortEndScheduler: (+1)
   \   00000000   0x....             LDR      R0,??DataTable7_1
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x21FA             MOVS     R1,#+250
   \   00000006   0x0089             LSLS     R1,R1,#+2        ;; #+1000
   \   00000008   0x4288             CMP      R0,R1
   \   0000000A   0xD001             BEQ      ??vPortEndScheduler_0
   \   0000000C   0xB672             cpsid i
   \                     ??vPortEndScheduler_1: (+1)
   \   0000000E   0xE7FE             B        ??vPortEndScheduler_1
    182          }
   \                     ??vPortEndScheduler_0: (+1)
   \   00000010   0x4770             BX       LR               ;; return
    183          /*-----------------------------------------------------------*/
    184          

   \                                 In section .text, align 4, keep-with-next
    185          void vPortYield( void )
    186          {
    187          	/* Set a PendSV to request a context switch. */
    188          	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   \                     vPortYield: (+1)
   \   00000000   0x2080             MOVS     R0,#+128
   \   00000002   0x0540             LSLS     R0,R0,#+21       ;; #+268435456
   \   00000004   0x....             LDR      R1,??DataTable7_5  ;; 0xe000ed04
   \   00000006   0x6008             STR      R0,[R1, #+0]
    189          
    190          	/* Barriers are normally not required but do ensure the code is completely
    191          	within the specified behaviour for the architecture. */
    192          	__asm volatile( "dsb" );
   \   00000008   0xF3BF 0x8F4F      dsb
    193          	__asm volatile( "isb" );
   \   0000000C   0xF3BF 0x8F6F      isb
    194          }
   \   00000010   0x4770             BX       LR               ;; return
    195          /*-----------------------------------------------------------*/
    196          

   \                                 In section .text, align 4, keep-with-next
    197          void vPortEnterCritical( void )
    198          {
    199          	portDISABLE_INTERRUPTS();
   \                     vPortEnterCritical: (+1)
   \   00000000   0xB672             cpsid i
    200          	uxCriticalNesting++;
   \   00000002   0x....             LDR      R0,??DataTable7_1
   \   00000004   0x6801             LDR      R1,[R0, #+0]
   \   00000006   0x1C49             ADDS     R1,R1,#+1
   \   00000008   0x6001             STR      R1,[R0, #+0]
    201          	__asm volatile( "dsb" );
   \   0000000A   0xF3BF 0x8F4F      dsb
    202          	__asm volatile( "isb" );
   \   0000000E   0xF3BF 0x8F6F      isb
    203          }
   \   00000012   0x4770             BX       LR               ;; return
    204          /*-----------------------------------------------------------*/
    205          

   \                                 In section .text, align 4, keep-with-next
    206          void vPortExitCritical( void )
    207          {
    208          	configASSERT( uxCriticalNesting );
   \                     vPortExitCritical: (+1)
   \   00000000   0x....             LDR      R0,??DataTable7_1
   \   00000002   0x6801             LDR      R1,[R0, #+0]
   \   00000004   0x2900             CMP      R1,#+0
   \   00000006   0xD101             BNE      ??vPortExitCritical_0
   \   00000008   0xB672             cpsid i
   \                     ??vPortExitCritical_1: (+1)
   \   0000000A   0xE7FE             B        ??vPortExitCritical_1
    209          	uxCriticalNesting--;
   \                     ??vPortExitCritical_0: (+1)
   \   0000000C   0x1E49             SUBS     R1,R1,#+1
   \   0000000E   0x6001             STR      R1,[R0, #+0]
    210          	if( uxCriticalNesting == 0 )
   \   00000010   0x2900             CMP      R1,#+0
   \   00000012   0xD100             BNE      ??vPortExitCritical_2
    211          	{
    212          		portENABLE_INTERRUPTS ();
   \   00000014   0xB662             cpsie i
    213          	}
    214          }
   \                     ??vPortExitCritical_2: (+1)
   \   00000016   0x4770             BX       LR               ;; return
    215          /*-----------------------------------------------------------*/
    216          

   \                                 In section .text, align 2, keep-with-next
    217          void syst_isr( void )
    218          {
   \                     syst_isr: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
    219          uint32_t ulPreviousMask;
    220          
    221          	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   \   00000002   0x.... 0x....      BL       ulSetInterruptMaskFromISR
   \   00000006   0x0004             MOVS     R4,R0
    222          	{
    223          		/* Increment the RTOS tick. */
    224          		if( xTaskIncrementTick() != pdFALSE )
   \   00000008   0x.... 0x....      BL       xTaskIncrementTick
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xD003             BEQ      ??syst_isr_0
    225          		{
    226          			/* Pend a context switch. */
    227          			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   \   00000010   0x2080             MOVS     R0,#+128
   \   00000012   0x0540             LSLS     R0,R0,#+21       ;; #+268435456
   \   00000014   0x....             LDR      R1,??DataTable7_5  ;; 0xe000ed04
   \   00000016   0x6008             STR      R0,[R1, #+0]
    228          		}
    229          	}
    230          	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
   \                     ??syst_isr_0: (+1)
   \   00000018   0x0020             MOVS     R0,R4
   \   0000001A   0x.... 0x....      BL       vClearInterruptMaskFromISR
    231          }
   \   0000001E   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x........         DC32     prvTaskExitError

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x........         DC32     uxCriticalNesting

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0xE000ED20         DC32     0xe000ed20

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0xE000E010         DC32     0xe000e010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0x00001F3F         DC32     0x1f3f

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   0xE000ED04         DC32     0xe000ed04
    232          /*-----------------------------------------------------------*/
    233          
    234          /*
    235           * Setup the systick timer to generate the tick interrupts at the required
    236           * frequency.
    237           */
    238          static void prvSetupTimerInterrupt( void )
    239          {
    240          	/* Configure SysTick to interrupt at the requested rate. */
    241          	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    242          	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    243          }
    244          /*-----------------------------------------------------------*/
    245          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   prvTaskExitError
       4   pxPortInitialiseStack
       8   syst_isr
         8   -> ulSetInterruptMaskFromISR
         8   -> vClearInterruptMaskFromISR
         8   -> xTaskIncrementTick
       0   vPortEndScheduler
       0   vPortEnterCritical
       0   vPortExitCritical
       0   vPortYield
       8   xPortStartScheduler
         8   -> vPortStartFirstTask


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
      20  prvTaskExitError
      30  pxPortInitialiseStack
      32  syst_isr
       4  uxCriticalNesting
      18  vPortEndScheduler
      20  vPortEnterCritical
      24  vPortExitCritical
      18  vPortYield
      52  xPortStartScheduler

 
   4 bytes in section .data
 238 bytes in section .text
 
 238 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none
